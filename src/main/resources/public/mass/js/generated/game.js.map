{"version":3,"file":"game.js","sources":["../../../src/main/kotlin/com/riseofcat/common/actual_js.kt","../../../src/main/kotlin/domain/KotlinExperiment.kt","../../../src/main/kotlin/kotlinx/io/core/BufferViewJS.kt","../../../src/main/kotlin/masspower/MassPower.kt","../../../../submodule-server/server-common/src/main/kotlin/com/riseofcat/client/ClientModel.kt","../../../../submodule-server/server-common/src/main/kotlin/com/riseofcat/client/PingClient.kt","../../../../submodule-server/server-common/src/main/kotlin/com/riseofcat/share/mass/data.kt","../../../src/main/kotlin/Gen.kt","collections/Collections.kt","collections/Maps.kt","../../../../submodule-server/server-common/src/main/kotlin/kotlinx/io/core/Builder.kt","../../../../../../../../../../../../dummy.kt","_CollectionsJs.kt","util/Standard.kt","util/Lazy.kt","properties/Delegates.kt","collections/MapAccessors.kt","_MapsJs.kt","_ArraysJs.kt","runtime/arrayUtils.kt","kotlin/collections.kt","text/regex/RegexExtensions.kt","text/Strings.kt","text/regex/MatchResult.kt","text/StringBuilder.kt","kotlin/string.kt","_StringsJs.kt","../../../src/main/kotlin/domain/Start.kt","../../../src/main/kotlin/domain/dots/Dots.kt","kotlin/math.kt","../../../src/main/kotlin/domain/empty/EmptyScreen.kt","../../../src/main/kotlin/domain/fractal/Fractal1.kt","../../../src/main/kotlin/domain/fractal/Fractal2.kt","../../../src/main/kotlin/domain/tetris/Block.kt","../../../src/main/kotlin/domain/tetris/Color.kt","../../../src/main/kotlin/domain/tetris/GameSounds.kt","../../../src/main/kotlin/domain/tetris/Piece.kt","../../../src/main/kotlin/domain/tetris/PieceType.kt","../../../src/main/kotlin/domain/tetris/Score.kt","../../../src/main/kotlin/domain/tetris/TetriesScreen.kt","../../../src/main/kotlin/domain/tetris/TiledMap.kt","org.w3c/org.khronos.webgl.kt","util/Preconditions.kt","../../../src/main/kotlin/kotlinx/io/js/TextDecoders.kt","_ComparisonsJs.kt","../../../src/main/kotlin/kotlinx/io/core/ByteOrderJS.kt","../../../src/main/kotlin/kotlinx/io/core/PacketJS.kt","../../../../submodule-server/server-common/src/main/kotlin/kotlinx/io/core/Packet.kt","../../../src/main/kotlin/kotlinx/io/js/TypedArrays.kt","../../../src/main/kotlin/kotlinx/io/js/WebSockets.kt","../../../src/main/kotlin/kotlinx/io/js/XMLHttpRequest.kt","org.w3c/org.w3c.xhr.kt","../../../src/main/kotlin/kotlinx/io/pool/DefaultPool.kt","../../../src/main/kotlin/kuden/Matrix4.kt","../../../src/main/kotlin/kuden/game.kt","collections/Sets.kt","../../../../submodule-server/server-common/src/main/kotlin/com/riseofcat/lib/lib.kt","../../../src/main/kotlin/kuden/shader.kt","../../../src/main/kotlin/kuden/sound.kt","comparisons/Comparisons.kt","kotlin/Comparator.kt","_SequencesJs.kt","../../../src/main/kotlin/masspower/redundant.kt","../../../src/main/kotlin/performance/PerformanceTest.kt","../../../src/main/kotlin/util/GLUtil.kt","../../../src/main/kotlin/util/JsUtil.kt","../../../src/main/kotlin/util/KtUtil.kt","../../../../submodule-server/server-common/src/main/kotlin/com/github/alkaizyr/tree/binarysearch/BinarySearchTree.kt","../../../../submodule-server/server-common/src/main/kotlin/com/github/alkaizyr/tree/binarysearch/Node.kt","../../../../submodule-server/server-common/src/main/kotlin/com/github/alkaizyr/tree/binarysearch/Printer.kt","../../../../submodule-server/server-common/src/main/kotlin/com/github/alkaizyr/tree/btree/BNode.kt","../../../../submodule-server/server-common/src/main/kotlin/com/github/alkaizyr/tree/btree/BTree.kt","../../../../submodule-server/server-common/src/main/kotlin/com/github/alkaizyr/tree/redblack/RBNode.kt","../../../../submodule-server/server-common/src/main/kotlin/com/github/alkaizyr/tree/redblack/RBPrinter.kt","text/Char.kt","../../../../submodule-server/server-common/src/main/kotlin/com/github/alkaizyr/tree/redblack/RedBlackTree.kt","../../../../submodule-server/server-common/src/main/kotlin/com/riseofcat/client/Conf.kt","../../../../submodule-server/server-common/src/main/kotlin/com/riseofcat/common/common.kt","../../../../submodule-server/server-common/src/main/kotlin/com/riseofcat/lib/Signal.kt","../../../../../common/src/main/kotlin/kotlinx/serialization/cbor/CBOR.kt","../../../../submodule-server/server-common/src/main/kotlin/com/riseofcat/share/mass/SerializeHelp.kt","collections/Iterators.kt","../../../../submodule-server/server-common/src/main/kotlin/com/riseofcat/share/mass/payload.kt","../../../../submodule-server/server-common/src/main/kotlin/com/riseofcat/share/ping/ping.kt","../../../../submodule-server/server-common/src/main/kotlin/kotlinx/io/core/Buffers.kt","../../../../submodule-server/server-common/src/main/kotlin/kotlinx/io/core/UTF8.kt","../../../../submodule-server/server-common/src/main/kotlin/kotlinx/io/core/Strings.kt","../../../../submodule-server/server-common/src/main/kotlin/kotlinx/io/pool/Pool.kt","../../../../submodule-server/server-common/src/main/kotlin/com/riseofcat/client/shader.kt"],"sourcesContent":[null,null,null,null,null,null,null,null,"/*\n * Copyright 2010-2017 JetBrains s.r.o.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n@file:kotlin.jvm.JvmMultifileClass\n@file:kotlin.jvm.JvmName(\"CollectionsKt\")\n\npackage kotlin.collections\n\nimport kotlin.comparisons.compareValues\n\ninternal object EmptyIterator : ListIterator<Nothing> {\n    override fun hasNext(): Boolean = false\n    override fun hasPrevious(): Boolean = false\n    override fun nextIndex(): Int = 0\n    override fun previousIndex(): Int = -1\n    override fun next(): Nothing = throw NoSuchElementException()\n    override fun previous(): Nothing = throw NoSuchElementException()\n}\n\ninternal object EmptyList : List<Nothing>, Serializable, RandomAccess {\n    private const val serialVersionUID: Long = -7390468764508069838L\n\n    override fun equals(other: Any?): Boolean = other is List<*> && other.isEmpty()\n    override fun hashCode(): Int = 1\n    override fun toString(): String = \"[]\"\n\n    override val size: Int get() = 0\n    override fun isEmpty(): Boolean = true\n    override fun contains(element: Nothing): Boolean = false\n    override fun containsAll(elements: Collection<Nothing>): Boolean = elements.isEmpty()\n\n    override fun get(index: Int): Nothing = throw IndexOutOfBoundsException(\"Empty list doesn't contain element at index $index.\")\n    override fun indexOf(element: Nothing): Int = -1\n    override fun lastIndexOf(element: Nothing): Int = -1\n\n    override fun iterator(): Iterator<Nothing> = EmptyIterator\n    override fun listIterator(): ListIterator<Nothing> = EmptyIterator\n    override fun listIterator(index: Int): ListIterator<Nothing> {\n        if (index != 0) throw IndexOutOfBoundsException(\"Index: $index\")\n        return EmptyIterator\n    }\n\n    override fun subList(fromIndex: Int, toIndex: Int): List<Nothing> {\n        if (fromIndex == 0 && toIndex == 0) return this\n        throw IndexOutOfBoundsException(\"fromIndex: $fromIndex, toIndex: $toIndex\")\n    }\n\n    private fun readResolve(): Any = EmptyList\n}\n\ninternal fun <T> Array<out T>.asCollection(): Collection<T> = ArrayAsCollection(this, isVarargs = false)\n\nprivate class ArrayAsCollection<T>(val values: Array<out T>, val isVarargs: Boolean): Collection<T> {\n    override val size: Int get() = values.size\n    override fun isEmpty(): Boolean = values.isEmpty()\n    override fun contains(element: T): Boolean = values.contains(element)\n    override fun containsAll(elements: Collection<T>): Boolean = elements.all { contains(it) }\n    override fun iterator(): Iterator<T> = values.iterator()\n    // override hidden toArray implementation to prevent copying of values array\n    public fun toArray(): Array<out Any?> = values.copyToArrayOfAny(isVarargs)\n}\n\n/**\n * Returns an empty read-only list.  The returned list is serializable (JVM).\n * @sample samples.collections.Collections.Lists.emptyReadOnlyList\n */\npublic fun <T> emptyList(): List<T> = EmptyList\n\n/**\n * Returns a new read-only list of given elements.  The returned list is serializable (JVM).\n * @sample samples.collections.Collections.Lists.readOnlyList\n */\npublic fun <T> listOf(vararg elements: T): List<T> = if (elements.size > 0) elements.asList() else emptyList()\n\n/**\n * Returns an empty read-only list.  The returned list is serializable (JVM).\n * @sample samples.collections.Collections.Lists.emptyReadOnlyList\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> listOf(): List<T> = emptyList()\n\n/* Not available on platform: JS */\n\n\n\n\n\n\n\n/**\n * Returns an empty new [MutableList].\n * @sample samples.collections.Collections.Lists.emptyMutableList\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic inline fun <T> mutableListOf(): MutableList<T> = ArrayList()\n\n/**\n * Returns an empty new [ArrayList].\n * @sample samples.collections.Collections.Lists.emptyArrayList\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic inline fun <T> arrayListOf(): ArrayList<T> = ArrayList()\n\n/**\n * Returns a new [MutableList] with the given elements.\n * @sample samples.collections.Collections.Lists.mutableList\n */\npublic fun <T> mutableListOf(vararg elements: T): MutableList<T>\n        = if (elements.size == 0) ArrayList() else ArrayList(ArrayAsCollection(elements, isVarargs = true))\n\n/**\n * Returns a new [ArrayList] with the given elements.\n * @sample samples.collections.Collections.Lists.arrayList\n */\npublic fun <T> arrayListOf(vararg elements: T): ArrayList<T>\n        = if (elements.size == 0) ArrayList() else ArrayList(ArrayAsCollection(elements, isVarargs = true))\n\n/**\n * Returns a new read-only list either of single given element, if it is not null, or empty list if the element is null. The returned list is serializable (JVM).\n * @sample samples.collections.Collections.Lists.listOfNotNull\n */\npublic fun <T : Any> listOfNotNull(element: T?): List<T> = if (element != null) listOf(element) else emptyList()\n\n/**\n * Returns a new read-only list only of those given elements, that are not null.  The returned list is serializable (JVM).\n * @sample samples.collections.Collections.Lists.listOfNotNull\n */\npublic fun <T : Any> listOfNotNull(vararg elements: T?): List<T> = elements.filterNotNull()\n\n/**\n * Creates a new read-only list with the specified [size], where each element is calculated by calling the specified\n * [init] function. The [init] function returns a list element given its index.\n * @sample samples.collections.Collections.Lists.readOnlyListFromInitializer\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic inline fun <T> List(size: Int, init: (index: Int) -> T): List<T> = MutableList(size, init)\n\n/**\n * Creates a new mutable list with the specified [size], where each element is calculated by calling the specified\n * [init] function. The [init] function returns a list element given its index.\n * @sample samples.collections.Collections.Lists.mutableListFromInitializer\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic inline fun <T> MutableList(size: Int, init: (index: Int) -> T): MutableList<T> {\n    val list = ArrayList<T>(size)\n    repeat(size) { index -> list.add(init(index)) }\n    return list\n}\n\n/**\n * Returns an [IntRange] of the valid indices for this collection.\n * @sample samples.collections.Collections.Collections.indicesOfCollection\n */\npublic val Collection<*>.indices: IntRange\n    get() = 0..size - 1\n\n/**\n * Returns the index of the last item in the list or -1 if the list is empty.\n *\n * @sample samples.collections.Collections.Lists.lastIndexOfList\n */\npublic val <T> List<T>.lastIndex: Int\n    get() = this.size - 1\n\n/**\n * Returns `true` if the collection is not empty.\n * @sample samples.collections.Collections.Collections.collectionIsNotEmpty\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Collection<T>.isNotEmpty(): Boolean = !isEmpty()\n\n/**\n * Returns this Collection if it's not `null` and the empty list otherwise.\n * @sample samples.collections.Collections.Collections.collectionOrEmpty\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Collection<T>?.orEmpty(): Collection<T> = this ?: emptyList()\n\n/**\n * Returns this List if it's not `null` and the empty list otherwise.\n * @sample samples.collections.Collections.Lists.listOrEmpty\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> List<T>?.orEmpty(): List<T> = this ?: emptyList()\n\n/* Not available on platform: JS */\n\n\n\n\n\n\n\n\n/**\n * Checks if all elements in the specified collection are contained in this collection.\n *\n * Allows to overcome type-safety restriction of `containsAll` that requires to pass a collection of type `Collection<E>`.\n * @sample samples.collections.Collections.Collections.collectionContainsAll\n */\n@Suppress(\"EXTENSION_SHADOWED_BY_MEMBER\") // false warning, extension takes precedence in some cases\n@kotlin.internal.InlineOnly\npublic inline fun <@kotlin.internal.OnlyInputTypes T> Collection<T>.containsAll(elements: Collection<T>): Boolean = this.containsAll(elements)\n\ninternal fun <T> List<T>.optimizeReadOnlyList() = when (size) {\n    0 -> emptyList()\n    1 -> listOf(this[0])\n    else -> this\n}\n\n/* Not available on platform: JS */\n\n\n\n\n/* Not available on platform: JS */\n\n\n\n\n/* Not available on platform: JS */\n\n\n\n\n\n\n\n\n/**\n * Searches this list or its range for the provided [element] using the binary search algorithm.\n * The list is expected to be sorted into ascending order according to the Comparable natural ordering of its elements,\n * otherwise the result is undefined.\n *\n * If the list contains multiple elements equal to the specified [element], there is no guarantee which one will be found.\n *\n * `null` value is considered to be less than any non-null value.\n *\n * @return the index of the element, if it is contained in the list within the specified range;\n * otherwise, the inverted insertion point `(-insertion point - 1)`.\n * The insertion point is defined as the index at which the element should be inserted,\n * so that the list (or the specified subrange of list) still remains sorted.\n * @sample samples.collections.Collections.Lists.binarySearchOnComparable\n * @sample samples.collections.Collections.Lists.binarySearchWithBoundaries\n */\npublic fun <T: Comparable<T>> List<T?>.binarySearch(element: T?, fromIndex: Int = 0, toIndex: Int = size): Int {\n    rangeCheck(size, fromIndex, toIndex)\n\n    var low = fromIndex\n    var high = toIndex - 1\n\n    while (low <= high) {\n        val mid = (low + high).ushr(1) // safe from overflows\n        val midVal = get(mid)\n        val cmp = compareValues(midVal, element)\n\n        if (cmp < 0)\n            low = mid + 1\n        else if (cmp > 0)\n            high = mid - 1\n        else\n            return mid // key found\n    }\n    return -(low + 1)  // key not found\n}\n\n/**\n * Searches this list or its range for the provided [element] using the binary search algorithm.\n * The list is expected to be sorted into ascending order according to the specified [comparator],\n * otherwise the result is undefined.\n *\n * If the list contains multiple elements equal to the specified [element], there is no guarantee which one will be found.\n *\n * `null` value is considered to be less than any non-null value.\n *\n * @return the index of the element, if it is contained in the list within the specified range;\n * otherwise, the inverted insertion point `(-insertion point - 1)`.\n * The insertion point is defined as the index at which the element should be inserted,\n * so that the list (or the specified subrange of list) still remains sorted according to the specified [comparator].\n * @sample samples.collections.Collections.Lists.binarySearchWithComparator\n */\npublic fun <T> List<T>.binarySearch(element: T, comparator: Comparator<in T>, fromIndex: Int = 0, toIndex: Int = size): Int {\n    rangeCheck(size, fromIndex, toIndex)\n\n    var low = fromIndex\n    var high = toIndex - 1\n\n    while (low <= high) {\n        val mid = (low + high).ushr(1) // safe from overflows\n        val midVal = get(mid)\n        val cmp = comparator.compare(midVal, element)\n\n        if (cmp < 0)\n            low = mid + 1\n        else if (cmp > 0)\n            high = mid - 1\n        else\n            return mid // key found\n    }\n    return -(low + 1)  // key not found\n}\n\n/**\n * Searches this list or its range for an element having the key returned by the specified [selector] function\n * equal to the provided [key] value using the binary search algorithm.\n * The list is expected to be sorted into ascending order according to the Comparable natural ordering of keys of its elements.\n * otherwise the result is undefined.\n *\n * If the list contains multiple elements with the specified [key], there is no guarantee which one will be found.\n *\n * `null` value is considered to be less than any non-null value.\n *\n * @return the index of the element with the specified [key], if it is contained in the list within the specified range;\n * otherwise, the inverted insertion point `(-insertion point - 1)`.\n * The insertion point is defined as the index at which the element should be inserted,\n * so that the list (or the specified subrange of list) still remains sorted.\n * @sample samples.collections.Collections.Lists.binarySearchByKey\n */\npublic inline fun <T, K : Comparable<K>> List<T>.binarySearchBy(key: K?, fromIndex: Int = 0, toIndex: Int = size, crossinline selector: (T) -> K?): Int =\n        binarySearch(fromIndex, toIndex) { compareValues(selector(it), key) }\n\n// do not introduce this overload --- too rare\n//public fun <T, K> List<T>.binarySearchBy(key: K, comparator: Comparator<K>, fromIndex: Int = 0, toIndex: Int = size(), selector: (T) -> K): Int =\n//        binarySearch(fromIndex, toIndex) { comparator.compare(selector(it), key) }\n\n\n/**\n * Searches this list or its range for an element for which [comparison] function returns zero using the binary search algorithm.\n * The list is expected to be sorted into ascending order according to the provided [comparison],\n * otherwise the result is undefined.\n *\n * If the list contains multiple elements for which [comparison] returns zero, there is no guarantee which one will be found.\n *\n * @param comparison function that compares an element of the list with the element being searched.\n *\n * @return the index of the found element, if it is contained in the list within the specified range;\n * otherwise, the inverted insertion point `(-insertion point - 1)`.\n * The insertion point is defined as the index at which the element should be inserted,\n * so that the list (or the specified subrange of list) still remains sorted.\n * @sample samples.collections.Collections.Lists.binarySearchWithComparisonFunction\n */\npublic fun <T> List<T>.binarySearch(fromIndex: Int = 0, toIndex: Int = size, comparison: (T) -> Int): Int {\n    rangeCheck(size, fromIndex, toIndex)\n\n    var low = fromIndex\n    var high = toIndex - 1\n\n    while (low <= high) {\n        val mid = (low + high).ushr(1) // safe from overflows\n        val midVal = get(mid)\n        val cmp = comparison(midVal)\n\n        if (cmp < 0)\n            low = mid + 1\n        else if (cmp > 0)\n            high = mid - 1\n        else\n            return mid // key found\n    }\n    return -(low + 1)  // key not found\n}\n\n/**\n * Checks that `from` and `to` are in\n * the range of [0..size] and throws an appropriate exception, if they aren't.\n */\nprivate fun rangeCheck(size: Int, fromIndex: Int, toIndex: Int) {\n    when {\n        fromIndex > toIndex -> throw IllegalArgumentException(\"fromIndex ($fromIndex) is greater than toIndex ($toIndex).\")\n        fromIndex < 0 -> throw IndexOutOfBoundsException(\"fromIndex ($fromIndex) is less than zero.\")\n        toIndex > size -> throw IndexOutOfBoundsException(\"toIndex ($toIndex) is greater than size ($size).\")\n    }\n}\n\n\n","@file:kotlin.jvm.JvmMultifileClass\n@file:kotlin.jvm.JvmName(\"MapsKt\")\n\npackage kotlin.collections\n\nprivate object EmptyMap : Map<Any?, Nothing>, Serializable {\n    private const val serialVersionUID: Long = 8246714829545688274\n\n    override fun equals(other: Any?): Boolean = other is Map<*,*> && other.isEmpty()\n    override fun hashCode(): Int = 0\n    override fun toString(): String = \"{}\"\n\n    override val size: Int get() = 0\n    override fun isEmpty(): Boolean = true\n\n    override fun containsKey(key: Any?): Boolean = false\n    override fun containsValue(value: Nothing): Boolean = false\n    override fun get(key: Any?): Nothing? = null\n    override val entries: Set<Map.Entry<Any?, Nothing>> get() = EmptySet\n    override val keys: Set<Any?> get() = EmptySet\n    override val values: Collection<Nothing> get() = EmptyList\n\n    private fun readResolve(): Any = EmptyMap\n}\n\n/**\n * Returns an empty read-only map of specified type.\n *\n * The returned map is serializable (JVM).\n * @sample samples.collections.Maps.Instantiation.emptyReadOnlyMap\n */\npublic fun <K, V> emptyMap(): Map<K, V> = @Suppress(\"UNCHECKED_CAST\") (EmptyMap as Map<K, V>)\n\n/**\n * Returns a new read-only map with the specified contents, given as a list of pairs\n * where the first value is the key and the second is the value.\n *\n * If multiple pairs have the same key, the resulting map will contain the value from the last of those pairs.\n *\n * Entries of the map are iterated in the order they were specified.\n *\n * The returned map is serializable (JVM).\n *\n * @sample samples.collections.Maps.Instantiation.mapFromPairs\n */\npublic fun <K, V> mapOf(vararg pairs: Pair<K, V>): Map<K, V> = if (pairs.size > 0) pairs.toMap(LinkedHashMap(mapCapacity(pairs.size))) else emptyMap()\n\n/**\n * Returns an empty read-only map.\n *\n * The returned map is serializable (JVM).\n * @sample samples.collections.Maps.Instantiation.emptyReadOnlyMap\n */\n@kotlin.internal.InlineOnly\npublic inline fun <K, V> mapOf(): Map<K, V> = emptyMap()\n\n/* Not available on platform: JS */\n\n\n\n\n\n\n\n\n\n\n/**\n * Returns an empty new [MutableMap].\n *\n * The returned map preserves the entry iteration order.\n * @sample samples.collections.Maps.Instantiation.emptyMutableMap\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic inline fun <K, V> mutableMapOf(): MutableMap<K, V> = LinkedHashMap()\n\n/**\n * Returns a new [MutableMap] with the specified contents, given as a list of pairs\n * where the first component is the key and the second is the value.\n *\n * If multiple pairs have the same key, the resulting map will contain the value from the last of those pairs.\n *\n * Entries of the map are iterated in the order they were specified.\n *\n * @sample samples.collections.Maps.Instantiation.mutableMapFromPairs\n * @sample samples.collections.Maps.Instantiation.emptyMutableMap\n */\npublic fun <K, V> mutableMapOf(vararg pairs: Pair<K, V>): MutableMap<K, V>\n        = LinkedHashMap<K, V>(mapCapacity(pairs.size)).apply { putAll(pairs) }\n\n/**\n * Returns an empty new [HashMap].\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic inline fun <K, V> hashMapOf(): HashMap<K, V> = HashMap<K, V>()\n\n/**\n * Returns a new [HashMap] with the specified contents, given as a list of pairs\n * where the first component is the key and the second is the value.\n *\n * @sample samples.collections.Maps.Instantiation.hashMapFromPairs\n */\npublic fun <K, V> hashMapOf(vararg pairs: Pair<K, V>): HashMap<K, V>\n        = HashMap<K, V>(mapCapacity(pairs.size)).apply { putAll(pairs) }\n\n/**\n * Returns an empty new [LinkedHashMap].\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic inline fun <K, V> linkedMapOf(): LinkedHashMap<K, V> = LinkedHashMap<K, V>()\n\n/**\n * Returns a new [LinkedHashMap] with the specified contents, given as a list of pairs\n * where the first component is the key and the second is the value.\n *\n * If multiple pairs have the same key, the resulting map will contain the value from the last of those pairs.\n *\n * Entries of the map are iterated in the order they were specified.\n *\n * @sample samples.collections.Maps.Instantiation.linkedMapFromPairs\n */\npublic fun <K, V> linkedMapOf(vararg pairs: Pair<K, V>): LinkedHashMap<K, V>\n        = pairs.toMap(LinkedHashMap(mapCapacity(pairs.size)))\n\n/**\n * Calculate the initial capacity of a map, based on Guava's com.google.common.collect.Maps approach. This is equivalent\n * to the Collection constructor for HashSet, (c.size()/.75f) + 1, but provides further optimisations for very small or\n * very large sizes, allows support non-collection classes, and provides consistency for all map based class construction.\n */\n@PublishedApi\ninternal fun mapCapacity(expectedSize: Int): Int {\n    if (expectedSize < 3) {\n        return expectedSize + 1\n    }\n    if (expectedSize < INT_MAX_POWER_OF_TWO) {\n        return expectedSize + expectedSize / 3\n    }\n    return Int.MAX_VALUE // any large value\n}\n\nprivate const val INT_MAX_POWER_OF_TWO: Int = Int.MAX_VALUE / 2 + 1\n\n/** Returns `true` if this map is not empty. */\n@kotlin.internal.InlineOnly\npublic inline fun <K, V> Map<out K, V>.isNotEmpty(): Boolean = !isEmpty()\n\n/**\n * Returns the [Map] if its not `null`, or the empty [Map] otherwise.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <K, V> Map<K, V>?.orEmpty() : Map<K, V> = this ?: emptyMap()\n\n/**\n * Checks if the map contains the given key.\n *\n * This method allows to use the `x in map` syntax for checking whether an object is contained in the map.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <@kotlin.internal.OnlyInputTypes K, V> Map<out K, V>.contains(key: K) : Boolean = containsKey(key)\n\n/**\n * Returns the value corresponding to the given [key], or `null` if such a key is not present in the map.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <@kotlin.internal.OnlyInputTypes K, V> Map<out K, V>.get(key: K): V?\n        = @Suppress(\"UNCHECKED_CAST\") (this as Map<K, V>).get(key)\n\n/**\n * Allows to use the index operator for storing values in a mutable map.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <K, V> MutableMap<K, V>.set(key: K, value: V): Unit {\n    put(key, value)\n}\n\n/**\n * Returns `true` if the map contains the specified [key].\n *\n * Allows to overcome type-safety restriction of `containsKey` that requires to pass a key of type `K`.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <@kotlin.internal.OnlyInputTypes K> Map<out K, *>.containsKey(key: K): Boolean\n        = @Suppress(\"UNCHECKED_CAST\") (this as Map<K, *>).containsKey(key)\n\n/**\n * Returns `true` if the map maps one or more keys to the specified [value].\n *\n * Allows to overcome type-safety restriction of `containsValue` that requires to pass a value of type `V`.\n */\n@Suppress(\"EXTENSION_SHADOWED_BY_MEMBER\") // false warning, extension takes precedence in some cases\n@kotlin.internal.InlineOnly\npublic inline fun <K, @kotlin.internal.OnlyInputTypes V> Map<K, V>.containsValue(value: V): Boolean = this.containsValue(value)\n\n\n/**\n * Removes the specified key and its corresponding value from this map.\n *\n * @return the previous value associated with the key, or `null` if the key was not present in the map.\n\n * Allows to overcome type-safety restriction of `remove` that requires to pass a key of type `K`.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <@kotlin.internal.OnlyInputTypes K, V> MutableMap<out K, V>.remove(key: K): V?\n        = @Suppress(\"UNCHECKED_CAST\") (this as MutableMap<K, V>).remove(key)\n\n/**\n * Returns the key component of the map entry.\n *\n * This method allows to use destructuring declarations when working with maps, for example:\n * ```\n * for ((key, value) in map) {\n *     // do something with the key and the value\n * }\n * ```\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <K, V> Map.Entry<K, V>.component1(): K = key\n\n/**\n * Returns the value component of the map entry.\n *\n * This method allows to use destructuring declarations when working with maps, for example:\n * ```\n * for ((key, value) in map) {\n *     // do something with the key and the value\n * }\n * ```\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <K, V> Map.Entry<K, V>.component2(): V = value\n\n/**\n * Converts entry to [Pair] with key being first component and value being second.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <K, V> Map.Entry<K, V>.toPair(): Pair<K, V> = Pair(key, value)\n\n/**\n * Returns the value for the given key, or the result of the [defaultValue] function if there was no entry for the given key.\n *\n * @sample samples.collections.Maps.Usage.getOrElse\n */\n@kotlin.internal.InlineOnly\npublic inline fun <K, V> Map<K, V>.getOrElse(key: K, defaultValue: () -> V): V = get(key) ?: defaultValue()\n\n\ninternal inline fun <K, V> Map<K, V>.getOrElseNullable(key: K, defaultValue: () -> V): V {\n    val value = get(key)\n    if (value == null && !containsKey(key)) {\n        return defaultValue()\n    } else {\n        @Suppress(\"UNCHECKED_CAST\")\n        return value as V\n    }\n}\n\n/**\n * Returns the value for the given [key] or throws an exception if there is no such key in the map.\n *\n * If the map was created by [withDefault], resorts to its `defaultValue` provider function\n * instead of throwing an exception.\n *\n * @throws NoSuchElementException when the map doesn't contain a value for the specified key and\n * no implicit default value was provided for that map.\n */\n@SinceKotlin(\"1.1\")\npublic fun <K, V> Map<K, V>.getValue(key: K): V = getOrImplicitDefault(key)\n\n/**\n * Returns the value for the given key. If the key is not found in the map, calls the [defaultValue] function,\n * puts its result into the map under the given key and returns it.\n *\n * @sample samples.collections.Maps.Usage.getOrPut\n */\npublic inline fun <K, V> MutableMap<K, V>.getOrPut(key: K, defaultValue: () -> V): V {\n    val value = get(key)\n    return if (value == null) {\n        val answer = defaultValue()\n        put(key, answer)\n        answer\n    } else {\n        value\n    }\n}\n\n/**\n * Returns an [Iterator] over the entries in the [Map].\n *\n * @sample samples.collections.Maps.Usage.forOverEntries\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <K, V> Map<out K, V>.iterator(): Iterator<Map.Entry<K, V>> = entries.iterator()\n\n/**\n * Returns a [MutableIterator] over the mutable entries in the [MutableMap].\n *\n */\n@kotlin.jvm.JvmName(\"mutableIterator\")\n@kotlin.internal.InlineOnly\npublic inline operator fun <K, V> MutableMap<K, V>.iterator(): MutableIterator<MutableMap.MutableEntry<K, V>> = entries.iterator()\n\n/**\n * Populates the given [destination] map with entries having the keys of this map and the values obtained\n * by applying the [transform] function to each entry in this [Map].\n */\npublic inline fun <K, V, R, M : MutableMap<in K, in R>> Map<out K, V>.mapValuesTo(destination: M, transform: (Map.Entry<K, V>) -> R): M {\n    return entries.associateByTo(destination, { it.key }, transform)\n}\n\n/**\n * Populates the given [destination] map with entries having the keys obtained\n * by applying the [transform] function to each entry in this [Map] and the values of this map.\n *\n * In case if any two entries are mapped to the equal keys, the value of the latter one will overwrite\n * the value associated with the former one.\n */\npublic inline fun <K, V, R, M : MutableMap<in R, in V>> Map<out K, V>.mapKeysTo(destination: M, transform: (Map.Entry<K, V>) -> R): M {\n    return entries.associateByTo(destination, transform, { it.value })\n}\n\n/**\n * Puts all the given [pairs] into this [MutableMap] with the first component in the pair being the key and the second the value.\n */\npublic fun <K, V> MutableMap<in K, in V>.putAll(pairs: Array<out Pair<K, V>>): Unit {\n    for ((key, value) in pairs) {\n        put(key, value)\n    }\n}\n\n/**\n * Puts all the elements of the given collection into this [MutableMap] with the first component in the pair being the key and the second the value.\n */\npublic fun <K, V> MutableMap<in K, in V>.putAll(pairs: Iterable<Pair<K,V>>): Unit {\n    for ((key, value) in pairs) {\n        put(key, value)\n    }\n}\n\n/**\n * Puts all the elements of the given sequence into this [MutableMap] with the first component in the pair being the key and the second the value.\n */\npublic fun <K, V> MutableMap<in K, in V>.putAll(pairs: Sequence<Pair<K,V>>): Unit {\n    for ((key, value) in pairs) {\n        put(key, value)\n    }\n}\n\n/**\n * Returns a new map with entries having the keys of this map and the values obtained by applying the [transform]\n * function to each entry in this [Map].\n *\n * The returned map preserves the entry iteration order of the original map.\n *\n * @sample samples.collections.Maps.Transformations.mapValues\n */\npublic inline fun <K, V, R> Map<out K, V>.mapValues(transform: (Map.Entry<K, V>) -> R): Map<K, R> {\n    return mapValuesTo(LinkedHashMap<K, R>(mapCapacity(size)), transform) // .optimizeReadOnlyMap()\n}\n\n/**\n * Returns a new Map with entries having the keys obtained by applying the [transform] function to each entry in this\n * [Map] and the values of this map.\n *\n * In case if any two entries are mapped to the equal keys, the value of the latter one will overwrite\n * the value associated with the former one.\n *\n * The returned map preserves the entry iteration order of the original map.\n *\n * @sample samples.collections.Maps.Transformations.mapKeys\n */\npublic inline fun <K, V, R> Map<out K, V>.mapKeys(transform: (Map.Entry<K, V>) -> R): Map<R, V> {\n    return mapKeysTo(LinkedHashMap<R, V>(mapCapacity(size)), transform) // .optimizeReadOnlyMap()\n}\n\n/**\n * Returns a map containing all key-value pairs with keys matching the given [predicate].\n *\n * The returned map preserves the entry iteration order of the original map.\n * @sample samples.collections.Maps.Filtering.filterKeys\n */\npublic inline fun <K, V> Map<out K, V>.filterKeys(predicate: (K) -> Boolean): Map<K, V> {\n    val result = LinkedHashMap<K, V>()\n    for (entry in this) {\n        if (predicate(entry.key)) {\n            result.put(entry.key, entry.value)\n        }\n    }\n    return result\n}\n\n/**\n * Returns a map containing all key-value pairs with values matching the given [predicate].\n *\n * The returned map preserves the entry iteration order of the original map.\n *  @sample samples.collections.Maps.Filtering.filterValues\n */\npublic inline fun <K, V> Map<out K, V>.filterValues(predicate: (V) -> Boolean): Map<K, V> {\n    val result = LinkedHashMap<K, V>()\n    for (entry in this) {\n        if (predicate(entry.value)) {\n            result.put(entry.key, entry.value)\n        }\n    }\n    return result\n}\n\n\n/**\n * Appends all entries matching the given [predicate] into the mutable map given as [destination] parameter.\n *\n * @return the destination map.\n * @sample samples.collections.Maps.Filtering.filterTo\n */\npublic inline fun <K, V, M : MutableMap<in K, in V>> Map<out K, V>.filterTo(destination: M, predicate: (Map.Entry<K, V>) -> Boolean): M {\n    for (element in this) {\n        if (predicate(element)) {\n            destination.put(element.key, element.value)\n        }\n    }\n    return destination\n}\n\n/**\n * Returns a new map containing all key-value pairs matching the given [predicate].\n *\n * The returned map preserves the entry iteration order of the original map.\n * @sample samples.collections.Maps.Filtering.filter\n */\npublic inline fun <K, V> Map<out K, V>.filter(predicate: (Map.Entry<K, V>) -> Boolean): Map<K, V> {\n    return filterTo(LinkedHashMap<K, V>(), predicate)\n}\n\n/**\n * Appends all entries not matching the given [predicate] into the given [destination].\n *\n * @return the destination map.\n * @sample samples.collections.Maps.Filtering.filterNotTo\n */\npublic inline fun <K, V, M : MutableMap<in K, in V>> Map<out K, V>.filterNotTo(destination: M, predicate: (Map.Entry<K, V>) -> Boolean): M {\n    for (element in this) {\n        if (!predicate(element)) {\n            destination.put(element.key, element.value)\n        }\n    }\n    return destination\n}\n\n/**\n * Returns a new map containing all key-value pairs not matching the given [predicate].\n *\n * The returned map preserves the entry iteration order of the original map.\n * @sample samples.collections.Maps.Filtering.filterNot\n */\npublic inline fun <K, V> Map<out K, V>.filterNot(predicate: (Map.Entry<K, V>) -> Boolean): Map<K, V> {\n    return filterNotTo(LinkedHashMap<K, V>(), predicate)\n}\n\n/**\n * Returns a new map containing all key-value pairs from the given collection of pairs.\n *\n * The returned map preserves the entry iteration order of the original collection.\n */\npublic fun <K, V> Iterable<Pair<K, V>>.toMap(): Map<K, V> {\n    if (this is Collection) {\n        return when (size) {\n            0 -> emptyMap()\n            1 -> mapOf(if (this is List) this[0] else iterator().next())\n            else -> toMap(LinkedHashMap<K, V>(mapCapacity(size)))\n        }\n    }\n    return toMap(LinkedHashMap<K, V>()).optimizeReadOnlyMap()\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs from the given collection of pairs.\n */\npublic fun <K, V, M : MutableMap<in K, in V>> Iterable<Pair<K, V>>.toMap(destination: M): M\n        = destination.apply { putAll(this@toMap) }\n\n/**\n * Returns a new map containing all key-value pairs from the given array of pairs.\n *\n * The returned map preserves the entry iteration order of the original array.\n */\npublic fun <K, V> Array<out Pair<K, V>>.toMap(): Map<K, V> = when(size) {\n    0 -> emptyMap()\n    1 -> mapOf(this[0])\n    else -> toMap(LinkedHashMap<K, V>(mapCapacity(size)))\n}\n\n/**\n *  Populates and returns the [destination] mutable map with key-value pairs from the given array of pairs.\n */\npublic fun <K, V, M : MutableMap<in K, in V>> Array<out Pair<K, V>>.toMap(destination: M): M\n        = destination.apply { putAll(this@toMap) }\n\n/**\n * Returns a new map containing all key-value pairs from the given sequence of pairs.\n *\n * The returned map preserves the entry iteration order of the original sequence.\n */\npublic fun <K, V> Sequence<Pair<K, V>>.toMap(): Map<K, V> = toMap(LinkedHashMap<K, V>()).optimizeReadOnlyMap()\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs from the given sequence of pairs.\n */\npublic fun <K, V, M : MutableMap<in K, in V>> Sequence<Pair<K, V>>.toMap(destination: M): M\n        = destination.apply { putAll(this@toMap) }\n\n/**\n * Returns a new read-only map containing all key-value pairs from the original map.\n *\n * The returned map preserves the entry iteration order of the original map.\n */\n@SinceKotlin(\"1.1\")\npublic fun <K, V> Map<out K, V>.toMap(): Map<K, V> = when (size) {\n    0 -> emptyMap()\n    1 -> toSingletonMap()\n    else -> toMutableMap()\n}\n\n/**\n * Returns a new mutable map containing all key-value pairs from the original map.\n *\n * The returned map preserves the entry iteration order of the original map.\n */\n@SinceKotlin(\"1.1\")\npublic fun <K, V> Map<out K, V>.toMutableMap(): MutableMap<K, V> = LinkedHashMap(this)\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs from the given map.\n */\n@SinceKotlin(\"1.1\")\npublic fun <K, V, M : MutableMap<in K, in V>> Map<out K, V>.toMap(destination: M): M\n        = destination.apply { putAll(this@toMap) }\n\n/**\n * Creates a new read-only map by replacing or adding an entry to this map from a given key-value [pair].\n *\n * The returned map preserves the entry iteration order of the original map.\n * The [pair] is iterated in the end if it has a unique key.\n */\npublic operator fun <K, V> Map<out K, V>.plus(pair: Pair<K, V>): Map<K, V>\n        = if (this.isEmpty()) mapOf(pair) else LinkedHashMap(this).apply { put(pair.first, pair.second) }\n\n/**\n * Creates a new read-only map by replacing or adding entries to this map from a given collection of key-value [pairs].\n *\n * The returned map preserves the entry iteration order of the original map.\n * Those [pairs] with unique keys are iterated in the end in the order of [pairs] collection.\n */\npublic operator fun <K, V> Map<out K, V>.plus(pairs: Iterable<Pair<K, V>>): Map<K, V>\n        = if (this.isEmpty()) pairs.toMap() else LinkedHashMap(this).apply { putAll(pairs) }\n\n/**\n * Creates a new read-only map by replacing or adding entries to this map from a given array of key-value [pairs].\n *\n * The returned map preserves the entry iteration order of the original map.\n * Those [pairs] with unique keys are iterated in the end in the order of [pairs] array.\n */\npublic operator fun <K, V> Map<out K, V>.plus(pairs: Array<out Pair<K, V>>): Map<K, V>\n        = if (this.isEmpty()) pairs.toMap() else LinkedHashMap(this).apply { putAll(pairs) }\n\n/**\n * Creates a new read-only map by replacing or adding entries to this map from a given sequence of key-value [pairs].\n *\n * The returned map preserves the entry iteration order of the original map.\n * Those [pairs] with unique keys are iterated in the end in the order of [pairs] sequence.\n */\npublic operator fun <K, V> Map<out K, V>.plus(pairs: Sequence<Pair<K, V>>): Map<K, V>\n        = LinkedHashMap(this).apply { putAll(pairs) }.optimizeReadOnlyMap()\n\n/**\n * Creates a new read-only map by replacing or adding entries to this map from another [map].\n *\n * The returned map preserves the entry iteration order of the original map.\n * Those entries of another [map] that are missing in this map are iterated in the end in the order of that [map].\n */\npublic operator fun <K, V> Map<out K, V>.plus(map: Map<out K, V>): Map<K, V>\n        = LinkedHashMap(this).apply { putAll(map) }\n\n\n/**\n * Appends or replaces the given [pair] in this mutable map.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <K, V> MutableMap<in K, in V>.plusAssign(pair: Pair<K, V>) {\n    put(pair.first, pair.second)\n}\n\n/**\n * Appends or replaces all pairs from the given collection of [pairs] in this mutable map.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <K, V> MutableMap<in K, in V>.plusAssign(pairs: Iterable<Pair<K, V>>) {\n    putAll(pairs)\n}\n\n/**\n * Appends or replaces all pairs from the given array of [pairs] in this mutable map.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <K, V> MutableMap<in K, in V>.plusAssign(pairs: Array<out Pair<K, V>>) {\n    putAll(pairs)\n}\n\n/**\n * Appends or replaces all pairs from the given sequence of [pairs] in this mutable map.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <K, V> MutableMap<in K, in V>.plusAssign(pairs: Sequence<Pair<K, V>>) {\n    putAll(pairs)\n}\n\n/**\n * Appends or replaces all entries from the given [map] in this mutable map.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <K, V> MutableMap<in K, in V>.plusAssign(map: Map<K, V>) {\n    putAll(map)\n}\n\n/**\n * Returns a map containing all entries of the original map except the entry with the given [key].\n *\n * The returned map preserves the entry iteration order of the original map.\n */\n@SinceKotlin(\"1.1\")\npublic operator fun <K, V> Map<out K, V>.minus(key: K): Map<K, V>\n        = this.toMutableMap().apply { minusAssign(key) }.optimizeReadOnlyMap()\n\n/**\n * Returns a map containing all entries of the original map except those entries\n * the keys of which are contained in the given [keys] collection.\n *\n * The returned map preserves the entry iteration order of the original map.\n */\n@SinceKotlin(\"1.1\")\npublic operator fun <K, V> Map<out K, V>.minus(keys: Iterable<K>): Map<K, V>\n        = this.toMutableMap().apply { minusAssign(keys) }.optimizeReadOnlyMap()\n\n/**\n * Returns a map containing all entries of the original map except those entries\n * the keys of which are contained in the given [keys] array.\n *\n * The returned map preserves the entry iteration order of the original map.\n */\n@SinceKotlin(\"1.1\")\npublic operator fun <K, V> Map<out K, V>.minus(keys: Array<out K>): Map<K, V>\n        = this.toMutableMap().apply { minusAssign(keys) }.optimizeReadOnlyMap()\n\n/**\n * Returns a map containing all entries of the original map except those entries\n * the keys of which are contained in the given [keys] sequence.\n *\n * The returned map preserves the entry iteration order of the original map.\n */\n@SinceKotlin(\"1.1\")\npublic operator fun <K, V> Map<out K, V>.minus(keys: Sequence<K>): Map<K, V>\n        = this.toMutableMap().apply { minusAssign(keys) }.optimizeReadOnlyMap()\n\n/**\n * Removes the entry with the given [key] from this mutable map.\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic inline operator fun <K, V> MutableMap<K, V>.minusAssign(key: K) {\n    remove(key)\n}\n\n/**\n * Removes all entries the keys of which are contained in the given [keys] collection from this mutable map.\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic inline operator fun <K, V> MutableMap<K, V>.minusAssign(keys: Iterable<K>) {\n    this.keys.removeAll(keys)\n}\n\n/**\n * Removes all entries the keys of which are contained in the given [keys] array from this mutable map.\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic inline operator fun <K, V> MutableMap<K, V>.minusAssign(keys: Array<out K>) {\n    this.keys.removeAll(keys)\n}\n\n/**\n * Removes all entries from the keys of which are contained in the given [keys] sequence from this mutable map.\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic inline operator fun <K, V> MutableMap<K, V>.minusAssign(keys: Sequence<K>) {\n    this.keys.removeAll(keys)\n}\n\n\n// do not expose for now @PublishedApi\ninternal fun <K, V> Map<K, V>.optimizeReadOnlyMap() = when (size) {\n    0 -> emptyMap()\n    1 -> toSingletonMapOrSelf()\n    else -> this\n}\n\n/* Not available on platform: JS */\n\n\n\n\n/* Not available on platform: JS */\n\n\n\n",null,null,"@file:kotlin.jvm.JvmMultifileClass\n@file:kotlin.jvm.JvmName(\"CollectionsKt\")\n\npackage kotlin.collections\n\n//\n// NOTE THIS FILE IS AUTO-GENERATED by the GenerateStandardLib.kt\n// See: https://github.com/JetBrains/kotlin/tree/master/libraries/stdlib\n//\n\nimport kotlin.js.*\nimport kotlin.comparisons.*\n\n/**\n * Returns 1st *element* from the collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <T> List<T>.component1(): T {\n    return get(0)\n}\n\n/**\n * Returns 2nd *element* from the collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <T> List<T>.component2(): T {\n    return get(1)\n}\n\n/**\n * Returns 3rd *element* from the collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <T> List<T>.component3(): T {\n    return get(2)\n}\n\n/**\n * Returns 4th *element* from the collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <T> List<T>.component4(): T {\n    return get(3)\n}\n\n/**\n * Returns 5th *element* from the collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <T> List<T>.component5(): T {\n    return get(4)\n}\n\n/**\n * Returns `true` if [element] is found in the collection.\n */\npublic operator fun <@kotlin.internal.OnlyInputTypes T> Iterable<T>.contains(element: T): Boolean {\n    if (this is Collection)\n        return contains(element)\n    return indexOf(element) >= 0\n}\n\n/**\n * Returns an element at the given [index] or throws an [IndexOutOfBoundsException] if the [index] is out of bounds of this collection.\n */\npublic fun <T> Iterable<T>.elementAt(index: Int): T {\n    if (this is List)\n        return get(index)\n    return elementAtOrElse(index) { throw IndexOutOfBoundsException(\"Collection doesn't contain element at index $index.\") }\n}\n\n/**\n * Returns an element at the given [index] or throws an [IndexOutOfBoundsException] if the [index] is out of bounds of this list.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> List<T>.elementAt(index: Int): T {\n    return get(index)\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this collection.\n */\npublic fun <T> Iterable<T>.elementAtOrElse(index: Int, defaultValue: (Int) -> T): T {\n    if (this is List)\n        return this.getOrElse(index, defaultValue)\n    if (index < 0)\n        return defaultValue(index)\n    val iterator = iterator()\n    var count = 0\n    while (iterator.hasNext()) {\n        val element = iterator.next()\n        if (index == count++)\n            return element\n    }\n    return defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this list.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> List<T>.elementAtOrElse(index: Int, defaultValue: (Int) -> T): T {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this collection.\n */\npublic fun <T> Iterable<T>.elementAtOrNull(index: Int): T? {\n    if (this is List)\n        return this.getOrNull(index)\n    if (index < 0)\n        return null\n    val iterator = iterator()\n    var count = 0\n    while (iterator.hasNext()) {\n        val element = iterator.next()\n        if (index == count++)\n            return element\n    }\n    return null\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this list.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> List<T>.elementAtOrNull(index: Int): T? {\n    return this.getOrNull(index)\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if no such element was found.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Iterable<T>.find(predicate: (T) -> Boolean): T? {\n    return firstOrNull(predicate)\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Iterable<T>.findLast(predicate: (T) -> Boolean): T? {\n    return lastOrNull(predicate)\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> List<T>.findLast(predicate: (T) -> Boolean): T? {\n    return lastOrNull(predicate)\n}\n\n/**\n * Returns first element.\n * @throws [NoSuchElementException] if the collection is empty.\n */\npublic fun <T> Iterable<T>.first(): T {\n    when (this) {\n        is List -> return this.first()\n        else -> {\n            val iterator = iterator()\n            if (!iterator.hasNext())\n                throw NoSuchElementException(\"Collection is empty.\")\n            return iterator.next()\n        }\n    }\n}\n\n/**\n * Returns first element.\n * @throws [NoSuchElementException] if the list is empty.\n */\npublic fun <T> List<T>.first(): T {\n    if (isEmpty())\n        throw NoSuchElementException(\"List is empty.\")\n    return this[0]\n}\n\n/**\n * Returns the first element matching the given [predicate].\n * @throws [NoSuchElementException] if no such element is found.\n */\npublic inline fun <T> Iterable<T>.first(predicate: (T) -> Boolean): T {\n    for (element in this) if (predicate(element)) return element\n    throw NoSuchElementException(\"Collection contains no element matching the predicate.\")\n}\n\n/**\n * Returns the first element, or `null` if the collection is empty.\n */\npublic fun <T> Iterable<T>.firstOrNull(): T? {\n    when (this) {\n        is List -> {\n            if (isEmpty())\n                return null\n            else\n                return this[0]\n        }\n        else -> {\n            val iterator = iterator()\n            if (!iterator.hasNext())\n                return null\n            return iterator.next()\n        }\n    }\n}\n\n/**\n * Returns the first element, or `null` if the list is empty.\n */\npublic fun <T> List<T>.firstOrNull(): T? {\n    return if (isEmpty()) null else this[0]\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if element was not found.\n */\npublic inline fun <T> Iterable<T>.firstOrNull(predicate: (T) -> Boolean): T? {\n    for (element in this) if (predicate(element)) return element\n    return null\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this list.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> List<T>.getOrElse(index: Int, defaultValue: (Int) -> T): T {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this list.\n */\npublic fun <T> List<T>.getOrNull(index: Int): T? {\n    return if (index >= 0 && index <= lastIndex) get(index) else null\n}\n\n/**\n * Returns first index of [element], or -1 if the collection does not contain element.\n */\npublic fun <@kotlin.internal.OnlyInputTypes T> Iterable<T>.indexOf(element: T): Int {\n    if (this is List) return this.indexOf(element)\n    var index = 0\n    for (item in this) {\n        if (element == item)\n            return index\n        index++\n    }\n    return -1\n}\n\n/**\n * Returns first index of [element], or -1 if the list does not contain element.\n */\n@Suppress(\"EXTENSION_SHADOWED_BY_MEMBER\") // false warning, extension takes precedence in some cases\npublic fun <@kotlin.internal.OnlyInputTypes T> List<T>.indexOf(element: T): Int {\n    return indexOf(element)\n}\n\n/**\n * Returns index of the first element matching the given [predicate], or -1 if the collection does not contain such element.\n */\npublic inline fun <T> Iterable<T>.indexOfFirst(predicate: (T) -> Boolean): Int {\n    var index = 0\n    for (item in this) {\n        if (predicate(item))\n            return index\n        index++\n    }\n    return -1\n}\n\n/**\n * Returns index of the first element matching the given [predicate], or -1 if the list does not contain such element.\n */\npublic inline fun <T> List<T>.indexOfFirst(predicate: (T) -> Boolean): Int {\n    var index = 0\n    for (item in this) {\n        if (predicate(item))\n            return index\n        index++\n    }\n    return -1\n}\n\n/**\n * Returns index of the last element matching the given [predicate], or -1 if the collection does not contain such element.\n */\npublic inline fun <T> Iterable<T>.indexOfLast(predicate: (T) -> Boolean): Int {\n    var lastIndex = -1\n    var index = 0\n    for (item in this) {\n        if (predicate(item))\n            lastIndex = index\n        index++\n    }\n    return lastIndex\n}\n\n/**\n * Returns index of the last element matching the given [predicate], or -1 if the list does not contain such element.\n */\npublic inline fun <T> List<T>.indexOfLast(predicate: (T) -> Boolean): Int {\n    val iterator = this.listIterator(size)\n    while (iterator.hasPrevious()) {\n        if (predicate(iterator.previous())) {\n            return iterator.nextIndex()\n        }\n    }\n    return -1\n}\n\n/**\n * Returns the last element.\n * @throws [NoSuchElementException] if the collection is empty.\n */\npublic fun <T> Iterable<T>.last(): T {\n    when (this) {\n        is List -> return this.last()\n        else -> {\n            val iterator = iterator()\n            if (!iterator.hasNext())\n                throw NoSuchElementException(\"Collection is empty.\")\n            var last = iterator.next()\n            while (iterator.hasNext())\n                last = iterator.next()\n            return last\n        }\n    }\n}\n\n/**\n * Returns the last element.\n * @throws [NoSuchElementException] if the list is empty.\n */\npublic fun <T> List<T>.last(): T {\n    if (isEmpty())\n        throw NoSuchElementException(\"List is empty.\")\n    return this[lastIndex]\n}\n\n/**\n * Returns the last element matching the given [predicate].\n * @throws [NoSuchElementException] if no such element is found.\n */\npublic inline fun <T> Iterable<T>.last(predicate: (T) -> Boolean): T {\n    var last: T? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            last = element\n            found = true\n        }\n    }\n    if (!found) throw NoSuchElementException(\"Collection contains no element matching the predicate.\")\n    @Suppress(\"UNCHECKED_CAST\")\n    return last as T\n}\n\n/**\n * Returns the last element matching the given [predicate].\n * @throws [NoSuchElementException] if no such element is found.\n */\npublic inline fun <T> List<T>.last(predicate: (T) -> Boolean): T {\n    val iterator = this.listIterator(size)\n    while (iterator.hasPrevious()) {\n        val element = iterator.previous()\n        if (predicate(element)) return element\n    }\n    throw NoSuchElementException(\"List contains no element matching the predicate.\")\n}\n\n/**\n * Returns last index of [element], or -1 if the collection does not contain element.\n */\npublic fun <@kotlin.internal.OnlyInputTypes T> Iterable<T>.lastIndexOf(element: T): Int {\n    if (this is List) return this.lastIndexOf(element)\n    var lastIndex = -1\n    var index = 0\n    for (item in this) {\n        if (element == item)\n            lastIndex = index\n        index++\n    }\n    return lastIndex\n}\n\n/**\n * Returns last index of [element], or -1 if the list does not contain element.\n */\n@Suppress(\"EXTENSION_SHADOWED_BY_MEMBER\") // false warning, extension takes precedence in some cases\npublic fun <@kotlin.internal.OnlyInputTypes T> List<T>.lastIndexOf(element: T): Int {\n    return lastIndexOf(element)\n}\n\n/**\n * Returns the last element, or `null` if the collection is empty.\n */\npublic fun <T> Iterable<T>.lastOrNull(): T? {\n    when (this) {\n        is List -> return if (isEmpty()) null else this[size - 1]\n        else -> {\n            val iterator = iterator()\n            if (!iterator.hasNext())\n                return null\n            var last = iterator.next()\n            while (iterator.hasNext())\n                last = iterator.next()\n            return last\n        }\n    }\n}\n\n/**\n * Returns the last element, or `null` if the list is empty.\n */\npublic fun <T> List<T>.lastOrNull(): T? {\n    return if (isEmpty()) null else this[size - 1]\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n */\npublic inline fun <T> Iterable<T>.lastOrNull(predicate: (T) -> Boolean): T? {\n    var last: T? = null\n    for (element in this) {\n        if (predicate(element)) {\n            last = element\n        }\n    }\n    return last\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n */\npublic inline fun <T> List<T>.lastOrNull(predicate: (T) -> Boolean): T? {\n    val iterator = this.listIterator(size)\n    while (iterator.hasPrevious()) {\n        val element = iterator.previous()\n        if (predicate(element)) return element\n    }\n    return null\n}\n\n/**\n * Returns the single element, or throws an exception if the collection is empty or has more than one element.\n */\npublic fun <T> Iterable<T>.single(): T {\n    when (this) {\n        is List -> return this.single()\n        else -> {\n            val iterator = iterator()\n            if (!iterator.hasNext())\n                throw NoSuchElementException(\"Collection is empty.\")\n            val single = iterator.next()\n            if (iterator.hasNext())\n                throw IllegalArgumentException(\"Collection has more than one element.\")\n            return single\n        }\n    }\n}\n\n/**\n * Returns the single element, or throws an exception if the list is empty or has more than one element.\n */\npublic fun <T> List<T>.single(): T {\n    return when (size) {\n        0 -> throw NoSuchElementException(\"List is empty.\")\n        1 -> this[0]\n        else -> throw IllegalArgumentException(\"List has more than one element.\")\n    }\n}\n\n/**\n * Returns the single element matching the given [predicate], or throws exception if there is no or more than one matching element.\n */\npublic inline fun <T> Iterable<T>.single(predicate: (T) -> Boolean): T {\n    var single: T? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) throw IllegalArgumentException(\"Collection contains more than one matching element.\")\n            single = element\n            found = true\n        }\n    }\n    if (!found) throw NoSuchElementException(\"Collection contains no element matching the predicate.\")\n    @Suppress(\"UNCHECKED_CAST\")\n    return single as T\n}\n\n/**\n * Returns single element, or `null` if the collection is empty or has more than one element.\n */\npublic fun <T> Iterable<T>.singleOrNull(): T? {\n    when (this) {\n        is List -> return if (size == 1) this[0] else null\n        else -> {\n            val iterator = iterator()\n            if (!iterator.hasNext())\n                return null\n            val single = iterator.next()\n            if (iterator.hasNext())\n                return null\n            return single\n        }\n    }\n}\n\n/**\n * Returns single element, or `null` if the list is empty or has more than one element.\n */\npublic fun <T> List<T>.singleOrNull(): T? {\n    return if (size == 1) this[0] else null\n}\n\n/**\n * Returns the single element matching the given [predicate], or `null` if element was not found or more than one element was found.\n */\npublic inline fun <T> Iterable<T>.singleOrNull(predicate: (T) -> Boolean): T? {\n    var single: T? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) return null\n            single = element\n            found = true\n        }\n    }\n    if (!found) return null\n    return single\n}\n\n/**\n * Returns a list containing all elements except first [n] elements.\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic fun <T> Iterable<T>.drop(n: Int): List<T> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return toList()\n    val list: ArrayList<T>\n    if (this is Collection<*>) {\n        val resultSize = size - n\n        if (resultSize <= 0)\n            return emptyList()\n        if (resultSize == 1)\n            return listOf(last())\n        list = ArrayList<T>(resultSize)\n        if (this is List<T>) {\n            if (this is RandomAccess) {\n                for (index in n until size)\n                    list.add(this[index])\n            } else {\n                for (item in listIterator(n))\n                    list.add(item)\n            }\n            return list\n        }\n    }\n    else {\n        list = ArrayList<T>()\n    }\n    var count = 0\n    for (item in this) {\n        if (count++ >= n) list.add(item)\n    }\n    return list.optimizeReadOnlyList()\n}\n\n/**\n * Returns a list containing all elements except last [n] elements.\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic fun <T> List<T>.dropLast(n: Int): List<T> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    return take((size - n).coerceAtLeast(0))\n}\n\n/**\n * Returns a list containing all elements except last elements that satisfy the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic inline fun <T> List<T>.dropLastWhile(predicate: (T) -> Boolean): List<T> {\n    if (!isEmpty()) {\n        val iterator = listIterator(size)\n        while (iterator.hasPrevious()) {\n            if (!predicate(iterator.previous())) {\n                return take(iterator.nextIndex() + 1)\n            }\n        }\n    }\n    return emptyList()\n}\n\n/**\n * Returns a list containing all elements except first elements that satisfy the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic inline fun <T> Iterable<T>.dropWhile(predicate: (T) -> Boolean): List<T> {\n    var yielding = false\n    val list = ArrayList<T>()\n    for (item in this)\n        if (yielding)\n            list.add(item)\n        else if (!predicate(item)) {\n            list.add(item)\n            yielding = true\n        }\n    return list\n}\n\n/**\n * Returns a list containing only elements matching the given [predicate].\n */\npublic inline fun <T> Iterable<T>.filter(predicate: (T) -> Boolean): List<T> {\n    return filterTo(ArrayList<T>(), predicate)\n}\n\n/**\n * Returns a list containing only elements matching the given [predicate].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n */\npublic inline fun <T> Iterable<T>.filterIndexed(predicate: (index: Int, T) -> Boolean): List<T> {\n    return filterIndexedTo(ArrayList<T>(), predicate)\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n */\npublic inline fun <T, C : MutableCollection<in T>> Iterable<T>.filterIndexedTo(destination: C, predicate: (index: Int, T) -> Boolean): C {\n    forEachIndexed { index, element ->\n        if (predicate(index, element)) destination.add(element)\n    }\n    return destination\n}\n\n/**\n * Returns a list containing all elements that are instances of specified type parameter R.\n */\npublic inline fun <reified R> Iterable<*>.filterIsInstance(): List<@kotlin.internal.NoInfer R> {\n    return filterIsInstanceTo(ArrayList<R>())\n}\n\n/**\n * Appends all elements that are instances of specified type parameter R to the given [destination].\n */\npublic inline fun <reified R, C : MutableCollection<in R>> Iterable<*>.filterIsInstanceTo(destination: C): C {\n    for (element in this) if (element is R) destination.add(element)\n    return destination\n}\n\n/**\n * Returns a list containing all elements not matching the given [predicate].\n */\npublic inline fun <T> Iterable<T>.filterNot(predicate: (T) -> Boolean): List<T> {\n    return filterNotTo(ArrayList<T>(), predicate)\n}\n\n/**\n * Returns a list containing all elements that are not `null`.\n */\npublic fun <T : Any> Iterable<T?>.filterNotNull(): List<T> {\n    return filterNotNullTo(ArrayList<T>())\n}\n\n/**\n * Appends all elements that are not `null` to the given [destination].\n */\npublic fun <C : MutableCollection<in T>, T : Any> Iterable<T?>.filterNotNullTo(destination: C): C {\n    for (element in this) if (element != null) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements not matching the given [predicate] to the given [destination].\n */\npublic inline fun <T, C : MutableCollection<in T>> Iterable<T>.filterNotTo(destination: C, predicate: (T) -> Boolean): C {\n    for (element in this) if (!predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n */\npublic inline fun <T, C : MutableCollection<in T>> Iterable<T>.filterTo(destination: C, predicate: (T) -> Boolean): C {\n    for (element in this) if (predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Returns a list containing elements at indices in the specified [indices] range.\n */\npublic fun <T> List<T>.slice(indices: IntRange): List<T> {\n    if (indices.isEmpty()) return listOf()\n    return this.subList(indices.start, indices.endInclusive + 1).toList()\n}\n\n/**\n * Returns a list containing elements at specified [indices].\n */\npublic fun <T> List<T>.slice(indices: Iterable<Int>): List<T> {\n    val size = indices.collectionSizeOrDefault(10)\n    if (size == 0) return emptyList()\n    val list = ArrayList<T>(size)\n    for (index in indices) {\n        list.add(get(index))\n    }\n    return list\n}\n\n/**\n * Returns a list containing first [n] elements.\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic fun <T> Iterable<T>.take(n: Int): List<T> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return emptyList()\n    if (this is Collection<T>) {\n        if (n >= size) return toList()\n        if (n == 1) return listOf(first())\n    }\n    var count = 0\n    val list = ArrayList<T>(n)\n    for (item in this) {\n        if (count++ == n)\n            break\n        list.add(item)\n    }\n    return list.optimizeReadOnlyList()\n}\n\n/**\n * Returns a list containing last [n] elements.\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic fun <T> List<T>.takeLast(n: Int): List<T> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return emptyList()\n    val size = size\n    if (n >= size) return toList()\n    if (n == 1) return listOf(last())\n    val list = ArrayList<T>(n)\n    if (this is RandomAccess) {\n        for (index in size - n until size)\n            list.add(this[index])\n    } else {\n        for (item in listIterator(size - n))\n            list.add(item)\n    }\n    return list\n}\n\n/**\n * Returns a list containing last elements satisfying the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic inline fun <T> List<T>.takeLastWhile(predicate: (T) -> Boolean): List<T> {\n    if (isEmpty())\n        return emptyList()\n    val iterator = listIterator(size)\n    while (iterator.hasPrevious()) {\n        if (!predicate(iterator.previous())) {\n            iterator.next()\n            val expectedSize = size - iterator.nextIndex()\n            if (expectedSize == 0) return emptyList()\n            return ArrayList<T>(expectedSize).apply {\n                while (iterator.hasNext())\n                    add(iterator.next())\n            }\n        }\n    }\n    return toList()\n}\n\n/**\n * Returns a list containing first elements satisfying the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic inline fun <T> Iterable<T>.takeWhile(predicate: (T) -> Boolean): List<T> {\n    val list = ArrayList<T>()\n    for (item in this) {\n        if (!predicate(item))\n            break\n        list.add(item)\n    }\n    return list\n}\n\n/**\n * Reverses elements in the list in-place.\n */\npublic fun <T> MutableList<T>.reverse(): Unit {\n    val midPoint = (size / 2) - 1\n    if (midPoint < 0) return\n    var reverseIndex = lastIndex\n    for (index in 0..midPoint) {\n        val tmp = this[index]\n        this[index] = this[reverseIndex]\n        this[reverseIndex] = tmp\n        reverseIndex--\n    }\n}\n\n/**\n * Returns a list with elements in reversed order.\n */\npublic fun <T> Iterable<T>.reversed(): List<T> {\n    if (this is Collection && size <= 1) return toList()\n    val list = toMutableList()\n    list.reverse()\n    return list\n}\n\n/**\n * Sorts elements in the list in-place according to natural sort order of the value returned by specified [selector] function.\n */\npublic inline fun <T, R : Comparable<R>> MutableList<T>.sortBy(crossinline selector: (T) -> R?): Unit {\n    if (size > 1) sortWith(compareBy(selector))\n}\n\n/**\n * Sorts elements in the list in-place descending according to natural sort order of the value returned by specified [selector] function.\n */\npublic inline fun <T, R : Comparable<R>> MutableList<T>.sortByDescending(crossinline selector: (T) -> R?): Unit {\n    if (size > 1) sortWith(compareByDescending(selector))\n}\n\n/**\n * Sorts elements in the list in-place descending according to their natural sort order.\n */\npublic fun <T : Comparable<T>> MutableList<T>.sortDescending(): Unit {\n    sortWith(reverseOrder())\n}\n\n/**\n * Returns a list of all elements sorted according to their natural sort order.\n */\npublic fun <T : Comparable<T>> Iterable<T>.sorted(): List<T> {\n    if (this is Collection) {\n        if (size <= 1) return this.toList()\n        @Suppress(\"UNCHECKED_CAST\")\n        return (toTypedArray<Comparable<T>>() as Array<T>).apply { sort() }.asList()\n    }\n    return toMutableList().apply { sort() }\n}\n\n/**\n * Returns a list of all elements sorted according to natural sort order of the value returned by specified [selector] function.\n */\npublic inline fun <T, R : Comparable<R>> Iterable<T>.sortedBy(crossinline selector: (T) -> R?): List<T> {\n    return sortedWith(compareBy(selector))\n}\n\n/**\n * Returns a list of all elements sorted descending according to natural sort order of the value returned by specified [selector] function.\n */\npublic inline fun <T, R : Comparable<R>> Iterable<T>.sortedByDescending(crossinline selector: (T) -> R?): List<T> {\n    return sortedWith(compareByDescending(selector))\n}\n\n/**\n * Returns a list of all elements sorted descending according to their natural sort order.\n */\npublic fun <T : Comparable<T>> Iterable<T>.sortedDescending(): List<T> {\n    return sortedWith(reverseOrder())\n}\n\n/**\n * Returns a list of all elements sorted according to the specified [comparator].\n */\npublic fun <T> Iterable<T>.sortedWith(comparator: Comparator<in T>): List<T> {\n    if (this is Collection) {\n       if (size <= 1) return this.toList()\n       @Suppress(\"UNCHECKED_CAST\")\n       return (toTypedArray<Any?>() as Array<T>).apply { sortWith(comparator) }.asList()\n    }\n    return toMutableList().apply { sortWith(comparator) }\n}\n\n/**\n * Returns an array of Boolean containing all of the elements of this collection.\n */\npublic fun Collection<Boolean>.toBooleanArray(): BooleanArray {\n    val result = BooleanArray(size)\n    var index = 0\n    for (element in this)\n        result[index++] = element\n    return result\n}\n\n/**\n * Returns an array of Byte containing all of the elements of this collection.\n */\npublic fun Collection<Byte>.toByteArray(): ByteArray {\n    val result = ByteArray(size)\n    var index = 0\n    for (element in this)\n        result[index++] = element\n    return result\n}\n\n/**\n * Returns an array of Char containing all of the elements of this collection.\n */\npublic fun Collection<Char>.toCharArray(): CharArray {\n    val result = CharArray(size)\n    var index = 0\n    for (element in this)\n        result[index++] = element\n    return result\n}\n\n/**\n * Returns an array of Double containing all of the elements of this collection.\n */\npublic fun Collection<Double>.toDoubleArray(): DoubleArray {\n    val result = DoubleArray(size)\n    var index = 0\n    for (element in this)\n        result[index++] = element\n    return result\n}\n\n/**\n * Returns an array of Float containing all of the elements of this collection.\n */\npublic fun Collection<Float>.toFloatArray(): FloatArray {\n    val result = FloatArray(size)\n    var index = 0\n    for (element in this)\n        result[index++] = element\n    return result\n}\n\n/**\n * Returns an array of Int containing all of the elements of this collection.\n */\npublic fun Collection<Int>.toIntArray(): IntArray {\n    val result = IntArray(size)\n    var index = 0\n    for (element in this)\n        result[index++] = element\n    return result\n}\n\n/**\n * Returns an array of Long containing all of the elements of this collection.\n */\npublic fun Collection<Long>.toLongArray(): LongArray {\n    val result = LongArray(size)\n    var index = 0\n    for (element in this)\n        result[index++] = element\n    return result\n}\n\n/**\n * Returns an array of Short containing all of the elements of this collection.\n */\npublic fun Collection<Short>.toShortArray(): ShortArray {\n    val result = ShortArray(size)\n    var index = 0\n    for (element in this)\n        result[index++] = element\n    return result\n}\n\n/**\n * Returns a [Map] containing key-value pairs provided by [transform] function\n * applied to elements of the given collection.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original collection.\n */\npublic inline fun <T, K, V> Iterable<T>.associate(transform: (T) -> Pair<K, V>): Map<K, V> {\n    val capacity = mapCapacity(collectionSizeOrDefault(10)).coerceAtLeast(16)\n    return associateTo(LinkedHashMap<K, V>(capacity), transform)\n}\n\n/**\n * Returns a [Map] containing the elements from the given collection indexed by the key\n * returned from [keySelector] function applied to each element.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original collection.\n */\npublic inline fun <T, K> Iterable<T>.associateBy(keySelector: (T) -> K): Map<K, T> {\n    val capacity = mapCapacity(collectionSizeOrDefault(10)).coerceAtLeast(16)\n    return associateByTo(LinkedHashMap<K, T>(capacity), keySelector)\n}\n\n/**\n * Returns a [Map] containing the values provided by [valueTransform] and indexed by [keySelector] functions applied to elements of the given collection.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original collection.\n */\npublic inline fun <T, K, V> Iterable<T>.associateBy(keySelector: (T) -> K, valueTransform: (T) -> V): Map<K, V> {\n    val capacity = mapCapacity(collectionSizeOrDefault(10)).coerceAtLeast(16)\n    return associateByTo(LinkedHashMap<K, V>(capacity), keySelector, valueTransform)\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function applied to each element of the given collection\n * and value is the element itself.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n */\npublic inline fun <T, K, M : MutableMap<in K, in T>> Iterable<T>.associateByTo(destination: M, keySelector: (T) -> K): M {\n    for (element in this) {\n        destination.put(keySelector(element), element)\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function and\n * and value is provided by the [valueTransform] function applied to elements of the given collection.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n */\npublic inline fun <T, K, V, M : MutableMap<in K, in V>> Iterable<T>.associateByTo(destination: M, keySelector: (T) -> K, valueTransform: (T) -> V): M {\n    for (element in this) {\n        destination.put(keySelector(element), valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs\n * provided by [transform] function applied to each element of the given collection.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n */\npublic inline fun <T, K, V, M : MutableMap<in K, in V>> Iterable<T>.associateTo(destination: M, transform: (T) -> Pair<K, V>): M {\n    for (element in this) {\n        destination += transform(element)\n    }\n    return destination\n}\n\n/**\n * Appends all elements to the given [destination] collection.\n */\npublic fun <T, C : MutableCollection<in T>> Iterable<T>.toCollection(destination: C): C {\n    for (item in this) {\n        destination.add(item)\n    }\n    return destination\n}\n\n/**\n * Returns a [HashSet] of all elements.\n */\npublic fun <T> Iterable<T>.toHashSet(): HashSet<T> {\n    return toCollection(HashSet<T>(mapCapacity(collectionSizeOrDefault(12))))\n}\n\n/**\n * Returns a [List] containing all elements.\n */\npublic fun <T> Iterable<T>.toList(): List<T> {\n    if (this is Collection) {\n        return when (size) {\n            0 -> emptyList()\n            1 -> listOf(if (this is List) get(0) else iterator().next())\n            else -> this.toMutableList()\n        }\n    }\n    return this.toMutableList().optimizeReadOnlyList()\n}\n\n/**\n * Returns a [MutableList] filled with all elements of this collection.\n */\npublic fun <T> Iterable<T>.toMutableList(): MutableList<T> {\n    if (this is Collection<T>)\n        return this.toMutableList()\n    return toCollection(ArrayList<T>())\n}\n\n/**\n * Returns a [MutableList] filled with all elements of this collection.\n */\npublic fun <T> Collection<T>.toMutableList(): MutableList<T> {\n    return ArrayList(this)\n}\n\n/**\n * Returns a [Set] of all elements.\n * \n * The returned set preserves the element iteration order of the original collection.\n */\npublic fun <T> Iterable<T>.toSet(): Set<T> {\n    if (this is Collection) {\n        return when (size) {\n            0 -> emptySet()\n            1 -> setOf(if (this is List) this[0] else iterator().next())\n            else -> toCollection(LinkedHashSet<T>(mapCapacity(size)))\n        }\n    }\n    return toCollection(LinkedHashSet<T>()).optimizeReadOnlySet()\n}\n\n/**\n * Returns a single list of all elements yielded from results of [transform] function being invoked on each element of original collection.\n */\npublic inline fun <T, R> Iterable<T>.flatMap(transform: (T) -> Iterable<R>): List<R> {\n    return flatMapTo(ArrayList<R>(), transform)\n}\n\n/**\n * Appends all elements yielded from results of [transform] function being invoked on each element of original collection, to the given [destination].\n */\npublic inline fun <T, R, C : MutableCollection<in R>> Iterable<T>.flatMapTo(destination: C, transform: (T) -> Iterable<R>): C {\n    for (element in this) {\n        val list = transform(element)\n        destination.addAll(list)\n    }\n    return destination\n}\n\n/**\n * Groups elements of the original collection by the key returned by the given [keySelector] function\n * applied to each element and returns a map where each group key is associated with a list of corresponding elements.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original collection.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\npublic inline fun <T, K> Iterable<T>.groupBy(keySelector: (T) -> K): Map<K, List<T>> {\n    return groupByTo(LinkedHashMap<K, MutableList<T>>(), keySelector)\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original collection\n * by the key returned by the given [keySelector] function applied to the element\n * and returns a map where each group key is associated with a list of corresponding values.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original collection.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\npublic inline fun <T, K, V> Iterable<T>.groupBy(keySelector: (T) -> K, valueTransform: (T) -> V): Map<K, List<V>> {\n    return groupByTo(LinkedHashMap<K, MutableList<V>>(), keySelector, valueTransform)\n}\n\n/**\n * Groups elements of the original collection by the key returned by the given [keySelector] function\n * applied to each element and puts to the [destination] map each group key associated with a list of corresponding elements.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\npublic inline fun <T, K, M : MutableMap<in K, MutableList<T>>> Iterable<T>.groupByTo(destination: M, keySelector: (T) -> K): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<T>() }\n        list.add(element)\n    }\n    return destination\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original collection\n * by the key returned by the given [keySelector] function applied to the element\n * and puts to the [destination] map each group key associated with a list of corresponding values.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\npublic inline fun <T, K, V, M : MutableMap<in K, MutableList<V>>> Iterable<T>.groupByTo(destination: M, keySelector: (T) -> K, valueTransform: (T) -> V): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<V>() }\n        list.add(valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Creates a [Grouping] source from a collection to be used later with one of group-and-fold operations\n * using the specified [keySelector] function to extract a key from each element.\n * \n * @sample samples.collections.Collections.Transformations.groupingByEachCount\n */\n@SinceKotlin(\"1.1\")\npublic inline fun <T, K> Iterable<T>.groupingBy(crossinline keySelector: (T) -> K): Grouping<T, K> {\n    return object : Grouping<T, K> {\n        override fun sourceIterator(): Iterator<T> = this@groupingBy.iterator()\n        override fun keyOf(element: T): K = keySelector(element)\n    }\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each element in the original collection.\n */\npublic inline fun <T, R> Iterable<T>.map(transform: (T) -> R): List<R> {\n    return mapTo(ArrayList<R>(collectionSizeOrDefault(10)), transform)\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each element and its index in the original collection.\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <T, R> Iterable<T>.mapIndexed(transform: (index: Int, T) -> R): List<R> {\n    return mapIndexedTo(ArrayList<R>(collectionSizeOrDefault(10)), transform)\n}\n\n/**\n * Returns a list containing only the non-null results of applying the given [transform] function\n * to each element and its index in the original collection.\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <T, R : Any> Iterable<T>.mapIndexedNotNull(transform: (index: Int, T) -> R?): List<R> {\n    return mapIndexedNotNullTo(ArrayList<R>(), transform)\n}\n\n/**\n * Applies the given [transform] function to each element and its index in the original collection\n * and appends only the non-null results to the given [destination].\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <T, R : Any, C : MutableCollection<in R>> Iterable<T>.mapIndexedNotNullTo(destination: C, transform: (index: Int, T) -> R?): C {\n    forEachIndexed { index, element -> transform(index, element)?.let { destination.add(it) } }\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element and its index in the original collection\n * and appends the results to the given [destination].\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <T, R, C : MutableCollection<in R>> Iterable<T>.mapIndexedTo(destination: C, transform: (index: Int, T) -> R): C {\n    var index = 0\n    for (item in this)\n        destination.add(transform(index++, item))\n    return destination\n}\n\n/**\n * Returns a list containing only the non-null results of applying the given [transform] function\n * to each element in the original collection.\n */\npublic inline fun <T, R : Any> Iterable<T>.mapNotNull(transform: (T) -> R?): List<R> {\n    return mapNotNullTo(ArrayList<R>(), transform)\n}\n\n/**\n * Applies the given [transform] function to each element in the original collection\n * and appends only the non-null results to the given [destination].\n */\npublic inline fun <T, R : Any, C : MutableCollection<in R>> Iterable<T>.mapNotNullTo(destination: C, transform: (T) -> R?): C {\n    forEach { element -> transform(element)?.let { destination.add(it) } }\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element of the original collection\n * and appends the results to the given [destination].\n */\npublic inline fun <T, R, C : MutableCollection<in R>> Iterable<T>.mapTo(destination: C, transform: (T) -> R): C {\n    for (item in this)\n        destination.add(transform(item))\n    return destination\n}\n\n/**\n * Returns a lazy [Iterable] of [IndexedValue] for each element of the original collection.\n */\npublic fun <T> Iterable<T>.withIndex(): Iterable<IndexedValue<T>> {\n    return IndexingIterable { iterator() }\n}\n\n/**\n * Returns a list containing only distinct elements from the given collection.\n * \n * The elements in the resulting list are in the same order as they were in the source collection.\n */\npublic fun <T> Iterable<T>.distinct(): List<T> {\n    return this.toMutableSet().toList()\n}\n\n/**\n * Returns a list containing only elements from the given collection\n * having distinct keys returned by the given [selector] function.\n * \n * The elements in the resulting list are in the same order as they were in the source collection.\n */\npublic inline fun <T, K> Iterable<T>.distinctBy(selector: (T) -> K): List<T> {\n    val set = HashSet<K>()\n    val list = ArrayList<T>()\n    for (e in this) {\n        val key = selector(e)\n        if (set.add(key))\n            list.add(e)\n    }\n    return list\n}\n\n/**\n * Returns a set containing all elements that are contained by both this set and the specified collection.\n * \n * The returned set preserves the element iteration order of the original collection.\n */\npublic infix fun <T> Iterable<T>.intersect(other: Iterable<T>): Set<T> {\n    val set = this.toMutableSet()\n    set.retainAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all elements that are contained by this collection and not contained by the specified collection.\n * \n * The returned set preserves the element iteration order of the original collection.\n */\npublic infix fun <T> Iterable<T>.subtract(other: Iterable<T>): Set<T> {\n    val set = this.toMutableSet()\n    set.removeAll(other)\n    return set\n}\n\n/**\n * Returns a mutable set containing all distinct elements from the given collection.\n * \n * The returned set preserves the element iteration order of the original collection.\n */\npublic fun <T> Iterable<T>.toMutableSet(): MutableSet<T> {\n    return when (this) {\n        is Collection<T> -> LinkedHashSet(this)\n        else -> toCollection(LinkedHashSet<T>())\n    }\n}\n\n/**\n * Returns a set containing all distinct elements from both collections.\n * \n * The returned set preserves the element iteration order of the original collection.\n * Those elements of the [other] collection that are unique are iterated in the end\n * in the order of the [other] collection.\n */\npublic infix fun <T> Iterable<T>.union(other: Iterable<T>): Set<T> {\n    val set = this.toMutableSet()\n    set.addAll(other)\n    return set\n}\n\n/**\n * Returns `true` if all elements match the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.all\n */\npublic inline fun <T> Iterable<T>.all(predicate: (T) -> Boolean): Boolean {\n    if (this is Collection && isEmpty()) return true\n    for (element in this) if (!predicate(element)) return false\n    return true\n}\n\n/**\n * Returns `true` if collection has at least one element.\n * \n * @sample samples.collections.Collections.Aggregates.any\n */\npublic fun <T> Iterable<T>.any(): Boolean {\n    if (this is Collection) return !isEmpty()\n    return iterator().hasNext()\n}\n\n/**\n * Returns `true` if at least one element matches the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.anyWithPredicate\n */\npublic inline fun <T> Iterable<T>.any(predicate: (T) -> Boolean): Boolean {\n    if (this is Collection && isEmpty()) return false\n    for (element in this) if (predicate(element)) return true\n    return false\n}\n\n/**\n * Returns the number of elements in this collection.\n */\npublic fun <T> Iterable<T>.count(): Int {\n    if (this is Collection) return size\n    var count = 0\n    for (element in this) count++\n    return count\n}\n\n/**\n * Returns the number of elements in this collection.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Collection<T>.count(): Int {\n    return size\n}\n\n/**\n * Returns the number of elements matching the given [predicate].\n */\npublic inline fun <T> Iterable<T>.count(predicate: (T) -> Boolean): Int {\n    if (this is Collection && isEmpty()) return 0\n    var count = 0\n    for (element in this) if (predicate(element)) count++\n    return count\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right to current accumulator value and each element.\n */\npublic inline fun <T, R> Iterable<T>.fold(initial: R, operation: (acc: R, T) -> R): R {\n    var accumulator = initial\n    for (element in this) accumulator = operation(accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original collection.\n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n */\npublic inline fun <T, R> Iterable<T>.foldIndexed(initial: R, operation: (index: Int, acc: R, T) -> R): R {\n    var index = 0\n    var accumulator = initial\n    for (element in this) accumulator = operation(index++, accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left to each element and current accumulator value.\n */\npublic inline fun <T, R> List<T>.foldRight(initial: R, operation: (T, acc: R) -> R): R {\n    var accumulator = initial\n    if (!isEmpty()) {\n        val iterator = listIterator(size)\n        while (iterator.hasPrevious()) {\n            accumulator = operation(iterator.previous(), accumulator)\n        }\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left\n * to each element with its index in the original list and current accumulator value.\n * @param [operation] function that takes the index of an element, the element itself\n * and current accumulator value, and calculates the next accumulator value.\n */\npublic inline fun <T, R> List<T>.foldRightIndexed(initial: R, operation: (index: Int, T, acc: R) -> R): R {\n    var accumulator = initial\n    if (!isEmpty()) {\n        val iterator = listIterator(size)\n        while (iterator.hasPrevious()) {\n            val index = iterator.previousIndex()\n            accumulator = operation(index, iterator.previous(), accumulator)\n        }\n    }\n    return accumulator\n}\n\n/**\n * Performs the given [action] on each element.\n */\n@kotlin.internal.HidesMembers\npublic inline fun <T> Iterable<T>.forEach(action: (T) -> Unit): Unit {\n    for (element in this) action(element)\n}\n\n/**\n * Performs the given [action] on each element, providing sequential index with the element.\n * @param [action] function that takes the index of an element and the element itself\n * and performs the desired action on the element.\n */\npublic inline fun <T> Iterable<T>.forEachIndexed(action: (index: Int, T) -> Unit): Unit {\n    var index = 0\n    for (item in this) action(index++, item)\n}\n\n/**\n * Returns the largest element or `null` if there are no elements.\n * \n * If any of elements is `NaN` returns `NaN`.\n */\n@SinceKotlin(\"1.1\")\npublic fun Iterable<Double>.max(): Double? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var max = iterator.next()\n    if (max.isNaN()) return max\n    while (iterator.hasNext()) {\n        val e = iterator.next()\n        if (e.isNaN()) return e\n        if (max < e) max = e\n    }\n    return max\n}\n\n/**\n * Returns the largest element or `null` if there are no elements.\n * \n * If any of elements is `NaN` returns `NaN`.\n */\n@SinceKotlin(\"1.1\")\npublic fun Iterable<Float>.max(): Float? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var max = iterator.next()\n    if (max.isNaN()) return max\n    while (iterator.hasNext()) {\n        val e = iterator.next()\n        if (e.isNaN()) return e\n        if (max < e) max = e\n    }\n    return max\n}\n\n/**\n * Returns the largest element or `null` if there are no elements.\n */\npublic fun <T : Comparable<T>> Iterable<T>.max(): T? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var max = iterator.next()\n    while (iterator.hasNext()) {\n        val e = iterator.next()\n        if (max < e) max = e\n    }\n    return max\n}\n\n/**\n * Returns the first element yielding the largest value of the given function or `null` if there are no elements.\n */\npublic inline fun <T, R : Comparable<R>> Iterable<T>.maxBy(selector: (T) -> R): T? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var maxElem = iterator.next()\n    var maxValue = selector(maxElem)\n    while (iterator.hasNext()) {\n        val e = iterator.next()\n        val v = selector(e)\n        if (maxValue < v) {\n            maxElem = e\n            maxValue = v\n        }\n    }\n    return maxElem\n}\n\n/**\n * Returns the first element having the largest value according to the provided [comparator] or `null` if there are no elements.\n */\npublic fun <T> Iterable<T>.maxWith(comparator: Comparator<in T>): T? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var max = iterator.next()\n    while (iterator.hasNext()) {\n        val e = iterator.next()\n        if (comparator.compare(max, e) < 0) max = e\n    }\n    return max\n}\n\n/**\n * Returns the smallest element or `null` if there are no elements.\n * \n * If any of elements is `NaN` returns `NaN`.\n */\n@SinceKotlin(\"1.1\")\npublic fun Iterable<Double>.min(): Double? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var min = iterator.next()\n    if (min.isNaN()) return min\n    while (iterator.hasNext()) {\n        val e = iterator.next()\n        if (e.isNaN()) return e\n        if (min > e) min = e\n    }\n    return min\n}\n\n/**\n * Returns the smallest element or `null` if there are no elements.\n * \n * If any of elements is `NaN` returns `NaN`.\n */\n@SinceKotlin(\"1.1\")\npublic fun Iterable<Float>.min(): Float? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var min = iterator.next()\n    if (min.isNaN()) return min\n    while (iterator.hasNext()) {\n        val e = iterator.next()\n        if (e.isNaN()) return e\n        if (min > e) min = e\n    }\n    return min\n}\n\n/**\n * Returns the smallest element or `null` if there are no elements.\n */\npublic fun <T : Comparable<T>> Iterable<T>.min(): T? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var min = iterator.next()\n    while (iterator.hasNext()) {\n        val e = iterator.next()\n        if (min > e) min = e\n    }\n    return min\n}\n\n/**\n * Returns the first element yielding the smallest value of the given function or `null` if there are no elements.\n */\npublic inline fun <T, R : Comparable<R>> Iterable<T>.minBy(selector: (T) -> R): T? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var minElem = iterator.next()\n    var minValue = selector(minElem)\n    while (iterator.hasNext()) {\n        val e = iterator.next()\n        val v = selector(e)\n        if (minValue > v) {\n            minElem = e\n            minValue = v\n        }\n    }\n    return minElem\n}\n\n/**\n * Returns the first element having the smallest value according to the provided [comparator] or `null` if there are no elements.\n */\npublic fun <T> Iterable<T>.minWith(comparator: Comparator<in T>): T? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var min = iterator.next()\n    while (iterator.hasNext()) {\n        val e = iterator.next()\n        if (comparator.compare(min, e) > 0) min = e\n    }\n    return min\n}\n\n/**\n * Returns `true` if the collection has no elements.\n * \n * @sample samples.collections.Collections.Aggregates.none\n */\npublic fun <T> Iterable<T>.none(): Boolean {\n    if (this is Collection) return isEmpty()\n    return !iterator().hasNext()\n}\n\n/**\n * Returns `true` if no elements match the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.noneWithPredicate\n */\npublic inline fun <T> Iterable<T>.none(predicate: (T) -> Boolean): Boolean {\n    if (this is Collection && isEmpty()) return true\n    for (element in this) if (predicate(element)) return false\n    return true\n}\n\n/**\n * Performs the given [action] on each element and returns the collection itself afterwards.\n */\n@SinceKotlin(\"1.1\")\npublic inline fun <T, C : Iterable<T>> C.onEach(action: (T) -> Unit): C {\n    return apply { for (element in this) action(element) }\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right to current accumulator value and each element.\n */\npublic inline fun <S, T: S> Iterable<T>.reduce(operation: (acc: S, T) -> S): S {\n    val iterator = this.iterator()\n    if (!iterator.hasNext()) throw UnsupportedOperationException(\"Empty collection can't be reduced.\")\n    var accumulator: S = iterator.next()\n    while (iterator.hasNext()) {\n        accumulator = operation(accumulator, iterator.next())\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original collection.\n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself and calculates the next accumulator value.\n */\npublic inline fun <S, T: S> Iterable<T>.reduceIndexed(operation: (index: Int, acc: S, T) -> S): S {\n    val iterator = this.iterator()\n    if (!iterator.hasNext()) throw UnsupportedOperationException(\"Empty collection can't be reduced.\")\n    var index = 1\n    var accumulator: S = iterator.next()\n    while (iterator.hasNext()) {\n        accumulator = operation(index++, accumulator, iterator.next())\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with last element and applying [operation] from right to left to each element and current accumulator value.\n */\npublic inline fun <S, T: S> List<T>.reduceRight(operation: (T, acc: S) -> S): S {\n    val iterator = listIterator(size)\n    if (!iterator.hasPrevious())\n        throw UnsupportedOperationException(\"Empty list can't be reduced.\")\n    var accumulator: S = iterator.previous()\n    while (iterator.hasPrevious()) {\n        accumulator = operation(iterator.previous(), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with last element and applying [operation] from right to left\n * to each element with its index in the original list and current accumulator value.\n * @param [operation] function that takes the index of an element, the element itself\n * and current accumulator value, and calculates the next accumulator value.\n */\npublic inline fun <S, T: S> List<T>.reduceRightIndexed(operation: (index: Int, T, acc: S) -> S): S {\n    val iterator = listIterator(size)\n    if (!iterator.hasPrevious())\n        throw UnsupportedOperationException(\"Empty list can't be reduced.\")\n    var accumulator: S = iterator.previous()\n    while (iterator.hasPrevious()) {\n        val index = iterator.previousIndex()\n        accumulator = operation(index, iterator.previous(), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the collection.\n */\npublic inline fun <T> Iterable<T>.sumBy(selector: (T) -> Int): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the collection.\n */\npublic inline fun <T> Iterable<T>.sumByDouble(selector: (T) -> Double): Double {\n    var sum: Double = 0.0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns an original collection containing all the non-`null` elements, throwing an [IllegalArgumentException] if there are any `null` elements.\n */\npublic fun <T : Any> Iterable<T?>.requireNoNulls(): Iterable<T> {\n    for (element in this) {\n        if (element == null) {\n            throw IllegalArgumentException(\"null element found in $this.\")\n        }\n    }\n    @Suppress(\"UNCHECKED_CAST\")\n    return this as Iterable<T>\n}\n\n/**\n * Returns an original collection containing all the non-`null` elements, throwing an [IllegalArgumentException] if there are any `null` elements.\n */\npublic fun <T : Any> List<T?>.requireNoNulls(): List<T> {\n    for (element in this) {\n        if (element == null) {\n            throw IllegalArgumentException(\"null element found in $this.\")\n        }\n    }\n    @Suppress(\"UNCHECKED_CAST\")\n    return this as List<T>\n}\n\n/**\n * Splits this collection into a list of lists each not exceeding the given [size].\n * \n * The last list in the resulting list may have less elements than the given [size].\n * \n * @param size the number of elements to take in each list, must be positive and can be greater than the number of elements in this collection.\n * \n * @sample samples.collections.Collections.Transformations.chunked\n */\n@SinceKotlin(\"1.2\")\npublic fun <T> Iterable<T>.chunked(size: Int): List<List<T>> {\n    return windowed(size, size, partialWindows = true)\n}\n\n/**\n * Splits this collection into several lists each not exceeding the given [size]\n * and applies the given [transform] function to an each.\n * \n * @return list of results of the [transform] applied to an each list.\n * \n * Note that the list passed to the [transform] function is ephemeral and is valid only inside that function.\n * You should not store it or allow it to escape in some way, unless you made a snapshot of it.\n * The last list may have less elements than the given [size].\n * \n * @param size the number of elements to take in each list, must be positive and can be greater than the number of elements in this collection.\n * \n * @sample samples.text.Strings.chunkedTransform\n */\n@SinceKotlin(\"1.2\")\npublic fun <T, R> Iterable<T>.chunked(size: Int, transform: (List<T>) -> R): List<R> {\n    return windowed(size, size, partialWindows = true, transform = transform)\n}\n\n/**\n * Returns a list containing all elements of the original collection without the first occurrence of the given [element].\n */\npublic operator fun <T> Iterable<T>.minus(element: T): List<T> {\n    val result = ArrayList<T>(collectionSizeOrDefault(10))\n    var removed = false\n    return this.filterTo(result) { if (!removed && it == element) { removed = true; false } else true }\n}\n\n/**\n * Returns a list containing all elements of the original collection except the elements contained in the given [elements] array.\n */\npublic operator fun <T> Iterable<T>.minus(elements: Array<out T>): List<T> {\n    if (elements.isEmpty()) return this.toList()\n    val other = elements.toHashSet()\n    return this.filterNot { it in other }\n}\n\n/**\n * Returns a list containing all elements of the original collection except the elements contained in the given [elements] collection.\n */\npublic operator fun <T> Iterable<T>.minus(elements: Iterable<T>): List<T> {\n    val other = elements.convertToSetForSetOperationWith(this)\n    if (other.isEmpty())\n        return this.toList()\n    return this.filterNot { it in other }\n}\n\n/**\n * Returns a list containing all elements of the original collection except the elements contained in the given [elements] sequence.\n */\npublic operator fun <T> Iterable<T>.minus(elements: Sequence<T>): List<T> {\n    val other = elements.toHashSet()\n    if (other.isEmpty())\n        return this.toList()\n    return this.filterNot { it in other }\n}\n\n/**\n * Returns a list containing all elements of the original collection without the first occurrence of the given [element].\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Iterable<T>.minusElement(element: T): List<T> {\n    return minus(element)\n}\n\n/**\n * Splits the original collection into pair of lists,\n * where *first* list contains elements for which [predicate] yielded `true`,\n * while *second* list contains elements for which [predicate] yielded `false`.\n */\npublic inline fun <T> Iterable<T>.partition(predicate: (T) -> Boolean): Pair<List<T>, List<T>> {\n    val first = ArrayList<T>()\n    val second = ArrayList<T>()\n    for (element in this) {\n        if (predicate(element)) {\n            first.add(element)\n        } else {\n            second.add(element)\n        }\n    }\n    return Pair(first, second)\n}\n\n/**\n * Returns a list containing all elements of the original collection and then the given [element].\n */\npublic operator fun <T> Iterable<T>.plus(element: T): List<T> {\n    if (this is Collection) return this.plus(element)\n    val result = ArrayList<T>()\n    result.addAll(this)\n    result.add(element)\n    return result\n}\n\n/**\n * Returns a list containing all elements of the original collection and then the given [element].\n */\npublic operator fun <T> Collection<T>.plus(element: T): List<T> {\n    val result = ArrayList<T>(size + 1)\n    result.addAll(this)\n    result.add(element)\n    return result\n}\n\n/**\n * Returns a list containing all elements of the original collection and then all elements of the given [elements] array.\n */\npublic operator fun <T> Iterable<T>.plus(elements: Array<out T>): List<T> {\n    if (this is Collection) return this.plus(elements)\n    val result = ArrayList<T>()\n    result.addAll(this)\n    result.addAll(elements)\n    return result\n}\n\n/**\n * Returns a list containing all elements of the original collection and then all elements of the given [elements] array.\n */\npublic operator fun <T> Collection<T>.plus(elements: Array<out T>): List<T> {\n    val result = ArrayList<T>(this.size + elements.size)\n    result.addAll(this)\n    result.addAll(elements)\n    return result\n}\n\n/**\n * Returns a list containing all elements of the original collection and then all elements of the given [elements] collection.\n */\npublic operator fun <T> Iterable<T>.plus(elements: Iterable<T>): List<T> {\n    if (this is Collection) return this.plus(elements)\n    val result = ArrayList<T>()\n    result.addAll(this)\n    result.addAll(elements)\n    return result\n}\n\n/**\n * Returns a list containing all elements of the original collection and then all elements of the given [elements] collection.\n */\npublic operator fun <T> Collection<T>.plus(elements: Iterable<T>): List<T> {\n    if (elements is Collection) {\n        val result = ArrayList<T>(this.size + elements.size)\n        result.addAll(this)\n        result.addAll(elements)\n        return result\n    } else {\n        val result = ArrayList<T>(this)\n        result.addAll(elements)\n        return result\n    }\n}\n\n/**\n * Returns a list containing all elements of the original collection and then all elements of the given [elements] sequence.\n */\npublic operator fun <T> Iterable<T>.plus(elements: Sequence<T>): List<T> {\n    val result = ArrayList<T>()\n    result.addAll(this)\n    result.addAll(elements)\n    return result\n}\n\n/**\n * Returns a list containing all elements of the original collection and then all elements of the given [elements] sequence.\n */\npublic operator fun <T> Collection<T>.plus(elements: Sequence<T>): List<T> {\n    val result = ArrayList<T>(this.size + 10)\n    result.addAll(this)\n    result.addAll(elements)\n    return result\n}\n\n/**\n * Returns a list containing all elements of the original collection and then the given [element].\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Iterable<T>.plusElement(element: T): List<T> {\n    return plus(element)\n}\n\n/**\n * Returns a list containing all elements of the original collection and then the given [element].\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Collection<T>.plusElement(element: T): List<T> {\n    return plus(element)\n}\n\n/**\n * Returns a list of snapshots of the window of the given [size]\n * sliding along this collection with the given [step], where each\n * snapshot is a list.\n * \n * Several last lists may have less elements than the given [size].\n * \n * Both [size] and [step] must be positive and can be greater than the number of elements in this collection.\n * @param size the number of elements to take in each window\n * @param step the number of elements to move the window forward by on an each step, by default 1\n * @param partialWindows controls whether or not to keep partial windows in the end if any,\n * by default `false` which means partial windows won't be preserved\n * \n * @sample samples.collections.Sequences.Transformations.takeWindows\n */\n@SinceKotlin(\"1.2\")\npublic fun <T> Iterable<T>.windowed(size: Int, step: Int = 1, partialWindows: Boolean = false): List<List<T>> {\n    checkWindowSizeStep(size, step)\n    if (this is RandomAccess && this is List) {\n        val thisSize = this.size\n        val result = ArrayList<List<T>>((thisSize + step - 1) / step)\n        var index = 0\n        while (index < thisSize) {\n            val windowSize = size.coerceAtMost(thisSize - index)\n            if (windowSize < size && !partialWindows) break\n            result.add(List(windowSize) { this[it + index] })\n            index += step\n        }\n        return result\n    }\n    val result = ArrayList<List<T>>()\n    windowedIterator(iterator(), size, step, partialWindows, reuseBuffer = false).forEach {\n        result.add(it)\n    }\n    return result\n}\n\n/**\n * Returns a list of results of applying the given [transform] function to\n * an each list representing a view over the window of the given [size]\n * sliding along this collection with the given [step].\n * \n * Note that the list passed to the [transform] function is ephemeral and is valid only inside that function.\n * You should not store it or allow it to escape in some way, unless you made a snapshot of it.\n * Several last lists may have less elements than the given [size].\n * \n * Both [size] and [step] must be positive and can be greater than the number of elements in this collection.\n * @param size the number of elements to take in each window\n * @param step the number of elements to move the window forward by on an each step, by default 1\n * @param partialWindows controls whether or not to keep partial windows in the end if any,\n * by default `false` which means partial windows won't be preserved\n * \n * @sample samples.collections.Sequences.Transformations.averageWindows\n */\n@SinceKotlin(\"1.2\")\npublic fun <T, R> Iterable<T>.windowed(size: Int, step: Int = 1, partialWindows: Boolean = false, transform: (List<T>) -> R): List<R> {\n    checkWindowSizeStep(size, step)\n    if (this is RandomAccess && this is List) {\n        val thisSize = this.size\n        val result = ArrayList<R>((thisSize + step - 1) / step)\n        val window = MovingSubList(this)\n        var index = 0\n        while (index < thisSize) {\n            window.move(index, (index + size).coerceAtMost(thisSize))\n            if (!partialWindows && window.size < size) break\n            result.add(transform(window))\n            index += step\n        }\n        return result\n    }\n    val result = ArrayList<R>()\n    windowedIterator(iterator(), size, step, partialWindows, reuseBuffer = true).forEach {\n        result.add(transform(it))\n    }\n    return result\n}\n\n/**\n * Returns a list of pairs built from elements of both collections with same indexes. List has length of shortest collection.\n */\npublic infix fun <T, R> Iterable<T>.zip(other: Array<out R>): List<Pair<T, R>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of values built from elements of both collections with same indexes using provided [transform]. List has length of shortest collection.\n */\npublic inline fun <T, R, V> Iterable<T>.zip(other: Array<out R>, transform: (a: T, b: R) -> V): List<V> {\n    val arraySize = other.size\n    val list = ArrayList<V>(minOf(collectionSizeOrDefault(10), arraySize))\n    var i = 0\n    for (element in this) {\n        if (i >= arraySize) break\n        list.add(transform(element, other[i++]))\n    }\n    return list\n}\n\n/**\n * Returns a list of pairs built from elements of both collections with same indexes. List has length of shortest collection.\n */\npublic infix fun <T, R> Iterable<T>.zip(other: Iterable<R>): List<Pair<T, R>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of values built from elements of both collections with same indexes using provided [transform]. List has length of shortest collection.\n */\npublic inline fun <T, R, V> Iterable<T>.zip(other: Iterable<R>, transform: (a: T, b: R) -> V): List<V> {\n    val first = iterator()\n    val second = other.iterator()\n    val list = ArrayList<V>(minOf(collectionSizeOrDefault(10), other.collectionSizeOrDefault(10)))\n    while (first.hasNext() && second.hasNext()) {\n        list.add(transform(first.next(), second.next()))\n    }\n    return list\n}\n\n/**\n * Returns a list of pairs of each two adjacent elements in this collection.\n * \n * The returned list is empty if this collection contains less than two elements.\n * \n * @sample samples.collections.Collections.Transformations.zipWithNext\n */\n@SinceKotlin(\"1.2\")\npublic fun <T> Iterable<T>.zipWithNext(): List<Pair<T, T>> {\n    return zipWithNext { a, b -> a to b }\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to an each pair of two adjacent elements in this collection.\n * \n * The returned list is empty if this collection contains less than two elements.\n * \n * @sample samples.collections.Collections.Transformations.zipWithNextToFindDeltas\n */\n@SinceKotlin(\"1.2\")\npublic inline fun <T, R> Iterable<T>.zipWithNext(transform: (a: T, b: T) -> R): List<R> {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return emptyList()\n    val result = mutableListOf<R>()\n    var current = iterator.next()\n    while (iterator.hasNext()) {\n        val next = iterator.next()\n        result.add(transform(current, next))\n        current = next\n    }\n    return result\n}\n\n/**\n * Appends the string from all the elements separated using [separator] and using the given [prefix] and [postfix] if supplied.\n * \n * If the collection could be huge, you can specify a non-negative value of [limit], in which case only the first [limit]\n * elements will be appended, followed by the [truncated] string (which defaults to \"...\").\n * \n * @sample samples.collections.Collections.Transformations.joinTo\n */\npublic fun <T, A : Appendable> Iterable<T>.joinTo(buffer: A, separator: CharSequence = \", \", prefix: CharSequence = \"\", postfix: CharSequence = \"\", limit: Int = -1, truncated: CharSequence = \"...\", transform: ((T) -> CharSequence)? = null): A {\n    buffer.append(prefix)\n    var count = 0\n    for (element in this) {\n        if (++count > 1) buffer.append(separator)\n        if (limit < 0 || count <= limit) {\n            buffer.appendElement(element, transform)\n        } else break\n    }\n    if (limit >= 0 && count > limit) buffer.append(truncated)\n    buffer.append(postfix)\n    return buffer\n}\n\n/**\n * Creates a string from all the elements separated using [separator] and using the given [prefix] and [postfix] if supplied.\n * \n * If the collection could be huge, you can specify a non-negative value of [limit], in which case only the first [limit]\n * elements will be appended, followed by the [truncated] string (which defaults to \"...\").\n * \n * @sample samples.collections.Collections.Transformations.joinToString\n */\npublic fun <T> Iterable<T>.joinToString(separator: CharSequence = \", \", prefix: CharSequence = \"\", postfix: CharSequence = \"\", limit: Int = -1, truncated: CharSequence = \"...\", transform: ((T) -> CharSequence)? = null): String {\n    return joinTo(StringBuilder(), separator, prefix, postfix, limit, truncated, transform).toString()\n}\n\n/**\n * Returns this collection as an [Iterable].\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Iterable<T>.asIterable(): Iterable<T> {\n    return this\n}\n\n/**\n * Creates a [Sequence] instance that wraps the original collection returning its elements when being iterated.\n * \n * @sample samples.collections.Sequences.Building.sequenceFromCollection\n */\npublic fun <T> Iterable<T>.asSequence(): Sequence<T> {\n    return Sequence { this.iterator() }\n}\n\n/**\n * Returns an average value of elements in the collection.\n */\n@kotlin.jvm.JvmName(\"averageOfByte\")\npublic fun Iterable<Byte>.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        count += 1\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns an average value of elements in the collection.\n */\n@kotlin.jvm.JvmName(\"averageOfShort\")\npublic fun Iterable<Short>.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        count += 1\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns an average value of elements in the collection.\n */\n@kotlin.jvm.JvmName(\"averageOfInt\")\npublic fun Iterable<Int>.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        count += 1\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns an average value of elements in the collection.\n */\n@kotlin.jvm.JvmName(\"averageOfLong\")\npublic fun Iterable<Long>.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        count += 1\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns an average value of elements in the collection.\n */\n@kotlin.jvm.JvmName(\"averageOfFloat\")\npublic fun Iterable<Float>.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        count += 1\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns an average value of elements in the collection.\n */\n@kotlin.jvm.JvmName(\"averageOfDouble\")\npublic fun Iterable<Double>.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        count += 1\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns the sum of all elements in the collection.\n */\n@kotlin.jvm.JvmName(\"sumOfByte\")\npublic fun Iterable<Byte>.sum(): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all elements in the collection.\n */\n@kotlin.jvm.JvmName(\"sumOfShort\")\npublic fun Iterable<Short>.sum(): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all elements in the collection.\n */\n@kotlin.jvm.JvmName(\"sumOfInt\")\npublic fun Iterable<Int>.sum(): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all elements in the collection.\n */\n@kotlin.jvm.JvmName(\"sumOfLong\")\npublic fun Iterable<Long>.sum(): Long {\n    var sum: Long = 0L\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all elements in the collection.\n */\n@kotlin.jvm.JvmName(\"sumOfFloat\")\npublic fun Iterable<Float>.sum(): Float {\n    var sum: Float = 0.0f\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all elements in the collection.\n */\n@kotlin.jvm.JvmName(\"sumOfDouble\")\npublic fun Iterable<Double>.sum(): Double {\n    var sum: Double = 0.0\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n","@file:kotlin.jvm.JvmMultifileClass\n@file:kotlin.jvm.JvmName(\"StandardKt\")\npackage kotlin\n\nimport kotlin.internal.contracts.*\n\n/**\n * An exception is thrown to indicate that a method body remains to be implemented.\n */\npublic class NotImplementedError(message: String = \"An operation is not implemented.\") : Error(message)\n\n/**\n * Always throws [NotImplementedError] stating that operation is not implemented.\n */\n\n@kotlin.internal.InlineOnly\npublic inline fun TODO(): Nothing = throw NotImplementedError()\n\n/**\n * Always throws [NotImplementedError] stating that operation is not implemented.\n *\n * @param reason a string explaining why the implementation is missing.\n */\n@kotlin.internal.InlineOnly\npublic inline fun TODO(reason: String): Nothing = throw NotImplementedError(\"An operation is not implemented: $reason\")\n\n\n\n/**\n * Calls the specified function [block] and returns its result.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <R> run(block: () -> R): R {\n    contract {\n        callsInPlace(block, InvocationKind.EXACTLY_ONCE)\n    }\n    return block()\n}\n\n/**\n * Calls the specified function [block] with `this` value as its receiver and returns its result.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T, R> T.run(block: T.() -> R): R {\n    contract {\n        callsInPlace(block, InvocationKind.EXACTLY_ONCE)\n    }\n    return block()\n}\n\n/**\n * Calls the specified function [block] with the given [receiver] as its receiver and returns its result.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T, R> with(receiver: T, block: T.() -> R): R {\n    contract {\n        callsInPlace(block, InvocationKind.EXACTLY_ONCE)\n    }\n    return receiver.block()\n}\n\n/**\n * Calls the specified function [block] with `this` value as its receiver and returns `this` value.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> T.apply(block: T.() -> Unit): T {\n    contract {\n        callsInPlace(block, InvocationKind.EXACTLY_ONCE)\n    }\n    block()\n    return this\n}\n\n/**\n * Calls the specified function [block] with `this` value as its argument and returns `this` value.\n */\n@kotlin.internal.InlineOnly\n@SinceKotlin(\"1.1\")\npublic inline fun <T> T.also(block: (T) -> Unit): T {\n    contract {\n        callsInPlace(block, InvocationKind.EXACTLY_ONCE)\n    }\n    block(this)\n    return this\n}\n\n/**\n * Calls the specified function [block] with `this` value as its argument and returns its result.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T, R> T.let(block: (T) -> R): R {\n    contract {\n        callsInPlace(block, InvocationKind.EXACTLY_ONCE)\n    }\n    return block(this)\n}\n\n/**\n * Returns `this` value if it satisfies the given [predicate] or `null`, if it doesn't.\n */\n@kotlin.internal.InlineOnly\n@SinceKotlin(\"1.1\")\npublic inline fun <T> T.takeIf(predicate: (T) -> Boolean): T? {\n    contract {\n        callsInPlace(predicate, InvocationKind.EXACTLY_ONCE)\n    }\n    return if (predicate(this)) this else null\n}\n\n/**\n * Returns `this` value if it _does not_ satisfy the given [predicate] or `null`, if it does.\n */\n@kotlin.internal.InlineOnly\n@SinceKotlin(\"1.1\")\npublic inline fun <T> T.takeUnless(predicate: (T) -> Boolean): T? {\n    contract {\n        callsInPlace(predicate, InvocationKind.EXACTLY_ONCE)\n    }\n    return if (!predicate(this)) this else null\n}\n\n/**\n * Executes the given function [action] specified number of [times].\n *\n * A zero-based index of current iteration is passed as a parameter to [action].\n */\n@kotlin.internal.InlineOnly\npublic inline fun repeat(times: Int, action: (Int) -> Unit) {\n    contract { callsInPlace(action) }\n\n    for (index in 0 until times) {\n        action(index)\n    }\n}\n","@file:kotlin.jvm.JvmName(\"LazyKt\")\n\npackage kotlin\n\nimport kotlin.reflect.KProperty\n\n/**\n * Represents a value with lazy initialization.\n *\n * To create an instance of [Lazy] use the [lazy] function.\n */\npublic interface Lazy<out T> {\n    /**\n     * Gets the lazily initialized value of the current Lazy instance.\n     * Once the value was initialized it must not change during the rest of lifetime of this Lazy instance.\n     */\n    public val value: T\n    /**\n     * Returns `true` if a value for this Lazy instance has been already initialized, and `false` otherwise.\n     * Once this function has returned `true` it stays `true` for the rest of lifetime of this Lazy instance.\n     */\n    public fun isInitialized(): Boolean\n}\n\n/**\n * Creates a new instance of the [Lazy] that is already initialized with the specified [value].\n */\npublic fun <T> lazyOf(value: T): Lazy<T> = InitializedLazyImpl(value)\n\n/* Not available on platform: JS */\n\n\n\n\n\n\n\n\n\n\n\n/* Not available on platform: JS */\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n/* Not available on platform: JS */\n\n\n\n\n\n\n\n\n\n\n\n\n\n/**\n * An extension to delegate a read-only property of type [T] to an instance of [Lazy].\n *\n * This extension allows to use instances of Lazy for property delegation:\n * `val property: String by lazy { initializer }`\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <T> Lazy<T>.getValue(thisRef: Any?, property: KProperty<*>): T = value\n\n/**\n * Specifies how a [Lazy] instance synchronizes initialization among multiple threads.\n */\npublic enum class LazyThreadSafetyMode {\n\n    /**\n     * Locks are used to ensure that only a single thread can initialize the [Lazy] instance.\n     */\n    SYNCHRONIZED,\n\n    /**\n     * Initializer function can be called several times on concurrent access to uninitialized [Lazy] instance value,\n     * but only the first returned value will be used as the value of [Lazy] instance.\n     */\n    PUBLICATION,\n\n    /**\n     * No locks are used to synchronize an access to the [Lazy] instance value; if the instance is accessed from multiple threads, its behavior is undefined.\n     *\n     * This mode should not be used unless the [Lazy] instance is guaranteed never to be initialized from more than one thread.\n     */\n    NONE,\n}\n\n\nprivate object UNINITIALIZED_VALUE\n\n/* Not available on platform: JS */\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n// internal to be called from lazy in JS\ninternal class UnsafeLazyImpl<out T>(initializer: () -> T) : Lazy<T>, Serializable {\n    private var initializer: (() -> T)? = initializer\n    private var _value: Any? = UNINITIALIZED_VALUE\n\n    override val value: T\n        get() {\n            if (_value === UNINITIALIZED_VALUE) {\n                _value = initializer!!()\n                initializer = null\n            }\n            @Suppress(\"UNCHECKED_CAST\")\n            return _value as T\n        }\n\n    override fun isInitialized(): Boolean = _value !== UNINITIALIZED_VALUE\n\n    override fun toString(): String = if (isInitialized()) value.toString() else \"Lazy value not initialized yet.\"\n\n    private fun writeReplace(): Any = InitializedLazyImpl(value)\n}\n\nprivate class InitializedLazyImpl<out T>(override val value: T) : Lazy<T>, Serializable {\n\n    override fun isInitialized(): Boolean = true\n\n    override fun toString(): String = value.toString()\n\n}\n\n/* Not available on platform: JS */\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","package kotlin.properties\n\nimport kotlin.reflect.KProperty\n\n/**\n * Standard property delegates.\n */\npublic object Delegates {\n    /**\n     * Returns a property delegate for a read/write property with a non-`null` value that is initialized not during\n     * object construction time but at a later time. Trying to read the property before the initial value has been\n     * assigned results in an exception.\n     *\n     * @sample samples.properties.Delegates.notNullDelegate\n     */\n    public fun <T: Any> notNull(): ReadWriteProperty<Any?, T> = NotNullVar()\n\n    /**\n     * Returns a property delegate for a read/write property that calls a specified callback function when changed.\n     * @param initialValue the initial value of the property.\n     * @param onChange the callback which is called after the change of the property is made. The value of the property\n     *  has already been changed when this callback is invoked.\n     *\n     *  @sample samples.properties.Delegates.observableDelegate\n     */\n    public inline fun <T> observable(initialValue: T, crossinline onChange: (property: KProperty<*>, oldValue: T, newValue: T) -> Unit):\n        ReadWriteProperty<Any?, T> = object : ObservableProperty<T>(initialValue) {\n            override fun afterChange(property: KProperty<*>, oldValue: T, newValue: T) = onChange(property, oldValue, newValue)\n        }\n\n    /**\n     * Returns a property delegate for a read/write property that calls a specified callback function when changed,\n     * allowing the callback to veto the modification.\n     * @param initialValue the initial value of the property.\n     * @param onChange the callback which is called before a change to the property value is attempted.\n     *  The value of the property hasn't been changed yet, when this callback is invoked.\n     *  If the callback returns `true` the value of the property is being set to the new value,\n     *  and if the callback returns `false` the new value is discarded and the property remains its old value.\n     *\n     *  @sample samples.properties.Delegates.vetoableDelegate\n     *  @sample samples.properties.Delegates.throwVetoableDelegate\n     */\n    public inline fun <T> vetoable(initialValue: T, crossinline onChange: (property: KProperty<*>, oldValue: T, newValue: T) -> Boolean):\n        ReadWriteProperty<Any?, T> = object : ObservableProperty<T>(initialValue) {\n            override fun beforeChange(property: KProperty<*>, oldValue: T, newValue: T): Boolean = onChange(property, oldValue, newValue)\n        }\n\n}\n\n\nprivate class NotNullVar<T: Any>() : ReadWriteProperty<Any?, T> {\n    private var value: T? = null\n\n    public override fun getValue(thisRef: Any?, property: KProperty<*>): T {\n        return value ?: throw IllegalStateException(\"Property ${property.name} should be initialized before get.\")\n    }\n\n    public override fun setValue(thisRef: Any?, property: KProperty<*>, value: T) {\n        this.value = value\n    }\n}\n\n","@file:kotlin.jvm.JvmName(\"MapAccessorsKt\")\npackage kotlin.collections\n\nimport kotlin.reflect.KProperty\nimport kotlin.internal.Exact\n\n/**\n * Returns the value of the property for the given object from this read-only map.\n * @param thisRef the object for which the value is requested (not used).\n * @param property the metadata for the property, used to get the name of property and lookup the value corresponding to this name in the map.\n * @return the property value.\n *\n * @throws NoSuchElementException when the map doesn't contain value for the property name and doesn't provide an implicit default (see [withDefault]).\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <V, V1: V> Map<in String, @Exact V>.getValue(thisRef: Any?, property: KProperty<*>): V1\n        = @Suppress(\"UNCHECKED_CAST\") (getOrImplicitDefault(property.name) as V1)\n\n/**\n * Returns the value of the property for the given object from this mutable map.\n * @param thisRef the object for which the value is requested (not used).\n * @param property the metadata for the property, used to get the name of property and lookup the value corresponding to this name in the map.\n * @return the property value.\n *\n * @throws NoSuchElementException when the map doesn't contain value for the property name and doesn't provide an implicit default (see [withDefault]).\n */\n@kotlin.jvm.JvmName(\"getVar\")\n@kotlin.internal.InlineOnly\npublic inline operator fun <V, V1: V> MutableMap<in String, out @Exact V>.getValue(thisRef: Any?, property: KProperty<*>): V1\n        = @Suppress(\"UNCHECKED_CAST\") (getOrImplicitDefault(property.name) as V1)\n\n@Deprecated(\"Use getValue() with two type parameters instead\")\n@kotlin.jvm.JvmName(\"getVarContravariant\")\n@kotlin.internal.LowPriorityInOverloadResolution\n@kotlin.internal.InlineOnly\npublic inline fun <V> MutableMap<in String, in V>.getValue(thisRef: Any?, property: KProperty<*>): V\n        = @Suppress(\"UNCHECKED_CAST\") (getOrImplicitDefault(property.name) as V)\n\n/**\n * Stores the value of the property for the given object in this mutable map.\n * @param thisRef the object for which the value is requested (not used).\n * @param property the metadata for the property, used to get the name of property and store the value associated with that name in the map.\n * @param value the value to set.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <V> MutableMap<in String, in V>.setValue(thisRef: Any?, property: KProperty<*>, value: V) {\n    this.put(property.name, value)\n}\n","@file:kotlin.jvm.JvmMultifileClass\n@file:kotlin.jvm.JvmName(\"MapsKt\")\n\npackage kotlin.collections\n\n//\n// NOTE THIS FILE IS AUTO-GENERATED by the GenerateStandardLib.kt\n// See: https://github.com/JetBrains/kotlin/tree/master/libraries/stdlib\n//\n\nimport kotlin.js.*\nimport kotlin.comparisons.*\n\n/**\n * Returns a [List] containing all key-value pairs.\n */\npublic fun <K, V> Map<out K, V>.toList(): List<Pair<K, V>> {\n    if (size == 0)\n        return emptyList()\n    val iterator = entries.iterator()\n    if (!iterator.hasNext())\n        return emptyList()\n    val first = iterator.next()\n    if (!iterator.hasNext())\n        return listOf(first.toPair())\n    val result = ArrayList<Pair<K, V>>(size)\n    result.add(first.toPair())\n    do {\n        result.add(iterator.next().toPair())\n    } while (iterator.hasNext())\n    return result\n}\n\n/**\n * Returns a single list of all elements yielded from results of [transform] function being invoked on each entry of original map.\n */\npublic inline fun <K, V, R> Map<out K, V>.flatMap(transform: (Map.Entry<K, V>) -> Iterable<R>): List<R> {\n    return flatMapTo(ArrayList<R>(), transform)\n}\n\n/**\n * Appends all elements yielded from results of [transform] function being invoked on each entry of original map, to the given [destination].\n */\npublic inline fun <K, V, R, C : MutableCollection<in R>> Map<out K, V>.flatMapTo(destination: C, transform: (Map.Entry<K, V>) -> Iterable<R>): C {\n    for (element in this) {\n        val list = transform(element)\n        destination.addAll(list)\n    }\n    return destination\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each entry in the original map.\n */\npublic inline fun <K, V, R> Map<out K, V>.map(transform: (Map.Entry<K, V>) -> R): List<R> {\n    return mapTo(ArrayList<R>(size), transform)\n}\n\n/**\n * Returns a list containing only the non-null results of applying the given [transform] function\n * to each entry in the original map.\n */\npublic inline fun <K, V, R : Any> Map<out K, V>.mapNotNull(transform: (Map.Entry<K, V>) -> R?): List<R> {\n    return mapNotNullTo(ArrayList<R>(), transform)\n}\n\n/**\n * Applies the given [transform] function to each entry in the original map\n * and appends only the non-null results to the given [destination].\n */\npublic inline fun <K, V, R : Any, C : MutableCollection<in R>> Map<out K, V>.mapNotNullTo(destination: C, transform: (Map.Entry<K, V>) -> R?): C {\n    forEach { element -> transform(element)?.let { destination.add(it) } }\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each entry of the original map\n * and appends the results to the given [destination].\n */\npublic inline fun <K, V, R, C : MutableCollection<in R>> Map<out K, V>.mapTo(destination: C, transform: (Map.Entry<K, V>) -> R): C {\n    for (item in this)\n        destination.add(transform(item))\n    return destination\n}\n\n/**\n * Returns `true` if all entries match the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.all\n */\npublic inline fun <K, V> Map<out K, V>.all(predicate: (Map.Entry<K, V>) -> Boolean): Boolean {\n    if (isEmpty()) return true\n    for (element in this) if (!predicate(element)) return false\n    return true\n}\n\n/**\n * Returns `true` if map has at least one entry.\n * \n * @sample samples.collections.Collections.Aggregates.any\n */\npublic fun <K, V> Map<out K, V>.any(): Boolean {\n    return !isEmpty()\n}\n\n/**\n * Returns `true` if at least one entry matches the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.anyWithPredicate\n */\npublic inline fun <K, V> Map<out K, V>.any(predicate: (Map.Entry<K, V>) -> Boolean): Boolean {\n    if (isEmpty()) return false\n    for (element in this) if (predicate(element)) return true\n    return false\n}\n\n/**\n * Returns the number of entries in this map.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <K, V> Map<out K, V>.count(): Int {\n    return size\n}\n\n/**\n * Returns the number of entries matching the given [predicate].\n */\npublic inline fun <K, V> Map<out K, V>.count(predicate: (Map.Entry<K, V>) -> Boolean): Int {\n    if (isEmpty()) return 0\n    var count = 0\n    for (element in this) if (predicate(element)) count++\n    return count\n}\n\n/**\n * Performs the given [action] on each entry.\n */\n@kotlin.internal.HidesMembers\npublic inline fun <K, V> Map<out K, V>.forEach(action: (Map.Entry<K, V>) -> Unit): Unit {\n    for (element in this) action(element)\n}\n\n/**\n * Returns the first entry yielding the largest value of the given function or `null` if there are no entries.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <K, V, R : Comparable<R>> Map<out K, V>.maxBy(selector: (Map.Entry<K, V>) -> R): Map.Entry<K, V>? {\n    return entries.maxBy(selector)\n}\n\n/**\n * Returns the first entry having the largest value according to the provided [comparator] or `null` if there are no entries.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <K, V> Map<out K, V>.maxWith(comparator: Comparator<in Map.Entry<K, V>>): Map.Entry<K, V>? {\n    return entries.maxWith(comparator)\n}\n\n/**\n * Returns the first entry yielding the smallest value of the given function or `null` if there are no entries.\n */\npublic inline fun <K, V, R : Comparable<R>> Map<out K, V>.minBy(selector: (Map.Entry<K, V>) -> R): Map.Entry<K, V>? {\n    return entries.minBy(selector)\n}\n\n/**\n * Returns the first entry having the smallest value according to the provided [comparator] or `null` if there are no entries.\n */\npublic fun <K, V> Map<out K, V>.minWith(comparator: Comparator<in Map.Entry<K, V>>): Map.Entry<K, V>? {\n    return entries.minWith(comparator)\n}\n\n/**\n * Returns `true` if the map has no entries.\n * \n * @sample samples.collections.Collections.Aggregates.none\n */\npublic fun <K, V> Map<out K, V>.none(): Boolean {\n    return isEmpty()\n}\n\n/**\n * Returns `true` if no entries match the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.noneWithPredicate\n */\npublic inline fun <K, V> Map<out K, V>.none(predicate: (Map.Entry<K, V>) -> Boolean): Boolean {\n    if (isEmpty()) return true\n    for (element in this) if (predicate(element)) return false\n    return true\n}\n\n/**\n * Performs the given [action] on each entry and returns the map itself afterwards.\n */\n@SinceKotlin(\"1.1\")\npublic inline fun <K, V, M : Map<out K, V>> M.onEach(action: (Map.Entry<K, V>) -> Unit): M {\n    return apply { for (element in this) action(element) }\n}\n\n/**\n * Creates an [Iterable] instance that wraps the original map returning its entries when being iterated.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <K, V> Map<out K, V>.asIterable(): Iterable<Map.Entry<K, V>> {\n    return entries\n}\n\n/**\n * Creates a [Sequence] instance that wraps the original map returning its entries when being iterated.\n */\npublic fun <K, V> Map<out K, V>.asSequence(): Sequence<Map.Entry<K, V>> {\n    return entries.asSequence()\n}\n\n","@file:kotlin.jvm.JvmMultifileClass\n@file:kotlin.jvm.JvmName(\"ArraysKt\")\n\npackage kotlin.collections\n\n//\n// NOTE THIS FILE IS AUTO-GENERATED by the GenerateStandardLib.kt\n// See: https://github.com/JetBrains/kotlin/tree/master/libraries/stdlib\n//\n\nimport kotlin.js.*\nimport primitiveArrayConcat\nimport withType\nimport kotlin.comparisons.*\n\n/**\n * Returns 1st *element* from the collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <T> Array<out T>.component1(): T {\n    return get(0)\n}\n\n/**\n * Returns 1st *element* from the collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun ByteArray.component1(): Byte {\n    return get(0)\n}\n\n/**\n * Returns 1st *element* from the collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun ShortArray.component1(): Short {\n    return get(0)\n}\n\n/**\n * Returns 1st *element* from the collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun IntArray.component1(): Int {\n    return get(0)\n}\n\n/**\n * Returns 1st *element* from the collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun LongArray.component1(): Long {\n    return get(0)\n}\n\n/**\n * Returns 1st *element* from the collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun FloatArray.component1(): Float {\n    return get(0)\n}\n\n/**\n * Returns 1st *element* from the collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun DoubleArray.component1(): Double {\n    return get(0)\n}\n\n/**\n * Returns 1st *element* from the collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun BooleanArray.component1(): Boolean {\n    return get(0)\n}\n\n/**\n * Returns 1st *element* from the collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun CharArray.component1(): Char {\n    return get(0)\n}\n\n/**\n * Returns 2nd *element* from the collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <T> Array<out T>.component2(): T {\n    return get(1)\n}\n\n/**\n * Returns 2nd *element* from the collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun ByteArray.component2(): Byte {\n    return get(1)\n}\n\n/**\n * Returns 2nd *element* from the collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun ShortArray.component2(): Short {\n    return get(1)\n}\n\n/**\n * Returns 2nd *element* from the collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun IntArray.component2(): Int {\n    return get(1)\n}\n\n/**\n * Returns 2nd *element* from the collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun LongArray.component2(): Long {\n    return get(1)\n}\n\n/**\n * Returns 2nd *element* from the collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun FloatArray.component2(): Float {\n    return get(1)\n}\n\n/**\n * Returns 2nd *element* from the collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun DoubleArray.component2(): Double {\n    return get(1)\n}\n\n/**\n * Returns 2nd *element* from the collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun BooleanArray.component2(): Boolean {\n    return get(1)\n}\n\n/**\n * Returns 2nd *element* from the collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun CharArray.component2(): Char {\n    return get(1)\n}\n\n/**\n * Returns 3rd *element* from the collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <T> Array<out T>.component3(): T {\n    return get(2)\n}\n\n/**\n * Returns 3rd *element* from the collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun ByteArray.component3(): Byte {\n    return get(2)\n}\n\n/**\n * Returns 3rd *element* from the collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun ShortArray.component3(): Short {\n    return get(2)\n}\n\n/**\n * Returns 3rd *element* from the collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun IntArray.component3(): Int {\n    return get(2)\n}\n\n/**\n * Returns 3rd *element* from the collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun LongArray.component3(): Long {\n    return get(2)\n}\n\n/**\n * Returns 3rd *element* from the collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun FloatArray.component3(): Float {\n    return get(2)\n}\n\n/**\n * Returns 3rd *element* from the collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun DoubleArray.component3(): Double {\n    return get(2)\n}\n\n/**\n * Returns 3rd *element* from the collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun BooleanArray.component3(): Boolean {\n    return get(2)\n}\n\n/**\n * Returns 3rd *element* from the collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun CharArray.component3(): Char {\n    return get(2)\n}\n\n/**\n * Returns 4th *element* from the collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <T> Array<out T>.component4(): T {\n    return get(3)\n}\n\n/**\n * Returns 4th *element* from the collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun ByteArray.component4(): Byte {\n    return get(3)\n}\n\n/**\n * Returns 4th *element* from the collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun ShortArray.component4(): Short {\n    return get(3)\n}\n\n/**\n * Returns 4th *element* from the collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun IntArray.component4(): Int {\n    return get(3)\n}\n\n/**\n * Returns 4th *element* from the collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun LongArray.component4(): Long {\n    return get(3)\n}\n\n/**\n * Returns 4th *element* from the collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun FloatArray.component4(): Float {\n    return get(3)\n}\n\n/**\n * Returns 4th *element* from the collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun DoubleArray.component4(): Double {\n    return get(3)\n}\n\n/**\n * Returns 4th *element* from the collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun BooleanArray.component4(): Boolean {\n    return get(3)\n}\n\n/**\n * Returns 4th *element* from the collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun CharArray.component4(): Char {\n    return get(3)\n}\n\n/**\n * Returns 5th *element* from the collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <T> Array<out T>.component5(): T {\n    return get(4)\n}\n\n/**\n * Returns 5th *element* from the collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun ByteArray.component5(): Byte {\n    return get(4)\n}\n\n/**\n * Returns 5th *element* from the collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun ShortArray.component5(): Short {\n    return get(4)\n}\n\n/**\n * Returns 5th *element* from the collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun IntArray.component5(): Int {\n    return get(4)\n}\n\n/**\n * Returns 5th *element* from the collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun LongArray.component5(): Long {\n    return get(4)\n}\n\n/**\n * Returns 5th *element* from the collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun FloatArray.component5(): Float {\n    return get(4)\n}\n\n/**\n * Returns 5th *element* from the collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun DoubleArray.component5(): Double {\n    return get(4)\n}\n\n/**\n * Returns 5th *element* from the collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun BooleanArray.component5(): Boolean {\n    return get(4)\n}\n\n/**\n * Returns 5th *element* from the collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun CharArray.component5(): Char {\n    return get(4)\n}\n\n/**\n * Returns `true` if [element] is found in the array.\n */\npublic operator fun <@kotlin.internal.OnlyInputTypes T> Array<out T>.contains(element: T): Boolean {\n    return indexOf(element) >= 0\n}\n\n/**\n * Returns `true` if [element] is found in the array.\n */\npublic operator fun ByteArray.contains(element: Byte): Boolean {\n    return indexOf(element) >= 0\n}\n\n/**\n * Returns `true` if [element] is found in the array.\n */\npublic operator fun ShortArray.contains(element: Short): Boolean {\n    return indexOf(element) >= 0\n}\n\n/**\n * Returns `true` if [element] is found in the array.\n */\npublic operator fun IntArray.contains(element: Int): Boolean {\n    return indexOf(element) >= 0\n}\n\n/**\n * Returns `true` if [element] is found in the array.\n */\npublic operator fun LongArray.contains(element: Long): Boolean {\n    return indexOf(element) >= 0\n}\n\n/**\n * Returns `true` if [element] is found in the array.\n */\npublic operator fun FloatArray.contains(element: Float): Boolean {\n    return indexOf(element) >= 0\n}\n\n/**\n * Returns `true` if [element] is found in the array.\n */\npublic operator fun DoubleArray.contains(element: Double): Boolean {\n    return indexOf(element) >= 0\n}\n\n/**\n * Returns `true` if [element] is found in the array.\n */\npublic operator fun BooleanArray.contains(element: Boolean): Boolean {\n    return indexOf(element) >= 0\n}\n\n/**\n * Returns `true` if [element] is found in the array.\n */\npublic operator fun CharArray.contains(element: Char): Boolean {\n    return indexOf(element) >= 0\n}\n\n/**\n * Returns an element at the given [index] or throws an [IndexOutOfBoundsException] if the [index] is out of bounds of this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Array<out T>.elementAt(index: Int): T {\n    return get(index)\n}\n\n/**\n * Returns an element at the given [index] or throws an [IndexOutOfBoundsException] if the [index] is out of bounds of this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun ByteArray.elementAt(index: Int): Byte {\n    return get(index)\n}\n\n/**\n * Returns an element at the given [index] or throws an [IndexOutOfBoundsException] if the [index] is out of bounds of this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun ShortArray.elementAt(index: Int): Short {\n    return get(index)\n}\n\n/**\n * Returns an element at the given [index] or throws an [IndexOutOfBoundsException] if the [index] is out of bounds of this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun IntArray.elementAt(index: Int): Int {\n    return get(index)\n}\n\n/**\n * Returns an element at the given [index] or throws an [IndexOutOfBoundsException] if the [index] is out of bounds of this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun LongArray.elementAt(index: Int): Long {\n    return get(index)\n}\n\n/**\n * Returns an element at the given [index] or throws an [IndexOutOfBoundsException] if the [index] is out of bounds of this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun FloatArray.elementAt(index: Int): Float {\n    return get(index)\n}\n\n/**\n * Returns an element at the given [index] or throws an [IndexOutOfBoundsException] if the [index] is out of bounds of this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun DoubleArray.elementAt(index: Int): Double {\n    return get(index)\n}\n\n/**\n * Returns an element at the given [index] or throws an [IndexOutOfBoundsException] if the [index] is out of bounds of this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun BooleanArray.elementAt(index: Int): Boolean {\n    return get(index)\n}\n\n/**\n * Returns an element at the given [index] or throws an [IndexOutOfBoundsException] if the [index] is out of bounds of this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun CharArray.elementAt(index: Int): Char {\n    return get(index)\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Array<out T>.elementAtOrElse(index: Int, defaultValue: (Int) -> T): T {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun ByteArray.elementAtOrElse(index: Int, defaultValue: (Int) -> Byte): Byte {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun ShortArray.elementAtOrElse(index: Int, defaultValue: (Int) -> Short): Short {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun IntArray.elementAtOrElse(index: Int, defaultValue: (Int) -> Int): Int {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun LongArray.elementAtOrElse(index: Int, defaultValue: (Int) -> Long): Long {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun FloatArray.elementAtOrElse(index: Int, defaultValue: (Int) -> Float): Float {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun DoubleArray.elementAtOrElse(index: Int, defaultValue: (Int) -> Double): Double {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun BooleanArray.elementAtOrElse(index: Int, defaultValue: (Int) -> Boolean): Boolean {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun CharArray.elementAtOrElse(index: Int, defaultValue: (Int) -> Char): Char {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Array<out T>.elementAtOrNull(index: Int): T? {\n    return this.getOrNull(index)\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun ByteArray.elementAtOrNull(index: Int): Byte? {\n    return this.getOrNull(index)\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun ShortArray.elementAtOrNull(index: Int): Short? {\n    return this.getOrNull(index)\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun IntArray.elementAtOrNull(index: Int): Int? {\n    return this.getOrNull(index)\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun LongArray.elementAtOrNull(index: Int): Long? {\n    return this.getOrNull(index)\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun FloatArray.elementAtOrNull(index: Int): Float? {\n    return this.getOrNull(index)\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun DoubleArray.elementAtOrNull(index: Int): Double? {\n    return this.getOrNull(index)\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun BooleanArray.elementAtOrNull(index: Int): Boolean? {\n    return this.getOrNull(index)\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun CharArray.elementAtOrNull(index: Int): Char? {\n    return this.getOrNull(index)\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if no such element was found.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Array<out T>.find(predicate: (T) -> Boolean): T? {\n    return firstOrNull(predicate)\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if no such element was found.\n */\n@kotlin.internal.InlineOnly\npublic inline fun ByteArray.find(predicate: (Byte) -> Boolean): Byte? {\n    return firstOrNull(predicate)\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if no such element was found.\n */\n@kotlin.internal.InlineOnly\npublic inline fun ShortArray.find(predicate: (Short) -> Boolean): Short? {\n    return firstOrNull(predicate)\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if no such element was found.\n */\n@kotlin.internal.InlineOnly\npublic inline fun IntArray.find(predicate: (Int) -> Boolean): Int? {\n    return firstOrNull(predicate)\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if no such element was found.\n */\n@kotlin.internal.InlineOnly\npublic inline fun LongArray.find(predicate: (Long) -> Boolean): Long? {\n    return firstOrNull(predicate)\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if no such element was found.\n */\n@kotlin.internal.InlineOnly\npublic inline fun FloatArray.find(predicate: (Float) -> Boolean): Float? {\n    return firstOrNull(predicate)\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if no such element was found.\n */\n@kotlin.internal.InlineOnly\npublic inline fun DoubleArray.find(predicate: (Double) -> Boolean): Double? {\n    return firstOrNull(predicate)\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if no such element was found.\n */\n@kotlin.internal.InlineOnly\npublic inline fun BooleanArray.find(predicate: (Boolean) -> Boolean): Boolean? {\n    return firstOrNull(predicate)\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if no such element was found.\n */\n@kotlin.internal.InlineOnly\npublic inline fun CharArray.find(predicate: (Char) -> Boolean): Char? {\n    return firstOrNull(predicate)\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Array<out T>.findLast(predicate: (T) -> Boolean): T? {\n    return lastOrNull(predicate)\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n */\n@kotlin.internal.InlineOnly\npublic inline fun ByteArray.findLast(predicate: (Byte) -> Boolean): Byte? {\n    return lastOrNull(predicate)\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n */\n@kotlin.internal.InlineOnly\npublic inline fun ShortArray.findLast(predicate: (Short) -> Boolean): Short? {\n    return lastOrNull(predicate)\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n */\n@kotlin.internal.InlineOnly\npublic inline fun IntArray.findLast(predicate: (Int) -> Boolean): Int? {\n    return lastOrNull(predicate)\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n */\n@kotlin.internal.InlineOnly\npublic inline fun LongArray.findLast(predicate: (Long) -> Boolean): Long? {\n    return lastOrNull(predicate)\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n */\n@kotlin.internal.InlineOnly\npublic inline fun FloatArray.findLast(predicate: (Float) -> Boolean): Float? {\n    return lastOrNull(predicate)\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n */\n@kotlin.internal.InlineOnly\npublic inline fun DoubleArray.findLast(predicate: (Double) -> Boolean): Double? {\n    return lastOrNull(predicate)\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n */\n@kotlin.internal.InlineOnly\npublic inline fun BooleanArray.findLast(predicate: (Boolean) -> Boolean): Boolean? {\n    return lastOrNull(predicate)\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n */\n@kotlin.internal.InlineOnly\npublic inline fun CharArray.findLast(predicate: (Char) -> Boolean): Char? {\n    return lastOrNull(predicate)\n}\n\n/**\n * Returns first element.\n * @throws [NoSuchElementException] if the array is empty.\n */\npublic fun <T> Array<out T>.first(): T {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return this[0]\n}\n\n/**\n * Returns first element.\n * @throws [NoSuchElementException] if the array is empty.\n */\npublic fun ByteArray.first(): Byte {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return this[0]\n}\n\n/**\n * Returns first element.\n * @throws [NoSuchElementException] if the array is empty.\n */\npublic fun ShortArray.first(): Short {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return this[0]\n}\n\n/**\n * Returns first element.\n * @throws [NoSuchElementException] if the array is empty.\n */\npublic fun IntArray.first(): Int {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return this[0]\n}\n\n/**\n * Returns first element.\n * @throws [NoSuchElementException] if the array is empty.\n */\npublic fun LongArray.first(): Long {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return this[0]\n}\n\n/**\n * Returns first element.\n * @throws [NoSuchElementException] if the array is empty.\n */\npublic fun FloatArray.first(): Float {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return this[0]\n}\n\n/**\n * Returns first element.\n * @throws [NoSuchElementException] if the array is empty.\n */\npublic fun DoubleArray.first(): Double {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return this[0]\n}\n\n/**\n * Returns first element.\n * @throws [NoSuchElementException] if the array is empty.\n */\npublic fun BooleanArray.first(): Boolean {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return this[0]\n}\n\n/**\n * Returns first element.\n * @throws [NoSuchElementException] if the array is empty.\n */\npublic fun CharArray.first(): Char {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return this[0]\n}\n\n/**\n * Returns the first element matching the given [predicate].\n * @throws [NoSuchElementException] if no such element is found.\n */\npublic inline fun <T> Array<out T>.first(predicate: (T) -> Boolean): T {\n    for (element in this) if (predicate(element)) return element\n    throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n}\n\n/**\n * Returns the first element matching the given [predicate].\n * @throws [NoSuchElementException] if no such element is found.\n */\npublic inline fun ByteArray.first(predicate: (Byte) -> Boolean): Byte {\n    for (element in this) if (predicate(element)) return element\n    throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n}\n\n/**\n * Returns the first element matching the given [predicate].\n * @throws [NoSuchElementException] if no such element is found.\n */\npublic inline fun ShortArray.first(predicate: (Short) -> Boolean): Short {\n    for (element in this) if (predicate(element)) return element\n    throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n}\n\n/**\n * Returns the first element matching the given [predicate].\n * @throws [NoSuchElementException] if no such element is found.\n */\npublic inline fun IntArray.first(predicate: (Int) -> Boolean): Int {\n    for (element in this) if (predicate(element)) return element\n    throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n}\n\n/**\n * Returns the first element matching the given [predicate].\n * @throws [NoSuchElementException] if no such element is found.\n */\npublic inline fun LongArray.first(predicate: (Long) -> Boolean): Long {\n    for (element in this) if (predicate(element)) return element\n    throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n}\n\n/**\n * Returns the first element matching the given [predicate].\n * @throws [NoSuchElementException] if no such element is found.\n */\npublic inline fun FloatArray.first(predicate: (Float) -> Boolean): Float {\n    for (element in this) if (predicate(element)) return element\n    throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n}\n\n/**\n * Returns the first element matching the given [predicate].\n * @throws [NoSuchElementException] if no such element is found.\n */\npublic inline fun DoubleArray.first(predicate: (Double) -> Boolean): Double {\n    for (element in this) if (predicate(element)) return element\n    throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n}\n\n/**\n * Returns the first element matching the given [predicate].\n * @throws [NoSuchElementException] if no such element is found.\n */\npublic inline fun BooleanArray.first(predicate: (Boolean) -> Boolean): Boolean {\n    for (element in this) if (predicate(element)) return element\n    throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n}\n\n/**\n * Returns the first element matching the given [predicate].\n * @throws [NoSuchElementException] if no such element is found.\n */\npublic inline fun CharArray.first(predicate: (Char) -> Boolean): Char {\n    for (element in this) if (predicate(element)) return element\n    throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n}\n\n/**\n * Returns the first element, or `null` if the array is empty.\n */\npublic fun <T> Array<out T>.firstOrNull(): T? {\n    return if (isEmpty()) null else this[0]\n}\n\n/**\n * Returns the first element, or `null` if the array is empty.\n */\npublic fun ByteArray.firstOrNull(): Byte? {\n    return if (isEmpty()) null else this[0]\n}\n\n/**\n * Returns the first element, or `null` if the array is empty.\n */\npublic fun ShortArray.firstOrNull(): Short? {\n    return if (isEmpty()) null else this[0]\n}\n\n/**\n * Returns the first element, or `null` if the array is empty.\n */\npublic fun IntArray.firstOrNull(): Int? {\n    return if (isEmpty()) null else this[0]\n}\n\n/**\n * Returns the first element, or `null` if the array is empty.\n */\npublic fun LongArray.firstOrNull(): Long? {\n    return if (isEmpty()) null else this[0]\n}\n\n/**\n * Returns the first element, or `null` if the array is empty.\n */\npublic fun FloatArray.firstOrNull(): Float? {\n    return if (isEmpty()) null else this[0]\n}\n\n/**\n * Returns the first element, or `null` if the array is empty.\n */\npublic fun DoubleArray.firstOrNull(): Double? {\n    return if (isEmpty()) null else this[0]\n}\n\n/**\n * Returns the first element, or `null` if the array is empty.\n */\npublic fun BooleanArray.firstOrNull(): Boolean? {\n    return if (isEmpty()) null else this[0]\n}\n\n/**\n * Returns the first element, or `null` if the array is empty.\n */\npublic fun CharArray.firstOrNull(): Char? {\n    return if (isEmpty()) null else this[0]\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if element was not found.\n */\npublic inline fun <T> Array<out T>.firstOrNull(predicate: (T) -> Boolean): T? {\n    for (element in this) if (predicate(element)) return element\n    return null\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if element was not found.\n */\npublic inline fun ByteArray.firstOrNull(predicate: (Byte) -> Boolean): Byte? {\n    for (element in this) if (predicate(element)) return element\n    return null\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if element was not found.\n */\npublic inline fun ShortArray.firstOrNull(predicate: (Short) -> Boolean): Short? {\n    for (element in this) if (predicate(element)) return element\n    return null\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if element was not found.\n */\npublic inline fun IntArray.firstOrNull(predicate: (Int) -> Boolean): Int? {\n    for (element in this) if (predicate(element)) return element\n    return null\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if element was not found.\n */\npublic inline fun LongArray.firstOrNull(predicate: (Long) -> Boolean): Long? {\n    for (element in this) if (predicate(element)) return element\n    return null\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if element was not found.\n */\npublic inline fun FloatArray.firstOrNull(predicate: (Float) -> Boolean): Float? {\n    for (element in this) if (predicate(element)) return element\n    return null\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if element was not found.\n */\npublic inline fun DoubleArray.firstOrNull(predicate: (Double) -> Boolean): Double? {\n    for (element in this) if (predicate(element)) return element\n    return null\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if element was not found.\n */\npublic inline fun BooleanArray.firstOrNull(predicate: (Boolean) -> Boolean): Boolean? {\n    for (element in this) if (predicate(element)) return element\n    return null\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if element was not found.\n */\npublic inline fun CharArray.firstOrNull(predicate: (Char) -> Boolean): Char? {\n    for (element in this) if (predicate(element)) return element\n    return null\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Array<out T>.getOrElse(index: Int, defaultValue: (Int) -> T): T {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun ByteArray.getOrElse(index: Int, defaultValue: (Int) -> Byte): Byte {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun ShortArray.getOrElse(index: Int, defaultValue: (Int) -> Short): Short {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun IntArray.getOrElse(index: Int, defaultValue: (Int) -> Int): Int {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun LongArray.getOrElse(index: Int, defaultValue: (Int) -> Long): Long {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun FloatArray.getOrElse(index: Int, defaultValue: (Int) -> Float): Float {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun DoubleArray.getOrElse(index: Int, defaultValue: (Int) -> Double): Double {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun BooleanArray.getOrElse(index: Int, defaultValue: (Int) -> Boolean): Boolean {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun CharArray.getOrElse(index: Int, defaultValue: (Int) -> Char): Char {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this array.\n */\npublic fun <T> Array<out T>.getOrNull(index: Int): T? {\n    return if (index >= 0 && index <= lastIndex) get(index) else null\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this array.\n */\npublic fun ByteArray.getOrNull(index: Int): Byte? {\n    return if (index >= 0 && index <= lastIndex) get(index) else null\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this array.\n */\npublic fun ShortArray.getOrNull(index: Int): Short? {\n    return if (index >= 0 && index <= lastIndex) get(index) else null\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this array.\n */\npublic fun IntArray.getOrNull(index: Int): Int? {\n    return if (index >= 0 && index <= lastIndex) get(index) else null\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this array.\n */\npublic fun LongArray.getOrNull(index: Int): Long? {\n    return if (index >= 0 && index <= lastIndex) get(index) else null\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this array.\n */\npublic fun FloatArray.getOrNull(index: Int): Float? {\n    return if (index >= 0 && index <= lastIndex) get(index) else null\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this array.\n */\npublic fun DoubleArray.getOrNull(index: Int): Double? {\n    return if (index >= 0 && index <= lastIndex) get(index) else null\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this array.\n */\npublic fun BooleanArray.getOrNull(index: Int): Boolean? {\n    return if (index >= 0 && index <= lastIndex) get(index) else null\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this array.\n */\npublic fun CharArray.getOrNull(index: Int): Char? {\n    return if (index >= 0 && index <= lastIndex) get(index) else null\n}\n\n/**\n * Returns first index of [element], or -1 if the array does not contain element.\n */\npublic fun <@kotlin.internal.OnlyInputTypes T> Array<out T>.indexOf(element: T): Int {\n    if (element == null) {\n        for (index in indices) {\n            if (this[index] == null) {\n                return index\n            }\n        }\n    } else {\n        for (index in indices) {\n            if (element == this[index]) {\n                return index\n            }\n        }\n    }\n    return -1\n}\n\n/**\n * Returns first index of [element], or -1 if the array does not contain element.\n */\npublic fun ByteArray.indexOf(element: Byte): Int {\n    for (index in indices) {\n        if (element == this[index]) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns first index of [element], or -1 if the array does not contain element.\n */\npublic fun ShortArray.indexOf(element: Short): Int {\n    for (index in indices) {\n        if (element == this[index]) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns first index of [element], or -1 if the array does not contain element.\n */\npublic fun IntArray.indexOf(element: Int): Int {\n    for (index in indices) {\n        if (element == this[index]) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns first index of [element], or -1 if the array does not contain element.\n */\npublic fun LongArray.indexOf(element: Long): Int {\n    for (index in indices) {\n        if (element == this[index]) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns first index of [element], or -1 if the array does not contain element.\n */\npublic fun FloatArray.indexOf(element: Float): Int {\n    for (index in indices) {\n        if (element == this[index]) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns first index of [element], or -1 if the array does not contain element.\n */\npublic fun DoubleArray.indexOf(element: Double): Int {\n    for (index in indices) {\n        if (element == this[index]) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns first index of [element], or -1 if the array does not contain element.\n */\npublic fun BooleanArray.indexOf(element: Boolean): Int {\n    for (index in indices) {\n        if (element == this[index]) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns first index of [element], or -1 if the array does not contain element.\n */\npublic fun CharArray.indexOf(element: Char): Int {\n    for (index in indices) {\n        if (element == this[index]) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns index of the first element matching the given [predicate], or -1 if the array does not contain such element.\n */\npublic inline fun <T> Array<out T>.indexOfFirst(predicate: (T) -> Boolean): Int {\n    for (index in indices) {\n        if (predicate(this[index])) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns index of the first element matching the given [predicate], or -1 if the array does not contain such element.\n */\npublic inline fun ByteArray.indexOfFirst(predicate: (Byte) -> Boolean): Int {\n    for (index in indices) {\n        if (predicate(this[index])) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns index of the first element matching the given [predicate], or -1 if the array does not contain such element.\n */\npublic inline fun ShortArray.indexOfFirst(predicate: (Short) -> Boolean): Int {\n    for (index in indices) {\n        if (predicate(this[index])) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns index of the first element matching the given [predicate], or -1 if the array does not contain such element.\n */\npublic inline fun IntArray.indexOfFirst(predicate: (Int) -> Boolean): Int {\n    for (index in indices) {\n        if (predicate(this[index])) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns index of the first element matching the given [predicate], or -1 if the array does not contain such element.\n */\npublic inline fun LongArray.indexOfFirst(predicate: (Long) -> Boolean): Int {\n    for (index in indices) {\n        if (predicate(this[index])) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns index of the first element matching the given [predicate], or -1 if the array does not contain such element.\n */\npublic inline fun FloatArray.indexOfFirst(predicate: (Float) -> Boolean): Int {\n    for (index in indices) {\n        if (predicate(this[index])) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns index of the first element matching the given [predicate], or -1 if the array does not contain such element.\n */\npublic inline fun DoubleArray.indexOfFirst(predicate: (Double) -> Boolean): Int {\n    for (index in indices) {\n        if (predicate(this[index])) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns index of the first element matching the given [predicate], or -1 if the array does not contain such element.\n */\npublic inline fun BooleanArray.indexOfFirst(predicate: (Boolean) -> Boolean): Int {\n    for (index in indices) {\n        if (predicate(this[index])) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns index of the first element matching the given [predicate], or -1 if the array does not contain such element.\n */\npublic inline fun CharArray.indexOfFirst(predicate: (Char) -> Boolean): Int {\n    for (index in indices) {\n        if (predicate(this[index])) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns index of the last element matching the given [predicate], or -1 if the array does not contain such element.\n */\npublic inline fun <T> Array<out T>.indexOfLast(predicate: (T) -> Boolean): Int {\n    for (index in indices.reversed()) {\n        if (predicate(this[index])) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns index of the last element matching the given [predicate], or -1 if the array does not contain such element.\n */\npublic inline fun ByteArray.indexOfLast(predicate: (Byte) -> Boolean): Int {\n    for (index in indices.reversed()) {\n        if (predicate(this[index])) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns index of the last element matching the given [predicate], or -1 if the array does not contain such element.\n */\npublic inline fun ShortArray.indexOfLast(predicate: (Short) -> Boolean): Int {\n    for (index in indices.reversed()) {\n        if (predicate(this[index])) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns index of the last element matching the given [predicate], or -1 if the array does not contain such element.\n */\npublic inline fun IntArray.indexOfLast(predicate: (Int) -> Boolean): Int {\n    for (index in indices.reversed()) {\n        if (predicate(this[index])) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns index of the last element matching the given [predicate], or -1 if the array does not contain such element.\n */\npublic inline fun LongArray.indexOfLast(predicate: (Long) -> Boolean): Int {\n    for (index in indices.reversed()) {\n        if (predicate(this[index])) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns index of the last element matching the given [predicate], or -1 if the array does not contain such element.\n */\npublic inline fun FloatArray.indexOfLast(predicate: (Float) -> Boolean): Int {\n    for (index in indices.reversed()) {\n        if (predicate(this[index])) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns index of the last element matching the given [predicate], or -1 if the array does not contain such element.\n */\npublic inline fun DoubleArray.indexOfLast(predicate: (Double) -> Boolean): Int {\n    for (index in indices.reversed()) {\n        if (predicate(this[index])) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns index of the last element matching the given [predicate], or -1 if the array does not contain such element.\n */\npublic inline fun BooleanArray.indexOfLast(predicate: (Boolean) -> Boolean): Int {\n    for (index in indices.reversed()) {\n        if (predicate(this[index])) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns index of the last element matching the given [predicate], or -1 if the array does not contain such element.\n */\npublic inline fun CharArray.indexOfLast(predicate: (Char) -> Boolean): Int {\n    for (index in indices.reversed()) {\n        if (predicate(this[index])) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns the last element.\n * @throws [NoSuchElementException] if the array is empty.\n */\npublic fun <T> Array<out T>.last(): T {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return this[lastIndex]\n}\n\n/**\n * Returns the last element.\n * @throws [NoSuchElementException] if the array is empty.\n */\npublic fun ByteArray.last(): Byte {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return this[lastIndex]\n}\n\n/**\n * Returns the last element.\n * @throws [NoSuchElementException] if the array is empty.\n */\npublic fun ShortArray.last(): Short {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return this[lastIndex]\n}\n\n/**\n * Returns the last element.\n * @throws [NoSuchElementException] if the array is empty.\n */\npublic fun IntArray.last(): Int {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return this[lastIndex]\n}\n\n/**\n * Returns the last element.\n * @throws [NoSuchElementException] if the array is empty.\n */\npublic fun LongArray.last(): Long {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return this[lastIndex]\n}\n\n/**\n * Returns the last element.\n * @throws [NoSuchElementException] if the array is empty.\n */\npublic fun FloatArray.last(): Float {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return this[lastIndex]\n}\n\n/**\n * Returns the last element.\n * @throws [NoSuchElementException] if the array is empty.\n */\npublic fun DoubleArray.last(): Double {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return this[lastIndex]\n}\n\n/**\n * Returns the last element.\n * @throws [NoSuchElementException] if the array is empty.\n */\npublic fun BooleanArray.last(): Boolean {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return this[lastIndex]\n}\n\n/**\n * Returns the last element.\n * @throws [NoSuchElementException] if the array is empty.\n */\npublic fun CharArray.last(): Char {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return this[lastIndex]\n}\n\n/**\n * Returns the last element matching the given [predicate].\n * @throws [NoSuchElementException] if no such element is found.\n */\npublic inline fun <T> Array<out T>.last(predicate: (T) -> Boolean): T {\n    for (index in this.indices.reversed()) {\n        val element = this[index]\n        if (predicate(element)) return element\n    }\n    throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n}\n\n/**\n * Returns the last element matching the given [predicate].\n * @throws [NoSuchElementException] if no such element is found.\n */\npublic inline fun ByteArray.last(predicate: (Byte) -> Boolean): Byte {\n    for (index in this.indices.reversed()) {\n        val element = this[index]\n        if (predicate(element)) return element\n    }\n    throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n}\n\n/**\n * Returns the last element matching the given [predicate].\n * @throws [NoSuchElementException] if no such element is found.\n */\npublic inline fun ShortArray.last(predicate: (Short) -> Boolean): Short {\n    for (index in this.indices.reversed()) {\n        val element = this[index]\n        if (predicate(element)) return element\n    }\n    throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n}\n\n/**\n * Returns the last element matching the given [predicate].\n * @throws [NoSuchElementException] if no such element is found.\n */\npublic inline fun IntArray.last(predicate: (Int) -> Boolean): Int {\n    for (index in this.indices.reversed()) {\n        val element = this[index]\n        if (predicate(element)) return element\n    }\n    throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n}\n\n/**\n * Returns the last element matching the given [predicate].\n * @throws [NoSuchElementException] if no such element is found.\n */\npublic inline fun LongArray.last(predicate: (Long) -> Boolean): Long {\n    for (index in this.indices.reversed()) {\n        val element = this[index]\n        if (predicate(element)) return element\n    }\n    throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n}\n\n/**\n * Returns the last element matching the given [predicate].\n * @throws [NoSuchElementException] if no such element is found.\n */\npublic inline fun FloatArray.last(predicate: (Float) -> Boolean): Float {\n    for (index in this.indices.reversed()) {\n        val element = this[index]\n        if (predicate(element)) return element\n    }\n    throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n}\n\n/**\n * Returns the last element matching the given [predicate].\n * @throws [NoSuchElementException] if no such element is found.\n */\npublic inline fun DoubleArray.last(predicate: (Double) -> Boolean): Double {\n    for (index in this.indices.reversed()) {\n        val element = this[index]\n        if (predicate(element)) return element\n    }\n    throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n}\n\n/**\n * Returns the last element matching the given [predicate].\n * @throws [NoSuchElementException] if no such element is found.\n */\npublic inline fun BooleanArray.last(predicate: (Boolean) -> Boolean): Boolean {\n    for (index in this.indices.reversed()) {\n        val element = this[index]\n        if (predicate(element)) return element\n    }\n    throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n}\n\n/**\n * Returns the last element matching the given [predicate].\n * @throws [NoSuchElementException] if no such element is found.\n */\npublic inline fun CharArray.last(predicate: (Char) -> Boolean): Char {\n    for (index in this.indices.reversed()) {\n        val element = this[index]\n        if (predicate(element)) return element\n    }\n    throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n}\n\n/**\n * Returns last index of [element], or -1 if the array does not contain element.\n */\npublic fun <@kotlin.internal.OnlyInputTypes T> Array<out T>.lastIndexOf(element: T): Int {\n    if (element == null) {\n        for (index in indices.reversed()) {\n            if (this[index] == null) {\n                return index\n            }\n        }\n    } else {\n        for (index in indices.reversed()) {\n            if (element == this[index]) {\n                return index\n            }\n        }\n    }\n    return -1\n}\n\n/**\n * Returns last index of [element], or -1 if the array does not contain element.\n */\npublic fun ByteArray.lastIndexOf(element: Byte): Int {\n    for (index in indices.reversed()) {\n        if (element == this[index]) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns last index of [element], or -1 if the array does not contain element.\n */\npublic fun ShortArray.lastIndexOf(element: Short): Int {\n    for (index in indices.reversed()) {\n        if (element == this[index]) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns last index of [element], or -1 if the array does not contain element.\n */\npublic fun IntArray.lastIndexOf(element: Int): Int {\n    for (index in indices.reversed()) {\n        if (element == this[index]) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns last index of [element], or -1 if the array does not contain element.\n */\npublic fun LongArray.lastIndexOf(element: Long): Int {\n    for (index in indices.reversed()) {\n        if (element == this[index]) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns last index of [element], or -1 if the array does not contain element.\n */\npublic fun FloatArray.lastIndexOf(element: Float): Int {\n    for (index in indices.reversed()) {\n        if (element == this[index]) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns last index of [element], or -1 if the array does not contain element.\n */\npublic fun DoubleArray.lastIndexOf(element: Double): Int {\n    for (index in indices.reversed()) {\n        if (element == this[index]) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns last index of [element], or -1 if the array does not contain element.\n */\npublic fun BooleanArray.lastIndexOf(element: Boolean): Int {\n    for (index in indices.reversed()) {\n        if (element == this[index]) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns last index of [element], or -1 if the array does not contain element.\n */\npublic fun CharArray.lastIndexOf(element: Char): Int {\n    for (index in indices.reversed()) {\n        if (element == this[index]) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns the last element, or `null` if the array is empty.\n */\npublic fun <T> Array<out T>.lastOrNull(): T? {\n    return if (isEmpty()) null else this[size - 1]\n}\n\n/**\n * Returns the last element, or `null` if the array is empty.\n */\npublic fun ByteArray.lastOrNull(): Byte? {\n    return if (isEmpty()) null else this[size - 1]\n}\n\n/**\n * Returns the last element, or `null` if the array is empty.\n */\npublic fun ShortArray.lastOrNull(): Short? {\n    return if (isEmpty()) null else this[size - 1]\n}\n\n/**\n * Returns the last element, or `null` if the array is empty.\n */\npublic fun IntArray.lastOrNull(): Int? {\n    return if (isEmpty()) null else this[size - 1]\n}\n\n/**\n * Returns the last element, or `null` if the array is empty.\n */\npublic fun LongArray.lastOrNull(): Long? {\n    return if (isEmpty()) null else this[size - 1]\n}\n\n/**\n * Returns the last element, or `null` if the array is empty.\n */\npublic fun FloatArray.lastOrNull(): Float? {\n    return if (isEmpty()) null else this[size - 1]\n}\n\n/**\n * Returns the last element, or `null` if the array is empty.\n */\npublic fun DoubleArray.lastOrNull(): Double? {\n    return if (isEmpty()) null else this[size - 1]\n}\n\n/**\n * Returns the last element, or `null` if the array is empty.\n */\npublic fun BooleanArray.lastOrNull(): Boolean? {\n    return if (isEmpty()) null else this[size - 1]\n}\n\n/**\n * Returns the last element, or `null` if the array is empty.\n */\npublic fun CharArray.lastOrNull(): Char? {\n    return if (isEmpty()) null else this[size - 1]\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n */\npublic inline fun <T> Array<out T>.lastOrNull(predicate: (T) -> Boolean): T? {\n    for (index in this.indices.reversed()) {\n        val element = this[index]\n        if (predicate(element)) return element\n    }\n    return null\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n */\npublic inline fun ByteArray.lastOrNull(predicate: (Byte) -> Boolean): Byte? {\n    for (index in this.indices.reversed()) {\n        val element = this[index]\n        if (predicate(element)) return element\n    }\n    return null\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n */\npublic inline fun ShortArray.lastOrNull(predicate: (Short) -> Boolean): Short? {\n    for (index in this.indices.reversed()) {\n        val element = this[index]\n        if (predicate(element)) return element\n    }\n    return null\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n */\npublic inline fun IntArray.lastOrNull(predicate: (Int) -> Boolean): Int? {\n    for (index in this.indices.reversed()) {\n        val element = this[index]\n        if (predicate(element)) return element\n    }\n    return null\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n */\npublic inline fun LongArray.lastOrNull(predicate: (Long) -> Boolean): Long? {\n    for (index in this.indices.reversed()) {\n        val element = this[index]\n        if (predicate(element)) return element\n    }\n    return null\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n */\npublic inline fun FloatArray.lastOrNull(predicate: (Float) -> Boolean): Float? {\n    for (index in this.indices.reversed()) {\n        val element = this[index]\n        if (predicate(element)) return element\n    }\n    return null\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n */\npublic inline fun DoubleArray.lastOrNull(predicate: (Double) -> Boolean): Double? {\n    for (index in this.indices.reversed()) {\n        val element = this[index]\n        if (predicate(element)) return element\n    }\n    return null\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n */\npublic inline fun BooleanArray.lastOrNull(predicate: (Boolean) -> Boolean): Boolean? {\n    for (index in this.indices.reversed()) {\n        val element = this[index]\n        if (predicate(element)) return element\n    }\n    return null\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n */\npublic inline fun CharArray.lastOrNull(predicate: (Char) -> Boolean): Char? {\n    for (index in this.indices.reversed()) {\n        val element = this[index]\n        if (predicate(element)) return element\n    }\n    return null\n}\n\n/**\n * Returns the single element, or throws an exception if the array is empty or has more than one element.\n */\npublic fun <T> Array<out T>.single(): T {\n    return when (size) {\n        0 -> throw NoSuchElementException(\"Array is empty.\")\n        1 -> this[0]\n        else -> throw IllegalArgumentException(\"Array has more than one element.\")\n    }\n}\n\n/**\n * Returns the single element, or throws an exception if the array is empty or has more than one element.\n */\npublic fun ByteArray.single(): Byte {\n    return when (size) {\n        0 -> throw NoSuchElementException(\"Array is empty.\")\n        1 -> this[0]\n        else -> throw IllegalArgumentException(\"Array has more than one element.\")\n    }\n}\n\n/**\n * Returns the single element, or throws an exception if the array is empty or has more than one element.\n */\npublic fun ShortArray.single(): Short {\n    return when (size) {\n        0 -> throw NoSuchElementException(\"Array is empty.\")\n        1 -> this[0]\n        else -> throw IllegalArgumentException(\"Array has more than one element.\")\n    }\n}\n\n/**\n * Returns the single element, or throws an exception if the array is empty or has more than one element.\n */\npublic fun IntArray.single(): Int {\n    return when (size) {\n        0 -> throw NoSuchElementException(\"Array is empty.\")\n        1 -> this[0]\n        else -> throw IllegalArgumentException(\"Array has more than one element.\")\n    }\n}\n\n/**\n * Returns the single element, or throws an exception if the array is empty or has more than one element.\n */\npublic fun LongArray.single(): Long {\n    return when (size) {\n        0 -> throw NoSuchElementException(\"Array is empty.\")\n        1 -> this[0]\n        else -> throw IllegalArgumentException(\"Array has more than one element.\")\n    }\n}\n\n/**\n * Returns the single element, or throws an exception if the array is empty or has more than one element.\n */\npublic fun FloatArray.single(): Float {\n    return when (size) {\n        0 -> throw NoSuchElementException(\"Array is empty.\")\n        1 -> this[0]\n        else -> throw IllegalArgumentException(\"Array has more than one element.\")\n    }\n}\n\n/**\n * Returns the single element, or throws an exception if the array is empty or has more than one element.\n */\npublic fun DoubleArray.single(): Double {\n    return when (size) {\n        0 -> throw NoSuchElementException(\"Array is empty.\")\n        1 -> this[0]\n        else -> throw IllegalArgumentException(\"Array has more than one element.\")\n    }\n}\n\n/**\n * Returns the single element, or throws an exception if the array is empty or has more than one element.\n */\npublic fun BooleanArray.single(): Boolean {\n    return when (size) {\n        0 -> throw NoSuchElementException(\"Array is empty.\")\n        1 -> this[0]\n        else -> throw IllegalArgumentException(\"Array has more than one element.\")\n    }\n}\n\n/**\n * Returns the single element, or throws an exception if the array is empty or has more than one element.\n */\npublic fun CharArray.single(): Char {\n    return when (size) {\n        0 -> throw NoSuchElementException(\"Array is empty.\")\n        1 -> this[0]\n        else -> throw IllegalArgumentException(\"Array has more than one element.\")\n    }\n}\n\n/**\n * Returns the single element matching the given [predicate], or throws exception if there is no or more than one matching element.\n */\npublic inline fun <T> Array<out T>.single(predicate: (T) -> Boolean): T {\n    var single: T? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) throw IllegalArgumentException(\"Array contains more than one matching element.\")\n            single = element\n            found = true\n        }\n    }\n    if (!found) throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n    @Suppress(\"UNCHECKED_CAST\")\n    return single as T\n}\n\n/**\n * Returns the single element matching the given [predicate], or throws exception if there is no or more than one matching element.\n */\npublic inline fun ByteArray.single(predicate: (Byte) -> Boolean): Byte {\n    var single: Byte? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) throw IllegalArgumentException(\"Array contains more than one matching element.\")\n            single = element\n            found = true\n        }\n    }\n    if (!found) throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n    @Suppress(\"UNCHECKED_CAST\")\n    return single as Byte\n}\n\n/**\n * Returns the single element matching the given [predicate], or throws exception if there is no or more than one matching element.\n */\npublic inline fun ShortArray.single(predicate: (Short) -> Boolean): Short {\n    var single: Short? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) throw IllegalArgumentException(\"Array contains more than one matching element.\")\n            single = element\n            found = true\n        }\n    }\n    if (!found) throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n    @Suppress(\"UNCHECKED_CAST\")\n    return single as Short\n}\n\n/**\n * Returns the single element matching the given [predicate], or throws exception if there is no or more than one matching element.\n */\npublic inline fun IntArray.single(predicate: (Int) -> Boolean): Int {\n    var single: Int? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) throw IllegalArgumentException(\"Array contains more than one matching element.\")\n            single = element\n            found = true\n        }\n    }\n    if (!found) throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n    @Suppress(\"UNCHECKED_CAST\")\n    return single as Int\n}\n\n/**\n * Returns the single element matching the given [predicate], or throws exception if there is no or more than one matching element.\n */\npublic inline fun LongArray.single(predicate: (Long) -> Boolean): Long {\n    var single: Long? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) throw IllegalArgumentException(\"Array contains more than one matching element.\")\n            single = element\n            found = true\n        }\n    }\n    if (!found) throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n    @Suppress(\"UNCHECKED_CAST\")\n    return single as Long\n}\n\n/**\n * Returns the single element matching the given [predicate], or throws exception if there is no or more than one matching element.\n */\npublic inline fun FloatArray.single(predicate: (Float) -> Boolean): Float {\n    var single: Float? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) throw IllegalArgumentException(\"Array contains more than one matching element.\")\n            single = element\n            found = true\n        }\n    }\n    if (!found) throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n    @Suppress(\"UNCHECKED_CAST\")\n    return single as Float\n}\n\n/**\n * Returns the single element matching the given [predicate], or throws exception if there is no or more than one matching element.\n */\npublic inline fun DoubleArray.single(predicate: (Double) -> Boolean): Double {\n    var single: Double? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) throw IllegalArgumentException(\"Array contains more than one matching element.\")\n            single = element\n            found = true\n        }\n    }\n    if (!found) throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n    @Suppress(\"UNCHECKED_CAST\")\n    return single as Double\n}\n\n/**\n * Returns the single element matching the given [predicate], or throws exception if there is no or more than one matching element.\n */\npublic inline fun BooleanArray.single(predicate: (Boolean) -> Boolean): Boolean {\n    var single: Boolean? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) throw IllegalArgumentException(\"Array contains more than one matching element.\")\n            single = element\n            found = true\n        }\n    }\n    if (!found) throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n    @Suppress(\"UNCHECKED_CAST\")\n    return single as Boolean\n}\n\n/**\n * Returns the single element matching the given [predicate], or throws exception if there is no or more than one matching element.\n */\npublic inline fun CharArray.single(predicate: (Char) -> Boolean): Char {\n    var single: Char? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) throw IllegalArgumentException(\"Array contains more than one matching element.\")\n            single = element\n            found = true\n        }\n    }\n    if (!found) throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n    @Suppress(\"UNCHECKED_CAST\")\n    return single as Char\n}\n\n/**\n * Returns single element, or `null` if the array is empty or has more than one element.\n */\npublic fun <T> Array<out T>.singleOrNull(): T? {\n    return if (size == 1) this[0] else null\n}\n\n/**\n * Returns single element, or `null` if the array is empty or has more than one element.\n */\npublic fun ByteArray.singleOrNull(): Byte? {\n    return if (size == 1) this[0] else null\n}\n\n/**\n * Returns single element, or `null` if the array is empty or has more than one element.\n */\npublic fun ShortArray.singleOrNull(): Short? {\n    return if (size == 1) this[0] else null\n}\n\n/**\n * Returns single element, or `null` if the array is empty or has more than one element.\n */\npublic fun IntArray.singleOrNull(): Int? {\n    return if (size == 1) this[0] else null\n}\n\n/**\n * Returns single element, or `null` if the array is empty or has more than one element.\n */\npublic fun LongArray.singleOrNull(): Long? {\n    return if (size == 1) this[0] else null\n}\n\n/**\n * Returns single element, or `null` if the array is empty or has more than one element.\n */\npublic fun FloatArray.singleOrNull(): Float? {\n    return if (size == 1) this[0] else null\n}\n\n/**\n * Returns single element, or `null` if the array is empty or has more than one element.\n */\npublic fun DoubleArray.singleOrNull(): Double? {\n    return if (size == 1) this[0] else null\n}\n\n/**\n * Returns single element, or `null` if the array is empty or has more than one element.\n */\npublic fun BooleanArray.singleOrNull(): Boolean? {\n    return if (size == 1) this[0] else null\n}\n\n/**\n * Returns single element, or `null` if the array is empty or has more than one element.\n */\npublic fun CharArray.singleOrNull(): Char? {\n    return if (size == 1) this[0] else null\n}\n\n/**\n * Returns the single element matching the given [predicate], or `null` if element was not found or more than one element was found.\n */\npublic inline fun <T> Array<out T>.singleOrNull(predicate: (T) -> Boolean): T? {\n    var single: T? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) return null\n            single = element\n            found = true\n        }\n    }\n    if (!found) return null\n    return single\n}\n\n/**\n * Returns the single element matching the given [predicate], or `null` if element was not found or more than one element was found.\n */\npublic inline fun ByteArray.singleOrNull(predicate: (Byte) -> Boolean): Byte? {\n    var single: Byte? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) return null\n            single = element\n            found = true\n        }\n    }\n    if (!found) return null\n    return single\n}\n\n/**\n * Returns the single element matching the given [predicate], or `null` if element was not found or more than one element was found.\n */\npublic inline fun ShortArray.singleOrNull(predicate: (Short) -> Boolean): Short? {\n    var single: Short? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) return null\n            single = element\n            found = true\n        }\n    }\n    if (!found) return null\n    return single\n}\n\n/**\n * Returns the single element matching the given [predicate], or `null` if element was not found or more than one element was found.\n */\npublic inline fun IntArray.singleOrNull(predicate: (Int) -> Boolean): Int? {\n    var single: Int? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) return null\n            single = element\n            found = true\n        }\n    }\n    if (!found) return null\n    return single\n}\n\n/**\n * Returns the single element matching the given [predicate], or `null` if element was not found or more than one element was found.\n */\npublic inline fun LongArray.singleOrNull(predicate: (Long) -> Boolean): Long? {\n    var single: Long? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) return null\n            single = element\n            found = true\n        }\n    }\n    if (!found) return null\n    return single\n}\n\n/**\n * Returns the single element matching the given [predicate], or `null` if element was not found or more than one element was found.\n */\npublic inline fun FloatArray.singleOrNull(predicate: (Float) -> Boolean): Float? {\n    var single: Float? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) return null\n            single = element\n            found = true\n        }\n    }\n    if (!found) return null\n    return single\n}\n\n/**\n * Returns the single element matching the given [predicate], or `null` if element was not found or more than one element was found.\n */\npublic inline fun DoubleArray.singleOrNull(predicate: (Double) -> Boolean): Double? {\n    var single: Double? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) return null\n            single = element\n            found = true\n        }\n    }\n    if (!found) return null\n    return single\n}\n\n/**\n * Returns the single element matching the given [predicate], or `null` if element was not found or more than one element was found.\n */\npublic inline fun BooleanArray.singleOrNull(predicate: (Boolean) -> Boolean): Boolean? {\n    var single: Boolean? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) return null\n            single = element\n            found = true\n        }\n    }\n    if (!found) return null\n    return single\n}\n\n/**\n * Returns the single element matching the given [predicate], or `null` if element was not found or more than one element was found.\n */\npublic inline fun CharArray.singleOrNull(predicate: (Char) -> Boolean): Char? {\n    var single: Char? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) return null\n            single = element\n            found = true\n        }\n    }\n    if (!found) return null\n    return single\n}\n\n/**\n * Returns a list containing all elements except first [n] elements.\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic fun <T> Array<out T>.drop(n: Int): List<T> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    return takeLast((size - n).coerceAtLeast(0))\n}\n\n/**\n * Returns a list containing all elements except first [n] elements.\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic fun ByteArray.drop(n: Int): List<Byte> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    return takeLast((size - n).coerceAtLeast(0))\n}\n\n/**\n * Returns a list containing all elements except first [n] elements.\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic fun ShortArray.drop(n: Int): List<Short> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    return takeLast((size - n).coerceAtLeast(0))\n}\n\n/**\n * Returns a list containing all elements except first [n] elements.\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic fun IntArray.drop(n: Int): List<Int> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    return takeLast((size - n).coerceAtLeast(0))\n}\n\n/**\n * Returns a list containing all elements except first [n] elements.\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic fun LongArray.drop(n: Int): List<Long> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    return takeLast((size - n).coerceAtLeast(0))\n}\n\n/**\n * Returns a list containing all elements except first [n] elements.\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic fun FloatArray.drop(n: Int): List<Float> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    return takeLast((size - n).coerceAtLeast(0))\n}\n\n/**\n * Returns a list containing all elements except first [n] elements.\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic fun DoubleArray.drop(n: Int): List<Double> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    return takeLast((size - n).coerceAtLeast(0))\n}\n\n/**\n * Returns a list containing all elements except first [n] elements.\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic fun BooleanArray.drop(n: Int): List<Boolean> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    return takeLast((size - n).coerceAtLeast(0))\n}\n\n/**\n * Returns a list containing all elements except first [n] elements.\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic fun CharArray.drop(n: Int): List<Char> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    return takeLast((size - n).coerceAtLeast(0))\n}\n\n/**\n * Returns a list containing all elements except last [n] elements.\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic fun <T> Array<out T>.dropLast(n: Int): List<T> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    return take((size - n).coerceAtLeast(0))\n}\n\n/**\n * Returns a list containing all elements except last [n] elements.\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic fun ByteArray.dropLast(n: Int): List<Byte> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    return take((size - n).coerceAtLeast(0))\n}\n\n/**\n * Returns a list containing all elements except last [n] elements.\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic fun ShortArray.dropLast(n: Int): List<Short> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    return take((size - n).coerceAtLeast(0))\n}\n\n/**\n * Returns a list containing all elements except last [n] elements.\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic fun IntArray.dropLast(n: Int): List<Int> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    return take((size - n).coerceAtLeast(0))\n}\n\n/**\n * Returns a list containing all elements except last [n] elements.\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic fun LongArray.dropLast(n: Int): List<Long> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    return take((size - n).coerceAtLeast(0))\n}\n\n/**\n * Returns a list containing all elements except last [n] elements.\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic fun FloatArray.dropLast(n: Int): List<Float> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    return take((size - n).coerceAtLeast(0))\n}\n\n/**\n * Returns a list containing all elements except last [n] elements.\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic fun DoubleArray.dropLast(n: Int): List<Double> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    return take((size - n).coerceAtLeast(0))\n}\n\n/**\n * Returns a list containing all elements except last [n] elements.\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic fun BooleanArray.dropLast(n: Int): List<Boolean> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    return take((size - n).coerceAtLeast(0))\n}\n\n/**\n * Returns a list containing all elements except last [n] elements.\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic fun CharArray.dropLast(n: Int): List<Char> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    return take((size - n).coerceAtLeast(0))\n}\n\n/**\n * Returns a list containing all elements except last elements that satisfy the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic inline fun <T> Array<out T>.dropLastWhile(predicate: (T) -> Boolean): List<T> {\n    for (index in lastIndex downTo 0) {\n        if (!predicate(this[index])) {\n            return take(index + 1)\n        }\n    }\n    return emptyList()\n}\n\n/**\n * Returns a list containing all elements except last elements that satisfy the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic inline fun ByteArray.dropLastWhile(predicate: (Byte) -> Boolean): List<Byte> {\n    for (index in lastIndex downTo 0) {\n        if (!predicate(this[index])) {\n            return take(index + 1)\n        }\n    }\n    return emptyList()\n}\n\n/**\n * Returns a list containing all elements except last elements that satisfy the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic inline fun ShortArray.dropLastWhile(predicate: (Short) -> Boolean): List<Short> {\n    for (index in lastIndex downTo 0) {\n        if (!predicate(this[index])) {\n            return take(index + 1)\n        }\n    }\n    return emptyList()\n}\n\n/**\n * Returns a list containing all elements except last elements that satisfy the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic inline fun IntArray.dropLastWhile(predicate: (Int) -> Boolean): List<Int> {\n    for (index in lastIndex downTo 0) {\n        if (!predicate(this[index])) {\n            return take(index + 1)\n        }\n    }\n    return emptyList()\n}\n\n/**\n * Returns a list containing all elements except last elements that satisfy the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic inline fun LongArray.dropLastWhile(predicate: (Long) -> Boolean): List<Long> {\n    for (index in lastIndex downTo 0) {\n        if (!predicate(this[index])) {\n            return take(index + 1)\n        }\n    }\n    return emptyList()\n}\n\n/**\n * Returns a list containing all elements except last elements that satisfy the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic inline fun FloatArray.dropLastWhile(predicate: (Float) -> Boolean): List<Float> {\n    for (index in lastIndex downTo 0) {\n        if (!predicate(this[index])) {\n            return take(index + 1)\n        }\n    }\n    return emptyList()\n}\n\n/**\n * Returns a list containing all elements except last elements that satisfy the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic inline fun DoubleArray.dropLastWhile(predicate: (Double) -> Boolean): List<Double> {\n    for (index in lastIndex downTo 0) {\n        if (!predicate(this[index])) {\n            return take(index + 1)\n        }\n    }\n    return emptyList()\n}\n\n/**\n * Returns a list containing all elements except last elements that satisfy the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic inline fun BooleanArray.dropLastWhile(predicate: (Boolean) -> Boolean): List<Boolean> {\n    for (index in lastIndex downTo 0) {\n        if (!predicate(this[index])) {\n            return take(index + 1)\n        }\n    }\n    return emptyList()\n}\n\n/**\n * Returns a list containing all elements except last elements that satisfy the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic inline fun CharArray.dropLastWhile(predicate: (Char) -> Boolean): List<Char> {\n    for (index in lastIndex downTo 0) {\n        if (!predicate(this[index])) {\n            return take(index + 1)\n        }\n    }\n    return emptyList()\n}\n\n/**\n * Returns a list containing all elements except first elements that satisfy the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic inline fun <T> Array<out T>.dropWhile(predicate: (T) -> Boolean): List<T> {\n    var yielding = false\n    val list = ArrayList<T>()\n    for (item in this)\n        if (yielding)\n            list.add(item)\n        else if (!predicate(item)) {\n            list.add(item)\n            yielding = true\n        }\n    return list\n}\n\n/**\n * Returns a list containing all elements except first elements that satisfy the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic inline fun ByteArray.dropWhile(predicate: (Byte) -> Boolean): List<Byte> {\n    var yielding = false\n    val list = ArrayList<Byte>()\n    for (item in this)\n        if (yielding)\n            list.add(item)\n        else if (!predicate(item)) {\n            list.add(item)\n            yielding = true\n        }\n    return list\n}\n\n/**\n * Returns a list containing all elements except first elements that satisfy the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic inline fun ShortArray.dropWhile(predicate: (Short) -> Boolean): List<Short> {\n    var yielding = false\n    val list = ArrayList<Short>()\n    for (item in this)\n        if (yielding)\n            list.add(item)\n        else if (!predicate(item)) {\n            list.add(item)\n            yielding = true\n        }\n    return list\n}\n\n/**\n * Returns a list containing all elements except first elements that satisfy the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic inline fun IntArray.dropWhile(predicate: (Int) -> Boolean): List<Int> {\n    var yielding = false\n    val list = ArrayList<Int>()\n    for (item in this)\n        if (yielding)\n            list.add(item)\n        else if (!predicate(item)) {\n            list.add(item)\n            yielding = true\n        }\n    return list\n}\n\n/**\n * Returns a list containing all elements except first elements that satisfy the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic inline fun LongArray.dropWhile(predicate: (Long) -> Boolean): List<Long> {\n    var yielding = false\n    val list = ArrayList<Long>()\n    for (item in this)\n        if (yielding)\n            list.add(item)\n        else if (!predicate(item)) {\n            list.add(item)\n            yielding = true\n        }\n    return list\n}\n\n/**\n * Returns a list containing all elements except first elements that satisfy the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic inline fun FloatArray.dropWhile(predicate: (Float) -> Boolean): List<Float> {\n    var yielding = false\n    val list = ArrayList<Float>()\n    for (item in this)\n        if (yielding)\n            list.add(item)\n        else if (!predicate(item)) {\n            list.add(item)\n            yielding = true\n        }\n    return list\n}\n\n/**\n * Returns a list containing all elements except first elements that satisfy the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic inline fun DoubleArray.dropWhile(predicate: (Double) -> Boolean): List<Double> {\n    var yielding = false\n    val list = ArrayList<Double>()\n    for (item in this)\n        if (yielding)\n            list.add(item)\n        else if (!predicate(item)) {\n            list.add(item)\n            yielding = true\n        }\n    return list\n}\n\n/**\n * Returns a list containing all elements except first elements that satisfy the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic inline fun BooleanArray.dropWhile(predicate: (Boolean) -> Boolean): List<Boolean> {\n    var yielding = false\n    val list = ArrayList<Boolean>()\n    for (item in this)\n        if (yielding)\n            list.add(item)\n        else if (!predicate(item)) {\n            list.add(item)\n            yielding = true\n        }\n    return list\n}\n\n/**\n * Returns a list containing all elements except first elements that satisfy the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic inline fun CharArray.dropWhile(predicate: (Char) -> Boolean): List<Char> {\n    var yielding = false\n    val list = ArrayList<Char>()\n    for (item in this)\n        if (yielding)\n            list.add(item)\n        else if (!predicate(item)) {\n            list.add(item)\n            yielding = true\n        }\n    return list\n}\n\n/**\n * Returns a list containing only elements matching the given [predicate].\n */\npublic inline fun <T> Array<out T>.filter(predicate: (T) -> Boolean): List<T> {\n    return filterTo(ArrayList<T>(), predicate)\n}\n\n/**\n * Returns a list containing only elements matching the given [predicate].\n */\npublic inline fun ByteArray.filter(predicate: (Byte) -> Boolean): List<Byte> {\n    return filterTo(ArrayList<Byte>(), predicate)\n}\n\n/**\n * Returns a list containing only elements matching the given [predicate].\n */\npublic inline fun ShortArray.filter(predicate: (Short) -> Boolean): List<Short> {\n    return filterTo(ArrayList<Short>(), predicate)\n}\n\n/**\n * Returns a list containing only elements matching the given [predicate].\n */\npublic inline fun IntArray.filter(predicate: (Int) -> Boolean): List<Int> {\n    return filterTo(ArrayList<Int>(), predicate)\n}\n\n/**\n * Returns a list containing only elements matching the given [predicate].\n */\npublic inline fun LongArray.filter(predicate: (Long) -> Boolean): List<Long> {\n    return filterTo(ArrayList<Long>(), predicate)\n}\n\n/**\n * Returns a list containing only elements matching the given [predicate].\n */\npublic inline fun FloatArray.filter(predicate: (Float) -> Boolean): List<Float> {\n    return filterTo(ArrayList<Float>(), predicate)\n}\n\n/**\n * Returns a list containing only elements matching the given [predicate].\n */\npublic inline fun DoubleArray.filter(predicate: (Double) -> Boolean): List<Double> {\n    return filterTo(ArrayList<Double>(), predicate)\n}\n\n/**\n * Returns a list containing only elements matching the given [predicate].\n */\npublic inline fun BooleanArray.filter(predicate: (Boolean) -> Boolean): List<Boolean> {\n    return filterTo(ArrayList<Boolean>(), predicate)\n}\n\n/**\n * Returns a list containing only elements matching the given [predicate].\n */\npublic inline fun CharArray.filter(predicate: (Char) -> Boolean): List<Char> {\n    return filterTo(ArrayList<Char>(), predicate)\n}\n\n/**\n * Returns a list containing only elements matching the given [predicate].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n */\npublic inline fun <T> Array<out T>.filterIndexed(predicate: (index: Int, T) -> Boolean): List<T> {\n    return filterIndexedTo(ArrayList<T>(), predicate)\n}\n\n/**\n * Returns a list containing only elements matching the given [predicate].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n */\npublic inline fun ByteArray.filterIndexed(predicate: (index: Int, Byte) -> Boolean): List<Byte> {\n    return filterIndexedTo(ArrayList<Byte>(), predicate)\n}\n\n/**\n * Returns a list containing only elements matching the given [predicate].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n */\npublic inline fun ShortArray.filterIndexed(predicate: (index: Int, Short) -> Boolean): List<Short> {\n    return filterIndexedTo(ArrayList<Short>(), predicate)\n}\n\n/**\n * Returns a list containing only elements matching the given [predicate].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n */\npublic inline fun IntArray.filterIndexed(predicate: (index: Int, Int) -> Boolean): List<Int> {\n    return filterIndexedTo(ArrayList<Int>(), predicate)\n}\n\n/**\n * Returns a list containing only elements matching the given [predicate].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n */\npublic inline fun LongArray.filterIndexed(predicate: (index: Int, Long) -> Boolean): List<Long> {\n    return filterIndexedTo(ArrayList<Long>(), predicate)\n}\n\n/**\n * Returns a list containing only elements matching the given [predicate].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n */\npublic inline fun FloatArray.filterIndexed(predicate: (index: Int, Float) -> Boolean): List<Float> {\n    return filterIndexedTo(ArrayList<Float>(), predicate)\n}\n\n/**\n * Returns a list containing only elements matching the given [predicate].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n */\npublic inline fun DoubleArray.filterIndexed(predicate: (index: Int, Double) -> Boolean): List<Double> {\n    return filterIndexedTo(ArrayList<Double>(), predicate)\n}\n\n/**\n * Returns a list containing only elements matching the given [predicate].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n */\npublic inline fun BooleanArray.filterIndexed(predicate: (index: Int, Boolean) -> Boolean): List<Boolean> {\n    return filterIndexedTo(ArrayList<Boolean>(), predicate)\n}\n\n/**\n * Returns a list containing only elements matching the given [predicate].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n */\npublic inline fun CharArray.filterIndexed(predicate: (index: Int, Char) -> Boolean): List<Char> {\n    return filterIndexedTo(ArrayList<Char>(), predicate)\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n */\npublic inline fun <T, C : MutableCollection<in T>> Array<out T>.filterIndexedTo(destination: C, predicate: (index: Int, T) -> Boolean): C {\n    forEachIndexed { index, element ->\n        if (predicate(index, element)) destination.add(element)\n    }\n    return destination\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n */\npublic inline fun <C : MutableCollection<in Byte>> ByteArray.filterIndexedTo(destination: C, predicate: (index: Int, Byte) -> Boolean): C {\n    forEachIndexed { index, element ->\n        if (predicate(index, element)) destination.add(element)\n    }\n    return destination\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n */\npublic inline fun <C : MutableCollection<in Short>> ShortArray.filterIndexedTo(destination: C, predicate: (index: Int, Short) -> Boolean): C {\n    forEachIndexed { index, element ->\n        if (predicate(index, element)) destination.add(element)\n    }\n    return destination\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n */\npublic inline fun <C : MutableCollection<in Int>> IntArray.filterIndexedTo(destination: C, predicate: (index: Int, Int) -> Boolean): C {\n    forEachIndexed { index, element ->\n        if (predicate(index, element)) destination.add(element)\n    }\n    return destination\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n */\npublic inline fun <C : MutableCollection<in Long>> LongArray.filterIndexedTo(destination: C, predicate: (index: Int, Long) -> Boolean): C {\n    forEachIndexed { index, element ->\n        if (predicate(index, element)) destination.add(element)\n    }\n    return destination\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n */\npublic inline fun <C : MutableCollection<in Float>> FloatArray.filterIndexedTo(destination: C, predicate: (index: Int, Float) -> Boolean): C {\n    forEachIndexed { index, element ->\n        if (predicate(index, element)) destination.add(element)\n    }\n    return destination\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n */\npublic inline fun <C : MutableCollection<in Double>> DoubleArray.filterIndexedTo(destination: C, predicate: (index: Int, Double) -> Boolean): C {\n    forEachIndexed { index, element ->\n        if (predicate(index, element)) destination.add(element)\n    }\n    return destination\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n */\npublic inline fun <C : MutableCollection<in Boolean>> BooleanArray.filterIndexedTo(destination: C, predicate: (index: Int, Boolean) -> Boolean): C {\n    forEachIndexed { index, element ->\n        if (predicate(index, element)) destination.add(element)\n    }\n    return destination\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n */\npublic inline fun <C : MutableCollection<in Char>> CharArray.filterIndexedTo(destination: C, predicate: (index: Int, Char) -> Boolean): C {\n    forEachIndexed { index, element ->\n        if (predicate(index, element)) destination.add(element)\n    }\n    return destination\n}\n\n/**\n * Returns a list containing all elements that are instances of specified type parameter R.\n */\npublic inline fun <reified R> Array<*>.filterIsInstance(): List<@kotlin.internal.NoInfer R> {\n    return filterIsInstanceTo(ArrayList<R>())\n}\n\n/**\n * Appends all elements that are instances of specified type parameter R to the given [destination].\n */\npublic inline fun <reified R, C : MutableCollection<in R>> Array<*>.filterIsInstanceTo(destination: C): C {\n    for (element in this) if (element is R) destination.add(element)\n    return destination\n}\n\n/**\n * Returns a list containing all elements not matching the given [predicate].\n */\npublic inline fun <T> Array<out T>.filterNot(predicate: (T) -> Boolean): List<T> {\n    return filterNotTo(ArrayList<T>(), predicate)\n}\n\n/**\n * Returns a list containing all elements not matching the given [predicate].\n */\npublic inline fun ByteArray.filterNot(predicate: (Byte) -> Boolean): List<Byte> {\n    return filterNotTo(ArrayList<Byte>(), predicate)\n}\n\n/**\n * Returns a list containing all elements not matching the given [predicate].\n */\npublic inline fun ShortArray.filterNot(predicate: (Short) -> Boolean): List<Short> {\n    return filterNotTo(ArrayList<Short>(), predicate)\n}\n\n/**\n * Returns a list containing all elements not matching the given [predicate].\n */\npublic inline fun IntArray.filterNot(predicate: (Int) -> Boolean): List<Int> {\n    return filterNotTo(ArrayList<Int>(), predicate)\n}\n\n/**\n * Returns a list containing all elements not matching the given [predicate].\n */\npublic inline fun LongArray.filterNot(predicate: (Long) -> Boolean): List<Long> {\n    return filterNotTo(ArrayList<Long>(), predicate)\n}\n\n/**\n * Returns a list containing all elements not matching the given [predicate].\n */\npublic inline fun FloatArray.filterNot(predicate: (Float) -> Boolean): List<Float> {\n    return filterNotTo(ArrayList<Float>(), predicate)\n}\n\n/**\n * Returns a list containing all elements not matching the given [predicate].\n */\npublic inline fun DoubleArray.filterNot(predicate: (Double) -> Boolean): List<Double> {\n    return filterNotTo(ArrayList<Double>(), predicate)\n}\n\n/**\n * Returns a list containing all elements not matching the given [predicate].\n */\npublic inline fun BooleanArray.filterNot(predicate: (Boolean) -> Boolean): List<Boolean> {\n    return filterNotTo(ArrayList<Boolean>(), predicate)\n}\n\n/**\n * Returns a list containing all elements not matching the given [predicate].\n */\npublic inline fun CharArray.filterNot(predicate: (Char) -> Boolean): List<Char> {\n    return filterNotTo(ArrayList<Char>(), predicate)\n}\n\n/**\n * Returns a list containing all elements that are not `null`.\n */\npublic fun <T : Any> Array<out T?>.filterNotNull(): List<T> {\n    return filterNotNullTo(ArrayList<T>())\n}\n\n/**\n * Appends all elements that are not `null` to the given [destination].\n */\npublic fun <C : MutableCollection<in T>, T : Any> Array<out T?>.filterNotNullTo(destination: C): C {\n    for (element in this) if (element != null) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements not matching the given [predicate] to the given [destination].\n */\npublic inline fun <T, C : MutableCollection<in T>> Array<out T>.filterNotTo(destination: C, predicate: (T) -> Boolean): C {\n    for (element in this) if (!predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements not matching the given [predicate] to the given [destination].\n */\npublic inline fun <C : MutableCollection<in Byte>> ByteArray.filterNotTo(destination: C, predicate: (Byte) -> Boolean): C {\n    for (element in this) if (!predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements not matching the given [predicate] to the given [destination].\n */\npublic inline fun <C : MutableCollection<in Short>> ShortArray.filterNotTo(destination: C, predicate: (Short) -> Boolean): C {\n    for (element in this) if (!predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements not matching the given [predicate] to the given [destination].\n */\npublic inline fun <C : MutableCollection<in Int>> IntArray.filterNotTo(destination: C, predicate: (Int) -> Boolean): C {\n    for (element in this) if (!predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements not matching the given [predicate] to the given [destination].\n */\npublic inline fun <C : MutableCollection<in Long>> LongArray.filterNotTo(destination: C, predicate: (Long) -> Boolean): C {\n    for (element in this) if (!predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements not matching the given [predicate] to the given [destination].\n */\npublic inline fun <C : MutableCollection<in Float>> FloatArray.filterNotTo(destination: C, predicate: (Float) -> Boolean): C {\n    for (element in this) if (!predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements not matching the given [predicate] to the given [destination].\n */\npublic inline fun <C : MutableCollection<in Double>> DoubleArray.filterNotTo(destination: C, predicate: (Double) -> Boolean): C {\n    for (element in this) if (!predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements not matching the given [predicate] to the given [destination].\n */\npublic inline fun <C : MutableCollection<in Boolean>> BooleanArray.filterNotTo(destination: C, predicate: (Boolean) -> Boolean): C {\n    for (element in this) if (!predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements not matching the given [predicate] to the given [destination].\n */\npublic inline fun <C : MutableCollection<in Char>> CharArray.filterNotTo(destination: C, predicate: (Char) -> Boolean): C {\n    for (element in this) if (!predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n */\npublic inline fun <T, C : MutableCollection<in T>> Array<out T>.filterTo(destination: C, predicate: (T) -> Boolean): C {\n    for (element in this) if (predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n */\npublic inline fun <C : MutableCollection<in Byte>> ByteArray.filterTo(destination: C, predicate: (Byte) -> Boolean): C {\n    for (element in this) if (predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n */\npublic inline fun <C : MutableCollection<in Short>> ShortArray.filterTo(destination: C, predicate: (Short) -> Boolean): C {\n    for (element in this) if (predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n */\npublic inline fun <C : MutableCollection<in Int>> IntArray.filterTo(destination: C, predicate: (Int) -> Boolean): C {\n    for (element in this) if (predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n */\npublic inline fun <C : MutableCollection<in Long>> LongArray.filterTo(destination: C, predicate: (Long) -> Boolean): C {\n    for (element in this) if (predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n */\npublic inline fun <C : MutableCollection<in Float>> FloatArray.filterTo(destination: C, predicate: (Float) -> Boolean): C {\n    for (element in this) if (predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n */\npublic inline fun <C : MutableCollection<in Double>> DoubleArray.filterTo(destination: C, predicate: (Double) -> Boolean): C {\n    for (element in this) if (predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n */\npublic inline fun <C : MutableCollection<in Boolean>> BooleanArray.filterTo(destination: C, predicate: (Boolean) -> Boolean): C {\n    for (element in this) if (predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n */\npublic inline fun <C : MutableCollection<in Char>> CharArray.filterTo(destination: C, predicate: (Char) -> Boolean): C {\n    for (element in this) if (predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Returns a list containing elements at indices in the specified [indices] range.\n */\npublic fun <T> Array<out T>.slice(indices: IntRange): List<T> {\n    if (indices.isEmpty()) return listOf()\n    return copyOfRange(indices.start, indices.endInclusive + 1).asList()\n}\n\n/**\n * Returns a list containing elements at indices in the specified [indices] range.\n */\npublic fun ByteArray.slice(indices: IntRange): List<Byte> {\n    if (indices.isEmpty()) return listOf()\n    return copyOfRange(indices.start, indices.endInclusive + 1).asList()\n}\n\n/**\n * Returns a list containing elements at indices in the specified [indices] range.\n */\npublic fun ShortArray.slice(indices: IntRange): List<Short> {\n    if (indices.isEmpty()) return listOf()\n    return copyOfRange(indices.start, indices.endInclusive + 1).asList()\n}\n\n/**\n * Returns a list containing elements at indices in the specified [indices] range.\n */\npublic fun IntArray.slice(indices: IntRange): List<Int> {\n    if (indices.isEmpty()) return listOf()\n    return copyOfRange(indices.start, indices.endInclusive + 1).asList()\n}\n\n/**\n * Returns a list containing elements at indices in the specified [indices] range.\n */\npublic fun LongArray.slice(indices: IntRange): List<Long> {\n    if (indices.isEmpty()) return listOf()\n    return copyOfRange(indices.start, indices.endInclusive + 1).asList()\n}\n\n/**\n * Returns a list containing elements at indices in the specified [indices] range.\n */\npublic fun FloatArray.slice(indices: IntRange): List<Float> {\n    if (indices.isEmpty()) return listOf()\n    return copyOfRange(indices.start, indices.endInclusive + 1).asList()\n}\n\n/**\n * Returns a list containing elements at indices in the specified [indices] range.\n */\npublic fun DoubleArray.slice(indices: IntRange): List<Double> {\n    if (indices.isEmpty()) return listOf()\n    return copyOfRange(indices.start, indices.endInclusive + 1).asList()\n}\n\n/**\n * Returns a list containing elements at indices in the specified [indices] range.\n */\npublic fun BooleanArray.slice(indices: IntRange): List<Boolean> {\n    if (indices.isEmpty()) return listOf()\n    return copyOfRange(indices.start, indices.endInclusive + 1).asList()\n}\n\n/**\n * Returns a list containing elements at indices in the specified [indices] range.\n */\npublic fun CharArray.slice(indices: IntRange): List<Char> {\n    if (indices.isEmpty()) return listOf()\n    return copyOfRange(indices.start, indices.endInclusive + 1).asList()\n}\n\n/**\n * Returns a list containing elements at specified [indices].\n */\npublic fun <T> Array<out T>.slice(indices: Iterable<Int>): List<T> {\n    val size = indices.collectionSizeOrDefault(10)\n    if (size == 0) return emptyList()\n    val list = ArrayList<T>(size)\n    for (index in indices) {\n        list.add(get(index))\n    }\n    return list\n}\n\n/**\n * Returns a list containing elements at specified [indices].\n */\npublic fun ByteArray.slice(indices: Iterable<Int>): List<Byte> {\n    val size = indices.collectionSizeOrDefault(10)\n    if (size == 0) return emptyList()\n    val list = ArrayList<Byte>(size)\n    for (index in indices) {\n        list.add(get(index))\n    }\n    return list\n}\n\n/**\n * Returns a list containing elements at specified [indices].\n */\npublic fun ShortArray.slice(indices: Iterable<Int>): List<Short> {\n    val size = indices.collectionSizeOrDefault(10)\n    if (size == 0) return emptyList()\n    val list = ArrayList<Short>(size)\n    for (index in indices) {\n        list.add(get(index))\n    }\n    return list\n}\n\n/**\n * Returns a list containing elements at specified [indices].\n */\npublic fun IntArray.slice(indices: Iterable<Int>): List<Int> {\n    val size = indices.collectionSizeOrDefault(10)\n    if (size == 0) return emptyList()\n    val list = ArrayList<Int>(size)\n    for (index in indices) {\n        list.add(get(index))\n    }\n    return list\n}\n\n/**\n * Returns a list containing elements at specified [indices].\n */\npublic fun LongArray.slice(indices: Iterable<Int>): List<Long> {\n    val size = indices.collectionSizeOrDefault(10)\n    if (size == 0) return emptyList()\n    val list = ArrayList<Long>(size)\n    for (index in indices) {\n        list.add(get(index))\n    }\n    return list\n}\n\n/**\n * Returns a list containing elements at specified [indices].\n */\npublic fun FloatArray.slice(indices: Iterable<Int>): List<Float> {\n    val size = indices.collectionSizeOrDefault(10)\n    if (size == 0) return emptyList()\n    val list = ArrayList<Float>(size)\n    for (index in indices) {\n        list.add(get(index))\n    }\n    return list\n}\n\n/**\n * Returns a list containing elements at specified [indices].\n */\npublic fun DoubleArray.slice(indices: Iterable<Int>): List<Double> {\n    val size = indices.collectionSizeOrDefault(10)\n    if (size == 0) return emptyList()\n    val list = ArrayList<Double>(size)\n    for (index in indices) {\n        list.add(get(index))\n    }\n    return list\n}\n\n/**\n * Returns a list containing elements at specified [indices].\n */\npublic fun BooleanArray.slice(indices: Iterable<Int>): List<Boolean> {\n    val size = indices.collectionSizeOrDefault(10)\n    if (size == 0) return emptyList()\n    val list = ArrayList<Boolean>(size)\n    for (index in indices) {\n        list.add(get(index))\n    }\n    return list\n}\n\n/**\n * Returns a list containing elements at specified [indices].\n */\npublic fun CharArray.slice(indices: Iterable<Int>): List<Char> {\n    val size = indices.collectionSizeOrDefault(10)\n    if (size == 0) return emptyList()\n    val list = ArrayList<Char>(size)\n    for (index in indices) {\n        list.add(get(index))\n    }\n    return list\n}\n\n/**\n * Returns an array containing elements of this array at specified [indices].\n */\npublic fun <T> Array<T>.sliceArray(indices: Collection<Int>): Array<T> {\n    val result = arrayOfNulls(this, indices.size)\n    var targetIndex = 0\n    for (sourceIndex in indices) {\n        result[targetIndex++] = this[sourceIndex]\n    }\n    return result\n}\n\n/**\n * Returns an array containing elements of this array at specified [indices].\n */\npublic fun ByteArray.sliceArray(indices: Collection<Int>): ByteArray {\n    val result = ByteArray(indices.size)\n    var targetIndex = 0\n    for (sourceIndex in indices) {\n        result[targetIndex++] = this[sourceIndex]\n    }\n    return result\n}\n\n/**\n * Returns an array containing elements of this array at specified [indices].\n */\npublic fun ShortArray.sliceArray(indices: Collection<Int>): ShortArray {\n    val result = ShortArray(indices.size)\n    var targetIndex = 0\n    for (sourceIndex in indices) {\n        result[targetIndex++] = this[sourceIndex]\n    }\n    return result\n}\n\n/**\n * Returns an array containing elements of this array at specified [indices].\n */\npublic fun IntArray.sliceArray(indices: Collection<Int>): IntArray {\n    val result = IntArray(indices.size)\n    var targetIndex = 0\n    for (sourceIndex in indices) {\n        result[targetIndex++] = this[sourceIndex]\n    }\n    return result\n}\n\n/**\n * Returns an array containing elements of this array at specified [indices].\n */\npublic fun LongArray.sliceArray(indices: Collection<Int>): LongArray {\n    val result = LongArray(indices.size)\n    var targetIndex = 0\n    for (sourceIndex in indices) {\n        result[targetIndex++] = this[sourceIndex]\n    }\n    return result\n}\n\n/**\n * Returns an array containing elements of this array at specified [indices].\n */\npublic fun FloatArray.sliceArray(indices: Collection<Int>): FloatArray {\n    val result = FloatArray(indices.size)\n    var targetIndex = 0\n    for (sourceIndex in indices) {\n        result[targetIndex++] = this[sourceIndex]\n    }\n    return result\n}\n\n/**\n * Returns an array containing elements of this array at specified [indices].\n */\npublic fun DoubleArray.sliceArray(indices: Collection<Int>): DoubleArray {\n    val result = DoubleArray(indices.size)\n    var targetIndex = 0\n    for (sourceIndex in indices) {\n        result[targetIndex++] = this[sourceIndex]\n    }\n    return result\n}\n\n/**\n * Returns an array containing elements of this array at specified [indices].\n */\npublic fun BooleanArray.sliceArray(indices: Collection<Int>): BooleanArray {\n    val result = BooleanArray(indices.size)\n    var targetIndex = 0\n    for (sourceIndex in indices) {\n        result[targetIndex++] = this[sourceIndex]\n    }\n    return result\n}\n\n/**\n * Returns an array containing elements of this array at specified [indices].\n */\npublic fun CharArray.sliceArray(indices: Collection<Int>): CharArray {\n    val result = CharArray(indices.size)\n    var targetIndex = 0\n    for (sourceIndex in indices) {\n        result[targetIndex++] = this[sourceIndex]\n    }\n    return result\n}\n\n/**\n * Returns a list containing elements at indices in the specified [indices] range.\n */\npublic fun <T> Array<T>.sliceArray(indices: IntRange): Array<T> {\n    if (indices.isEmpty()) return copyOfRange(0, 0)\n    return copyOfRange(indices.start, indices.endInclusive + 1)\n}\n\n/**\n * Returns a list containing elements at indices in the specified [indices] range.\n */\npublic fun ByteArray.sliceArray(indices: IntRange): ByteArray {\n    if (indices.isEmpty()) return ByteArray(0)\n    return copyOfRange(indices.start, indices.endInclusive + 1)\n}\n\n/**\n * Returns a list containing elements at indices in the specified [indices] range.\n */\npublic fun ShortArray.sliceArray(indices: IntRange): ShortArray {\n    if (indices.isEmpty()) return ShortArray(0)\n    return copyOfRange(indices.start, indices.endInclusive + 1)\n}\n\n/**\n * Returns a list containing elements at indices in the specified [indices] range.\n */\npublic fun IntArray.sliceArray(indices: IntRange): IntArray {\n    if (indices.isEmpty()) return IntArray(0)\n    return copyOfRange(indices.start, indices.endInclusive + 1)\n}\n\n/**\n * Returns a list containing elements at indices in the specified [indices] range.\n */\npublic fun LongArray.sliceArray(indices: IntRange): LongArray {\n    if (indices.isEmpty()) return LongArray(0)\n    return copyOfRange(indices.start, indices.endInclusive + 1)\n}\n\n/**\n * Returns a list containing elements at indices in the specified [indices] range.\n */\npublic fun FloatArray.sliceArray(indices: IntRange): FloatArray {\n    if (indices.isEmpty()) return FloatArray(0)\n    return copyOfRange(indices.start, indices.endInclusive + 1)\n}\n\n/**\n * Returns a list containing elements at indices in the specified [indices] range.\n */\npublic fun DoubleArray.sliceArray(indices: IntRange): DoubleArray {\n    if (indices.isEmpty()) return DoubleArray(0)\n    return copyOfRange(indices.start, indices.endInclusive + 1)\n}\n\n/**\n * Returns a list containing elements at indices in the specified [indices] range.\n */\npublic fun BooleanArray.sliceArray(indices: IntRange): BooleanArray {\n    if (indices.isEmpty()) return BooleanArray(0)\n    return copyOfRange(indices.start, indices.endInclusive + 1)\n}\n\n/**\n * Returns a list containing elements at indices in the specified [indices] range.\n */\npublic fun CharArray.sliceArray(indices: IntRange): CharArray {\n    if (indices.isEmpty()) return CharArray(0)\n    return copyOfRange(indices.start, indices.endInclusive + 1)\n}\n\n/**\n * Returns a list containing first [n] elements.\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic fun <T> Array<out T>.take(n: Int): List<T> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return emptyList()\n    if (n >= size) return toList()\n    if (n == 1) return listOf(this[0])\n    var count = 0\n    val list = ArrayList<T>(n)\n    for (item in this) {\n        if (count++ == n)\n            break\n        list.add(item)\n    }\n    return list\n}\n\n/**\n * Returns a list containing first [n] elements.\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic fun ByteArray.take(n: Int): List<Byte> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return emptyList()\n    if (n >= size) return toList()\n    if (n == 1) return listOf(this[0])\n    var count = 0\n    val list = ArrayList<Byte>(n)\n    for (item in this) {\n        if (count++ == n)\n            break\n        list.add(item)\n    }\n    return list\n}\n\n/**\n * Returns a list containing first [n] elements.\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic fun ShortArray.take(n: Int): List<Short> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return emptyList()\n    if (n >= size) return toList()\n    if (n == 1) return listOf(this[0])\n    var count = 0\n    val list = ArrayList<Short>(n)\n    for (item in this) {\n        if (count++ == n)\n            break\n        list.add(item)\n    }\n    return list\n}\n\n/**\n * Returns a list containing first [n] elements.\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic fun IntArray.take(n: Int): List<Int> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return emptyList()\n    if (n >= size) return toList()\n    if (n == 1) return listOf(this[0])\n    var count = 0\n    val list = ArrayList<Int>(n)\n    for (item in this) {\n        if (count++ == n)\n            break\n        list.add(item)\n    }\n    return list\n}\n\n/**\n * Returns a list containing first [n] elements.\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic fun LongArray.take(n: Int): List<Long> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return emptyList()\n    if (n >= size) return toList()\n    if (n == 1) return listOf(this[0])\n    var count = 0\n    val list = ArrayList<Long>(n)\n    for (item in this) {\n        if (count++ == n)\n            break\n        list.add(item)\n    }\n    return list\n}\n\n/**\n * Returns a list containing first [n] elements.\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic fun FloatArray.take(n: Int): List<Float> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return emptyList()\n    if (n >= size) return toList()\n    if (n == 1) return listOf(this[0])\n    var count = 0\n    val list = ArrayList<Float>(n)\n    for (item in this) {\n        if (count++ == n)\n            break\n        list.add(item)\n    }\n    return list\n}\n\n/**\n * Returns a list containing first [n] elements.\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic fun DoubleArray.take(n: Int): List<Double> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return emptyList()\n    if (n >= size) return toList()\n    if (n == 1) return listOf(this[0])\n    var count = 0\n    val list = ArrayList<Double>(n)\n    for (item in this) {\n        if (count++ == n)\n            break\n        list.add(item)\n    }\n    return list\n}\n\n/**\n * Returns a list containing first [n] elements.\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic fun BooleanArray.take(n: Int): List<Boolean> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return emptyList()\n    if (n >= size) return toList()\n    if (n == 1) return listOf(this[0])\n    var count = 0\n    val list = ArrayList<Boolean>(n)\n    for (item in this) {\n        if (count++ == n)\n            break\n        list.add(item)\n    }\n    return list\n}\n\n/**\n * Returns a list containing first [n] elements.\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic fun CharArray.take(n: Int): List<Char> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return emptyList()\n    if (n >= size) return toList()\n    if (n == 1) return listOf(this[0])\n    var count = 0\n    val list = ArrayList<Char>(n)\n    for (item in this) {\n        if (count++ == n)\n            break\n        list.add(item)\n    }\n    return list\n}\n\n/**\n * Returns a list containing last [n] elements.\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic fun <T> Array<out T>.takeLast(n: Int): List<T> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return emptyList()\n    val size = size\n    if (n >= size) return toList()\n    if (n == 1) return listOf(this[size - 1])\n    val list = ArrayList<T>(n)\n    for (index in size - n until size)\n        list.add(this[index])\n    return list\n}\n\n/**\n * Returns a list containing last [n] elements.\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic fun ByteArray.takeLast(n: Int): List<Byte> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return emptyList()\n    val size = size\n    if (n >= size) return toList()\n    if (n == 1) return listOf(this[size - 1])\n    val list = ArrayList<Byte>(n)\n    for (index in size - n until size)\n        list.add(this[index])\n    return list\n}\n\n/**\n * Returns a list containing last [n] elements.\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic fun ShortArray.takeLast(n: Int): List<Short> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return emptyList()\n    val size = size\n    if (n >= size) return toList()\n    if (n == 1) return listOf(this[size - 1])\n    val list = ArrayList<Short>(n)\n    for (index in size - n until size)\n        list.add(this[index])\n    return list\n}\n\n/**\n * Returns a list containing last [n] elements.\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic fun IntArray.takeLast(n: Int): List<Int> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return emptyList()\n    val size = size\n    if (n >= size) return toList()\n    if (n == 1) return listOf(this[size - 1])\n    val list = ArrayList<Int>(n)\n    for (index in size - n until size)\n        list.add(this[index])\n    return list\n}\n\n/**\n * Returns a list containing last [n] elements.\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic fun LongArray.takeLast(n: Int): List<Long> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return emptyList()\n    val size = size\n    if (n >= size) return toList()\n    if (n == 1) return listOf(this[size - 1])\n    val list = ArrayList<Long>(n)\n    for (index in size - n until size)\n        list.add(this[index])\n    return list\n}\n\n/**\n * Returns a list containing last [n] elements.\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic fun FloatArray.takeLast(n: Int): List<Float> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return emptyList()\n    val size = size\n    if (n >= size) return toList()\n    if (n == 1) return listOf(this[size - 1])\n    val list = ArrayList<Float>(n)\n    for (index in size - n until size)\n        list.add(this[index])\n    return list\n}\n\n/**\n * Returns a list containing last [n] elements.\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic fun DoubleArray.takeLast(n: Int): List<Double> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return emptyList()\n    val size = size\n    if (n >= size) return toList()\n    if (n == 1) return listOf(this[size - 1])\n    val list = ArrayList<Double>(n)\n    for (index in size - n until size)\n        list.add(this[index])\n    return list\n}\n\n/**\n * Returns a list containing last [n] elements.\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic fun BooleanArray.takeLast(n: Int): List<Boolean> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return emptyList()\n    val size = size\n    if (n >= size) return toList()\n    if (n == 1) return listOf(this[size - 1])\n    val list = ArrayList<Boolean>(n)\n    for (index in size - n until size)\n        list.add(this[index])\n    return list\n}\n\n/**\n * Returns a list containing last [n] elements.\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic fun CharArray.takeLast(n: Int): List<Char> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return emptyList()\n    val size = size\n    if (n >= size) return toList()\n    if (n == 1) return listOf(this[size - 1])\n    val list = ArrayList<Char>(n)\n    for (index in size - n until size)\n        list.add(this[index])\n    return list\n}\n\n/**\n * Returns a list containing last elements satisfying the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic inline fun <T> Array<out T>.takeLastWhile(predicate: (T) -> Boolean): List<T> {\n    for (index in lastIndex downTo 0) {\n        if (!predicate(this[index])) {\n            return drop(index + 1)\n        }\n    }\n    return toList()\n}\n\n/**\n * Returns a list containing last elements satisfying the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic inline fun ByteArray.takeLastWhile(predicate: (Byte) -> Boolean): List<Byte> {\n    for (index in lastIndex downTo 0) {\n        if (!predicate(this[index])) {\n            return drop(index + 1)\n        }\n    }\n    return toList()\n}\n\n/**\n * Returns a list containing last elements satisfying the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic inline fun ShortArray.takeLastWhile(predicate: (Short) -> Boolean): List<Short> {\n    for (index in lastIndex downTo 0) {\n        if (!predicate(this[index])) {\n            return drop(index + 1)\n        }\n    }\n    return toList()\n}\n\n/**\n * Returns a list containing last elements satisfying the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic inline fun IntArray.takeLastWhile(predicate: (Int) -> Boolean): List<Int> {\n    for (index in lastIndex downTo 0) {\n        if (!predicate(this[index])) {\n            return drop(index + 1)\n        }\n    }\n    return toList()\n}\n\n/**\n * Returns a list containing last elements satisfying the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic inline fun LongArray.takeLastWhile(predicate: (Long) -> Boolean): List<Long> {\n    for (index in lastIndex downTo 0) {\n        if (!predicate(this[index])) {\n            return drop(index + 1)\n        }\n    }\n    return toList()\n}\n\n/**\n * Returns a list containing last elements satisfying the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic inline fun FloatArray.takeLastWhile(predicate: (Float) -> Boolean): List<Float> {\n    for (index in lastIndex downTo 0) {\n        if (!predicate(this[index])) {\n            return drop(index + 1)\n        }\n    }\n    return toList()\n}\n\n/**\n * Returns a list containing last elements satisfying the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic inline fun DoubleArray.takeLastWhile(predicate: (Double) -> Boolean): List<Double> {\n    for (index in lastIndex downTo 0) {\n        if (!predicate(this[index])) {\n            return drop(index + 1)\n        }\n    }\n    return toList()\n}\n\n/**\n * Returns a list containing last elements satisfying the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic inline fun BooleanArray.takeLastWhile(predicate: (Boolean) -> Boolean): List<Boolean> {\n    for (index in lastIndex downTo 0) {\n        if (!predicate(this[index])) {\n            return drop(index + 1)\n        }\n    }\n    return toList()\n}\n\n/**\n * Returns a list containing last elements satisfying the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic inline fun CharArray.takeLastWhile(predicate: (Char) -> Boolean): List<Char> {\n    for (index in lastIndex downTo 0) {\n        if (!predicate(this[index])) {\n            return drop(index + 1)\n        }\n    }\n    return toList()\n}\n\n/**\n * Returns a list containing first elements satisfying the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic inline fun <T> Array<out T>.takeWhile(predicate: (T) -> Boolean): List<T> {\n    val list = ArrayList<T>()\n    for (item in this) {\n        if (!predicate(item))\n            break\n        list.add(item)\n    }\n    return list\n}\n\n/**\n * Returns a list containing first elements satisfying the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic inline fun ByteArray.takeWhile(predicate: (Byte) -> Boolean): List<Byte> {\n    val list = ArrayList<Byte>()\n    for (item in this) {\n        if (!predicate(item))\n            break\n        list.add(item)\n    }\n    return list\n}\n\n/**\n * Returns a list containing first elements satisfying the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic inline fun ShortArray.takeWhile(predicate: (Short) -> Boolean): List<Short> {\n    val list = ArrayList<Short>()\n    for (item in this) {\n        if (!predicate(item))\n            break\n        list.add(item)\n    }\n    return list\n}\n\n/**\n * Returns a list containing first elements satisfying the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic inline fun IntArray.takeWhile(predicate: (Int) -> Boolean): List<Int> {\n    val list = ArrayList<Int>()\n    for (item in this) {\n        if (!predicate(item))\n            break\n        list.add(item)\n    }\n    return list\n}\n\n/**\n * Returns a list containing first elements satisfying the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic inline fun LongArray.takeWhile(predicate: (Long) -> Boolean): List<Long> {\n    val list = ArrayList<Long>()\n    for (item in this) {\n        if (!predicate(item))\n            break\n        list.add(item)\n    }\n    return list\n}\n\n/**\n * Returns a list containing first elements satisfying the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic inline fun FloatArray.takeWhile(predicate: (Float) -> Boolean): List<Float> {\n    val list = ArrayList<Float>()\n    for (item in this) {\n        if (!predicate(item))\n            break\n        list.add(item)\n    }\n    return list\n}\n\n/**\n * Returns a list containing first elements satisfying the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic inline fun DoubleArray.takeWhile(predicate: (Double) -> Boolean): List<Double> {\n    val list = ArrayList<Double>()\n    for (item in this) {\n        if (!predicate(item))\n            break\n        list.add(item)\n    }\n    return list\n}\n\n/**\n * Returns a list containing first elements satisfying the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic inline fun BooleanArray.takeWhile(predicate: (Boolean) -> Boolean): List<Boolean> {\n    val list = ArrayList<Boolean>()\n    for (item in this) {\n        if (!predicate(item))\n            break\n        list.add(item)\n    }\n    return list\n}\n\n/**\n * Returns a list containing first elements satisfying the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic inline fun CharArray.takeWhile(predicate: (Char) -> Boolean): List<Char> {\n    val list = ArrayList<Char>()\n    for (item in this) {\n        if (!predicate(item))\n            break\n        list.add(item)\n    }\n    return list\n}\n\n/**\n * Reverses elements in the array in-place.\n */\npublic fun <T> Array<T>.reverse(): Unit {\n    val midPoint = (size / 2) - 1\n    if (midPoint < 0) return\n    var reverseIndex = lastIndex\n    for (index in 0..midPoint) {\n        val tmp = this[index]\n        this[index] = this[reverseIndex]\n        this[reverseIndex] = tmp\n        reverseIndex--\n    }\n}\n\n/**\n * Reverses elements in the array in-place.\n */\npublic fun ByteArray.reverse(): Unit {\n    val midPoint = (size / 2) - 1\n    if (midPoint < 0) return\n    var reverseIndex = lastIndex\n    for (index in 0..midPoint) {\n        val tmp = this[index]\n        this[index] = this[reverseIndex]\n        this[reverseIndex] = tmp\n        reverseIndex--\n    }\n}\n\n/**\n * Reverses elements in the array in-place.\n */\npublic fun ShortArray.reverse(): Unit {\n    val midPoint = (size / 2) - 1\n    if (midPoint < 0) return\n    var reverseIndex = lastIndex\n    for (index in 0..midPoint) {\n        val tmp = this[index]\n        this[index] = this[reverseIndex]\n        this[reverseIndex] = tmp\n        reverseIndex--\n    }\n}\n\n/**\n * Reverses elements in the array in-place.\n */\npublic fun IntArray.reverse(): Unit {\n    val midPoint = (size / 2) - 1\n    if (midPoint < 0) return\n    var reverseIndex = lastIndex\n    for (index in 0..midPoint) {\n        val tmp = this[index]\n        this[index] = this[reverseIndex]\n        this[reverseIndex] = tmp\n        reverseIndex--\n    }\n}\n\n/**\n * Reverses elements in the array in-place.\n */\npublic fun LongArray.reverse(): Unit {\n    val midPoint = (size / 2) - 1\n    if (midPoint < 0) return\n    var reverseIndex = lastIndex\n    for (index in 0..midPoint) {\n        val tmp = this[index]\n        this[index] = this[reverseIndex]\n        this[reverseIndex] = tmp\n        reverseIndex--\n    }\n}\n\n/**\n * Reverses elements in the array in-place.\n */\npublic fun FloatArray.reverse(): Unit {\n    val midPoint = (size / 2) - 1\n    if (midPoint < 0) return\n    var reverseIndex = lastIndex\n    for (index in 0..midPoint) {\n        val tmp = this[index]\n        this[index] = this[reverseIndex]\n        this[reverseIndex] = tmp\n        reverseIndex--\n    }\n}\n\n/**\n * Reverses elements in the array in-place.\n */\npublic fun DoubleArray.reverse(): Unit {\n    val midPoint = (size / 2) - 1\n    if (midPoint < 0) return\n    var reverseIndex = lastIndex\n    for (index in 0..midPoint) {\n        val tmp = this[index]\n        this[index] = this[reverseIndex]\n        this[reverseIndex] = tmp\n        reverseIndex--\n    }\n}\n\n/**\n * Reverses elements in the array in-place.\n */\npublic fun BooleanArray.reverse(): Unit {\n    val midPoint = (size / 2) - 1\n    if (midPoint < 0) return\n    var reverseIndex = lastIndex\n    for (index in 0..midPoint) {\n        val tmp = this[index]\n        this[index] = this[reverseIndex]\n        this[reverseIndex] = tmp\n        reverseIndex--\n    }\n}\n\n/**\n * Reverses elements in the array in-place.\n */\npublic fun CharArray.reverse(): Unit {\n    val midPoint = (size / 2) - 1\n    if (midPoint < 0) return\n    var reverseIndex = lastIndex\n    for (index in 0..midPoint) {\n        val tmp = this[index]\n        this[index] = this[reverseIndex]\n        this[reverseIndex] = tmp\n        reverseIndex--\n    }\n}\n\n/**\n * Returns a list with elements in reversed order.\n */\npublic fun <T> Array<out T>.reversed(): List<T> {\n    if (isEmpty()) return emptyList()\n    val list = toMutableList()\n    list.reverse()\n    return list\n}\n\n/**\n * Returns a list with elements in reversed order.\n */\npublic fun ByteArray.reversed(): List<Byte> {\n    if (isEmpty()) return emptyList()\n    val list = toMutableList()\n    list.reverse()\n    return list\n}\n\n/**\n * Returns a list with elements in reversed order.\n */\npublic fun ShortArray.reversed(): List<Short> {\n    if (isEmpty()) return emptyList()\n    val list = toMutableList()\n    list.reverse()\n    return list\n}\n\n/**\n * Returns a list with elements in reversed order.\n */\npublic fun IntArray.reversed(): List<Int> {\n    if (isEmpty()) return emptyList()\n    val list = toMutableList()\n    list.reverse()\n    return list\n}\n\n/**\n * Returns a list with elements in reversed order.\n */\npublic fun LongArray.reversed(): List<Long> {\n    if (isEmpty()) return emptyList()\n    val list = toMutableList()\n    list.reverse()\n    return list\n}\n\n/**\n * Returns a list with elements in reversed order.\n */\npublic fun FloatArray.reversed(): List<Float> {\n    if (isEmpty()) return emptyList()\n    val list = toMutableList()\n    list.reverse()\n    return list\n}\n\n/**\n * Returns a list with elements in reversed order.\n */\npublic fun DoubleArray.reversed(): List<Double> {\n    if (isEmpty()) return emptyList()\n    val list = toMutableList()\n    list.reverse()\n    return list\n}\n\n/**\n * Returns a list with elements in reversed order.\n */\npublic fun BooleanArray.reversed(): List<Boolean> {\n    if (isEmpty()) return emptyList()\n    val list = toMutableList()\n    list.reverse()\n    return list\n}\n\n/**\n * Returns a list with elements in reversed order.\n */\npublic fun CharArray.reversed(): List<Char> {\n    if (isEmpty()) return emptyList()\n    val list = toMutableList()\n    list.reverse()\n    return list\n}\n\n/**\n * Returns an array with elements of this array in reversed order.\n */\npublic fun <T> Array<T>.reversedArray(): Array<T> {\n    if (isEmpty()) return this\n    val result = arrayOfNulls(this, size)\n    val lastIndex = lastIndex\n    for (i in 0..lastIndex)\n        result[lastIndex - i] = this[i]\n    return result\n}\n\n/**\n * Returns an array with elements of this array in reversed order.\n */\npublic fun ByteArray.reversedArray(): ByteArray {\n    if (isEmpty()) return this\n    val result = ByteArray(size)\n    val lastIndex = lastIndex\n    for (i in 0..lastIndex)\n        result[lastIndex - i] = this[i]\n    return result\n}\n\n/**\n * Returns an array with elements of this array in reversed order.\n */\npublic fun ShortArray.reversedArray(): ShortArray {\n    if (isEmpty()) return this\n    val result = ShortArray(size)\n    val lastIndex = lastIndex\n    for (i in 0..lastIndex)\n        result[lastIndex - i] = this[i]\n    return result\n}\n\n/**\n * Returns an array with elements of this array in reversed order.\n */\npublic fun IntArray.reversedArray(): IntArray {\n    if (isEmpty()) return this\n    val result = IntArray(size)\n    val lastIndex = lastIndex\n    for (i in 0..lastIndex)\n        result[lastIndex - i] = this[i]\n    return result\n}\n\n/**\n * Returns an array with elements of this array in reversed order.\n */\npublic fun LongArray.reversedArray(): LongArray {\n    if (isEmpty()) return this\n    val result = LongArray(size)\n    val lastIndex = lastIndex\n    for (i in 0..lastIndex)\n        result[lastIndex - i] = this[i]\n    return result\n}\n\n/**\n * Returns an array with elements of this array in reversed order.\n */\npublic fun FloatArray.reversedArray(): FloatArray {\n    if (isEmpty()) return this\n    val result = FloatArray(size)\n    val lastIndex = lastIndex\n    for (i in 0..lastIndex)\n        result[lastIndex - i] = this[i]\n    return result\n}\n\n/**\n * Returns an array with elements of this array in reversed order.\n */\npublic fun DoubleArray.reversedArray(): DoubleArray {\n    if (isEmpty()) return this\n    val result = DoubleArray(size)\n    val lastIndex = lastIndex\n    for (i in 0..lastIndex)\n        result[lastIndex - i] = this[i]\n    return result\n}\n\n/**\n * Returns an array with elements of this array in reversed order.\n */\npublic fun BooleanArray.reversedArray(): BooleanArray {\n    if (isEmpty()) return this\n    val result = BooleanArray(size)\n    val lastIndex = lastIndex\n    for (i in 0..lastIndex)\n        result[lastIndex - i] = this[i]\n    return result\n}\n\n/**\n * Returns an array with elements of this array in reversed order.\n */\npublic fun CharArray.reversedArray(): CharArray {\n    if (isEmpty()) return this\n    val result = CharArray(size)\n    val lastIndex = lastIndex\n    for (i in 0..lastIndex)\n        result[lastIndex - i] = this[i]\n    return result\n}\n\n/**\n * Sorts elements in the array in-place according to natural sort order of the value returned by specified [selector] function.\n */\npublic inline fun <T, R : Comparable<R>> Array<out T>.sortBy(crossinline selector: (T) -> R?): Unit {\n    if (size > 1) sortWith(compareBy(selector))\n}\n\n/**\n * Sorts elements in the array in-place descending according to natural sort order of the value returned by specified [selector] function.\n */\npublic inline fun <T, R : Comparable<R>> Array<out T>.sortByDescending(crossinline selector: (T) -> R?): Unit {\n    if (size > 1) sortWith(compareByDescending(selector))\n}\n\n/**\n * Sorts elements in the array in-place descending according to their natural sort order.\n */\npublic fun <T : Comparable<T>> Array<out T>.sortDescending(): Unit {\n    sortWith(reverseOrder())\n}\n\n/**\n * Sorts elements in the array in-place descending according to their natural sort order.\n */\npublic fun ByteArray.sortDescending(): Unit {\n    if (size > 1) {\n        sort()\n        reverse()\n    }\n}\n\n/**\n * Sorts elements in the array in-place descending according to their natural sort order.\n */\npublic fun ShortArray.sortDescending(): Unit {\n    if (size > 1) {\n        sort()\n        reverse()\n    }\n}\n\n/**\n * Sorts elements in the array in-place descending according to their natural sort order.\n */\npublic fun IntArray.sortDescending(): Unit {\n    if (size > 1) {\n        sort()\n        reverse()\n    }\n}\n\n/**\n * Sorts elements in the array in-place descending according to their natural sort order.\n */\npublic fun LongArray.sortDescending(): Unit {\n    if (size > 1) {\n        sort()\n        reverse()\n    }\n}\n\n/**\n * Sorts elements in the array in-place descending according to their natural sort order.\n */\npublic fun FloatArray.sortDescending(): Unit {\n    if (size > 1) {\n        sort()\n        reverse()\n    }\n}\n\n/**\n * Sorts elements in the array in-place descending according to their natural sort order.\n */\npublic fun DoubleArray.sortDescending(): Unit {\n    if (size > 1) {\n        sort()\n        reverse()\n    }\n}\n\n/**\n * Sorts elements in the array in-place descending according to their natural sort order.\n */\npublic fun CharArray.sortDescending(): Unit {\n    if (size > 1) {\n        sort()\n        reverse()\n    }\n}\n\n/**\n * Returns a list of all elements sorted according to their natural sort order.\n */\npublic fun <T : Comparable<T>> Array<out T>.sorted(): List<T> {\n    return sortedArray().asList()\n}\n\n/**\n * Returns a list of all elements sorted according to their natural sort order.\n */\npublic fun ByteArray.sorted(): List<Byte> {\n    return toTypedArray().apply { sort() }.asList()\n}\n\n/**\n * Returns a list of all elements sorted according to their natural sort order.\n */\npublic fun ShortArray.sorted(): List<Short> {\n    return toTypedArray().apply { sort() }.asList()\n}\n\n/**\n * Returns a list of all elements sorted according to their natural sort order.\n */\npublic fun IntArray.sorted(): List<Int> {\n    return toTypedArray().apply { sort() }.asList()\n}\n\n/**\n * Returns a list of all elements sorted according to their natural sort order.\n */\npublic fun LongArray.sorted(): List<Long> {\n    return toTypedArray().apply { sort() }.asList()\n}\n\n/**\n * Returns a list of all elements sorted according to their natural sort order.\n */\npublic fun FloatArray.sorted(): List<Float> {\n    return toTypedArray().apply { sort() }.asList()\n}\n\n/**\n * Returns a list of all elements sorted according to their natural sort order.\n */\npublic fun DoubleArray.sorted(): List<Double> {\n    return toTypedArray().apply { sort() }.asList()\n}\n\n/**\n * Returns a list of all elements sorted according to their natural sort order.\n */\npublic fun CharArray.sorted(): List<Char> {\n    return toTypedArray().apply { sort() }.asList()\n}\n\n/**\n * Returns an array with all elements of this array sorted according to their natural sort order.\n */\npublic fun <T : Comparable<T>> Array<T>.sortedArray(): Array<T> {\n    if (isEmpty()) return this\n    return this.copyOf().apply { sort() }\n}\n\n/**\n * Returns an array with all elements of this array sorted according to their natural sort order.\n */\npublic fun ByteArray.sortedArray(): ByteArray {\n    if (isEmpty()) return this\n    return this.copyOf().apply { sort() }\n}\n\n/**\n * Returns an array with all elements of this array sorted according to their natural sort order.\n */\npublic fun ShortArray.sortedArray(): ShortArray {\n    if (isEmpty()) return this\n    return this.copyOf().apply { sort() }\n}\n\n/**\n * Returns an array with all elements of this array sorted according to their natural sort order.\n */\npublic fun IntArray.sortedArray(): IntArray {\n    if (isEmpty()) return this\n    return this.copyOf().apply { sort() }\n}\n\n/**\n * Returns an array with all elements of this array sorted according to their natural sort order.\n */\npublic fun LongArray.sortedArray(): LongArray {\n    if (isEmpty()) return this\n    return this.copyOf().apply { sort() }\n}\n\n/**\n * Returns an array with all elements of this array sorted according to their natural sort order.\n */\npublic fun FloatArray.sortedArray(): FloatArray {\n    if (isEmpty()) return this\n    return this.copyOf().apply { sort() }\n}\n\n/**\n * Returns an array with all elements of this array sorted according to their natural sort order.\n */\npublic fun DoubleArray.sortedArray(): DoubleArray {\n    if (isEmpty()) return this\n    return this.copyOf().apply { sort() }\n}\n\n/**\n * Returns an array with all elements of this array sorted according to their natural sort order.\n */\npublic fun CharArray.sortedArray(): CharArray {\n    if (isEmpty()) return this\n    return this.copyOf().apply { sort() }\n}\n\n/**\n * Returns an array with all elements of this array sorted descending according to their natural sort order.\n */\npublic fun <T : Comparable<T>> Array<T>.sortedArrayDescending(): Array<T> {\n    if (isEmpty()) return this\n    return this.copyOf().apply { sortWith(reverseOrder()) }\n}\n\n/**\n * Returns an array with all elements of this array sorted descending according to their natural sort order.\n */\npublic fun ByteArray.sortedArrayDescending(): ByteArray {\n    if (isEmpty()) return this\n    return this.copyOf().apply { sortDescending() }\n}\n\n/**\n * Returns an array with all elements of this array sorted descending according to their natural sort order.\n */\npublic fun ShortArray.sortedArrayDescending(): ShortArray {\n    if (isEmpty()) return this\n    return this.copyOf().apply { sortDescending() }\n}\n\n/**\n * Returns an array with all elements of this array sorted descending according to their natural sort order.\n */\npublic fun IntArray.sortedArrayDescending(): IntArray {\n    if (isEmpty()) return this\n    return this.copyOf().apply { sortDescending() }\n}\n\n/**\n * Returns an array with all elements of this array sorted descending according to their natural sort order.\n */\npublic fun LongArray.sortedArrayDescending(): LongArray {\n    if (isEmpty()) return this\n    return this.copyOf().apply { sortDescending() }\n}\n\n/**\n * Returns an array with all elements of this array sorted descending according to their natural sort order.\n */\npublic fun FloatArray.sortedArrayDescending(): FloatArray {\n    if (isEmpty()) return this\n    return this.copyOf().apply { sortDescending() }\n}\n\n/**\n * Returns an array with all elements of this array sorted descending according to their natural sort order.\n */\npublic fun DoubleArray.sortedArrayDescending(): DoubleArray {\n    if (isEmpty()) return this\n    return this.copyOf().apply { sortDescending() }\n}\n\n/**\n * Returns an array with all elements of this array sorted descending according to their natural sort order.\n */\npublic fun CharArray.sortedArrayDescending(): CharArray {\n    if (isEmpty()) return this\n    return this.copyOf().apply { sortDescending() }\n}\n\n/**\n * Returns an array with all elements of this array sorted according the specified [comparator].\n */\npublic fun <T> Array<out T>.sortedArrayWith(comparator: Comparator<in T>): Array<out T> {\n    if (isEmpty()) return this\n    return this.copyOf().apply { sortWith(comparator) }\n}\n\n/**\n * Returns a list of all elements sorted according to natural sort order of the value returned by specified [selector] function.\n */\npublic inline fun <T, R : Comparable<R>> Array<out T>.sortedBy(crossinline selector: (T) -> R?): List<T> {\n    return sortedWith(compareBy(selector))\n}\n\n/**\n * Returns a list of all elements sorted according to natural sort order of the value returned by specified [selector] function.\n */\npublic inline fun <R : Comparable<R>> ByteArray.sortedBy(crossinline selector: (Byte) -> R?): List<Byte> {\n    return sortedWith(compareBy(selector))\n}\n\n/**\n * Returns a list of all elements sorted according to natural sort order of the value returned by specified [selector] function.\n */\npublic inline fun <R : Comparable<R>> ShortArray.sortedBy(crossinline selector: (Short) -> R?): List<Short> {\n    return sortedWith(compareBy(selector))\n}\n\n/**\n * Returns a list of all elements sorted according to natural sort order of the value returned by specified [selector] function.\n */\npublic inline fun <R : Comparable<R>> IntArray.sortedBy(crossinline selector: (Int) -> R?): List<Int> {\n    return sortedWith(compareBy(selector))\n}\n\n/**\n * Returns a list of all elements sorted according to natural sort order of the value returned by specified [selector] function.\n */\npublic inline fun <R : Comparable<R>> LongArray.sortedBy(crossinline selector: (Long) -> R?): List<Long> {\n    return sortedWith(compareBy(selector))\n}\n\n/**\n * Returns a list of all elements sorted according to natural sort order of the value returned by specified [selector] function.\n */\npublic inline fun <R : Comparable<R>> FloatArray.sortedBy(crossinline selector: (Float) -> R?): List<Float> {\n    return sortedWith(compareBy(selector))\n}\n\n/**\n * Returns a list of all elements sorted according to natural sort order of the value returned by specified [selector] function.\n */\npublic inline fun <R : Comparable<R>> DoubleArray.sortedBy(crossinline selector: (Double) -> R?): List<Double> {\n    return sortedWith(compareBy(selector))\n}\n\n/**\n * Returns a list of all elements sorted according to natural sort order of the value returned by specified [selector] function.\n */\npublic inline fun <R : Comparable<R>> BooleanArray.sortedBy(crossinline selector: (Boolean) -> R?): List<Boolean> {\n    return sortedWith(compareBy(selector))\n}\n\n/**\n * Returns a list of all elements sorted according to natural sort order of the value returned by specified [selector] function.\n */\npublic inline fun <R : Comparable<R>> CharArray.sortedBy(crossinline selector: (Char) -> R?): List<Char> {\n    return sortedWith(compareBy(selector))\n}\n\n/**\n * Returns a list of all elements sorted descending according to natural sort order of the value returned by specified [selector] function.\n */\npublic inline fun <T, R : Comparable<R>> Array<out T>.sortedByDescending(crossinline selector: (T) -> R?): List<T> {\n    return sortedWith(compareByDescending(selector))\n}\n\n/**\n * Returns a list of all elements sorted descending according to natural sort order of the value returned by specified [selector] function.\n */\npublic inline fun <R : Comparable<R>> ByteArray.sortedByDescending(crossinline selector: (Byte) -> R?): List<Byte> {\n    return sortedWith(compareByDescending(selector))\n}\n\n/**\n * Returns a list of all elements sorted descending according to natural sort order of the value returned by specified [selector] function.\n */\npublic inline fun <R : Comparable<R>> ShortArray.sortedByDescending(crossinline selector: (Short) -> R?): List<Short> {\n    return sortedWith(compareByDescending(selector))\n}\n\n/**\n * Returns a list of all elements sorted descending according to natural sort order of the value returned by specified [selector] function.\n */\npublic inline fun <R : Comparable<R>> IntArray.sortedByDescending(crossinline selector: (Int) -> R?): List<Int> {\n    return sortedWith(compareByDescending(selector))\n}\n\n/**\n * Returns a list of all elements sorted descending according to natural sort order of the value returned by specified [selector] function.\n */\npublic inline fun <R : Comparable<R>> LongArray.sortedByDescending(crossinline selector: (Long) -> R?): List<Long> {\n    return sortedWith(compareByDescending(selector))\n}\n\n/**\n * Returns a list of all elements sorted descending according to natural sort order of the value returned by specified [selector] function.\n */\npublic inline fun <R : Comparable<R>> FloatArray.sortedByDescending(crossinline selector: (Float) -> R?): List<Float> {\n    return sortedWith(compareByDescending(selector))\n}\n\n/**\n * Returns a list of all elements sorted descending according to natural sort order of the value returned by specified [selector] function.\n */\npublic inline fun <R : Comparable<R>> DoubleArray.sortedByDescending(crossinline selector: (Double) -> R?): List<Double> {\n    return sortedWith(compareByDescending(selector))\n}\n\n/**\n * Returns a list of all elements sorted descending according to natural sort order of the value returned by specified [selector] function.\n */\npublic inline fun <R : Comparable<R>> BooleanArray.sortedByDescending(crossinline selector: (Boolean) -> R?): List<Boolean> {\n    return sortedWith(compareByDescending(selector))\n}\n\n/**\n * Returns a list of all elements sorted descending according to natural sort order of the value returned by specified [selector] function.\n */\npublic inline fun <R : Comparable<R>> CharArray.sortedByDescending(crossinline selector: (Char) -> R?): List<Char> {\n    return sortedWith(compareByDescending(selector))\n}\n\n/**\n * Returns a list of all elements sorted descending according to their natural sort order.\n */\npublic fun <T : Comparable<T>> Array<out T>.sortedDescending(): List<T> {\n    return sortedWith(reverseOrder())\n}\n\n/**\n * Returns a list of all elements sorted descending according to their natural sort order.\n */\npublic fun ByteArray.sortedDescending(): List<Byte> {\n    return copyOf().apply { sort() }.reversed()\n}\n\n/**\n * Returns a list of all elements sorted descending according to their natural sort order.\n */\npublic fun ShortArray.sortedDescending(): List<Short> {\n    return copyOf().apply { sort() }.reversed()\n}\n\n/**\n * Returns a list of all elements sorted descending according to their natural sort order.\n */\npublic fun IntArray.sortedDescending(): List<Int> {\n    return copyOf().apply { sort() }.reversed()\n}\n\n/**\n * Returns a list of all elements sorted descending according to their natural sort order.\n */\npublic fun LongArray.sortedDescending(): List<Long> {\n    return copyOf().apply { sort() }.reversed()\n}\n\n/**\n * Returns a list of all elements sorted descending according to their natural sort order.\n */\npublic fun FloatArray.sortedDescending(): List<Float> {\n    return copyOf().apply { sort() }.reversed()\n}\n\n/**\n * Returns a list of all elements sorted descending according to their natural sort order.\n */\npublic fun DoubleArray.sortedDescending(): List<Double> {\n    return copyOf().apply { sort() }.reversed()\n}\n\n/**\n * Returns a list of all elements sorted descending according to their natural sort order.\n */\npublic fun CharArray.sortedDescending(): List<Char> {\n    return copyOf().apply { sort() }.reversed()\n}\n\n/**\n * Returns a list of all elements sorted according to the specified [comparator].\n */\npublic fun <T> Array<out T>.sortedWith(comparator: Comparator<in T>): List<T> {\n    return sortedArrayWith(comparator).asList()\n}\n\n/**\n * Returns a list of all elements sorted according to the specified [comparator].\n */\npublic fun ByteArray.sortedWith(comparator: Comparator<in Byte>): List<Byte> {\n    return toTypedArray().apply { sortWith(comparator) }.asList()\n}\n\n/**\n * Returns a list of all elements sorted according to the specified [comparator].\n */\npublic fun ShortArray.sortedWith(comparator: Comparator<in Short>): List<Short> {\n    return toTypedArray().apply { sortWith(comparator) }.asList()\n}\n\n/**\n * Returns a list of all elements sorted according to the specified [comparator].\n */\npublic fun IntArray.sortedWith(comparator: Comparator<in Int>): List<Int> {\n    return toTypedArray().apply { sortWith(comparator) }.asList()\n}\n\n/**\n * Returns a list of all elements sorted according to the specified [comparator].\n */\npublic fun LongArray.sortedWith(comparator: Comparator<in Long>): List<Long> {\n    return toTypedArray().apply { sortWith(comparator) }.asList()\n}\n\n/**\n * Returns a list of all elements sorted according to the specified [comparator].\n */\npublic fun FloatArray.sortedWith(comparator: Comparator<in Float>): List<Float> {\n    return toTypedArray().apply { sortWith(comparator) }.asList()\n}\n\n/**\n * Returns a list of all elements sorted according to the specified [comparator].\n */\npublic fun DoubleArray.sortedWith(comparator: Comparator<in Double>): List<Double> {\n    return toTypedArray().apply { sortWith(comparator) }.asList()\n}\n\n/**\n * Returns a list of all elements sorted according to the specified [comparator].\n */\npublic fun BooleanArray.sortedWith(comparator: Comparator<in Boolean>): List<Boolean> {\n    return toTypedArray().apply { sortWith(comparator) }.asList()\n}\n\n/**\n * Returns a list of all elements sorted according to the specified [comparator].\n */\npublic fun CharArray.sortedWith(comparator: Comparator<in Char>): List<Char> {\n    return toTypedArray().apply { sortWith(comparator) }.asList()\n}\n\n/**\n * Returns a [List] that wraps the original array.\n */\npublic fun <T> Array<out T>.asList(): List<T> {\n    return ArrayList<T>(this.unsafeCast<Array<Any?>>())\n}\n\n/**\n * Returns a [List] that wraps the original array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun ByteArray.asList(): List<Byte> {\n    return this.unsafeCast<Array<Byte>>().asList()\n}\n\n/**\n * Returns a [List] that wraps the original array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun ShortArray.asList(): List<Short> {\n    return this.unsafeCast<Array<Short>>().asList()\n}\n\n/**\n * Returns a [List] that wraps the original array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun IntArray.asList(): List<Int> {\n    return this.unsafeCast<Array<Int>>().asList()\n}\n\n/**\n * Returns a [List] that wraps the original array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun LongArray.asList(): List<Long> {\n    return this.unsafeCast<Array<Long>>().asList()\n}\n\n/**\n * Returns a [List] that wraps the original array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun FloatArray.asList(): List<Float> {\n    return this.unsafeCast<Array<Float>>().asList()\n}\n\n/**\n * Returns a [List] that wraps the original array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun DoubleArray.asList(): List<Double> {\n    return this.unsafeCast<Array<Double>>().asList()\n}\n\n/**\n * Returns a [List] that wraps the original array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun BooleanArray.asList(): List<Boolean> {\n    return this.unsafeCast<Array<Boolean>>().asList()\n}\n\n/**\n * Returns a [List] that wraps the original array.\n */\npublic fun CharArray.asList(): List<Char> {\n    return object : AbstractList<Char>(), RandomAccess {\n        override val size: Int get() = this@asList.size\n        override fun isEmpty(): Boolean = this@asList.isEmpty()\n        override fun contains(element: Char): Boolean = this@asList.contains(element)\n        override fun get(index: Int): Char = this@asList[index]\n        override fun indexOf(element: Char): Int = this@asList.indexOf(element)\n        override fun lastIndexOf(element: Char): Int = this@asList.lastIndexOf(element)\n    }\n}\n\n/**\n * Returns `true` if the two specified arrays are *deeply* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n * \n * If two corresponding elements are nested arrays, they are also compared deeply.\n * If any of arrays contains itself on any nesting level the behavior is undefined.\n */\n@SinceKotlin(\"1.1\")\n@library(\"arrayDeepEquals\")\n@Suppress(\"UNUSED_PARAMETER\")\npublic infix fun <T> Array<out T>.contentDeepEquals(other: Array<out T>): Boolean {\n    definedExternally\n}\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n * Nested arrays are treated as lists too.\n * \n * If any of arrays contains itself on any nesting level the behavior is undefined.\n */\n@SinceKotlin(\"1.1\")\n@library(\"arrayDeepHashCode\")\npublic fun <T> Array<out T>.contentDeepHashCode(): Int {\n    definedExternally\n}\n\n/**\n * Returns a string representation of the contents of this array as if it is a [List].\n * Nested arrays are treated as lists too.\n * \n * If any of arrays contains itself on any nesting level that reference\n * is rendered as `\"[...]\"` to prevent recursion.\n * \n * @sample samples.collections.Arrays.ContentOperations.contentDeepToString\n */\n@SinceKotlin(\"1.1\")\n@library(\"arrayDeepToString\")\npublic fun <T> Array<out T>.contentDeepToString(): String {\n    definedExternally\n}\n\n/**\n * Returns `true` if the two specified arrays are *structurally* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n */\n@SinceKotlin(\"1.1\")\n@library(\"arrayEquals\")\n@Suppress(\"UNUSED_PARAMETER\")\npublic infix fun <T> Array<out T>.contentEquals(other: Array<out T>): Boolean {\n    definedExternally\n}\n\n/**\n * Returns `true` if the two specified arrays are *structurally* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n */\n@SinceKotlin(\"1.1\")\n@library(\"arrayEquals\")\n@Suppress(\"UNUSED_PARAMETER\")\npublic infix fun ByteArray.contentEquals(other: ByteArray): Boolean {\n    definedExternally\n}\n\n/**\n * Returns `true` if the two specified arrays are *structurally* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n */\n@SinceKotlin(\"1.1\")\n@library(\"arrayEquals\")\n@Suppress(\"UNUSED_PARAMETER\")\npublic infix fun ShortArray.contentEquals(other: ShortArray): Boolean {\n    definedExternally\n}\n\n/**\n * Returns `true` if the two specified arrays are *structurally* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n */\n@SinceKotlin(\"1.1\")\n@library(\"arrayEquals\")\n@Suppress(\"UNUSED_PARAMETER\")\npublic infix fun IntArray.contentEquals(other: IntArray): Boolean {\n    definedExternally\n}\n\n/**\n * Returns `true` if the two specified arrays are *structurally* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n */\n@SinceKotlin(\"1.1\")\n@library(\"arrayEquals\")\n@Suppress(\"UNUSED_PARAMETER\")\npublic infix fun LongArray.contentEquals(other: LongArray): Boolean {\n    definedExternally\n}\n\n/**\n * Returns `true` if the two specified arrays are *structurally* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n */\n@SinceKotlin(\"1.1\")\n@library(\"arrayEquals\")\n@Suppress(\"UNUSED_PARAMETER\")\npublic infix fun FloatArray.contentEquals(other: FloatArray): Boolean {\n    definedExternally\n}\n\n/**\n * Returns `true` if the two specified arrays are *structurally* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n */\n@SinceKotlin(\"1.1\")\n@library(\"arrayEquals\")\n@Suppress(\"UNUSED_PARAMETER\")\npublic infix fun DoubleArray.contentEquals(other: DoubleArray): Boolean {\n    definedExternally\n}\n\n/**\n * Returns `true` if the two specified arrays are *structurally* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n */\n@SinceKotlin(\"1.1\")\n@library(\"arrayEquals\")\n@Suppress(\"UNUSED_PARAMETER\")\npublic infix fun BooleanArray.contentEquals(other: BooleanArray): Boolean {\n    definedExternally\n}\n\n/**\n * Returns `true` if the two specified arrays are *structurally* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n */\n@SinceKotlin(\"1.1\")\n@library(\"arrayEquals\")\n@Suppress(\"UNUSED_PARAMETER\")\npublic infix fun CharArray.contentEquals(other: CharArray): Boolean {\n    definedExternally\n}\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n */\n@SinceKotlin(\"1.1\")\n@library(\"arrayHashCode\")\npublic fun <T> Array<out T>.contentHashCode(): Int {\n    definedExternally\n}\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n */\n@SinceKotlin(\"1.1\")\n@library(\"arrayHashCode\")\npublic fun ByteArray.contentHashCode(): Int {\n    definedExternally\n}\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n */\n@SinceKotlin(\"1.1\")\n@library(\"arrayHashCode\")\npublic fun ShortArray.contentHashCode(): Int {\n    definedExternally\n}\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n */\n@SinceKotlin(\"1.1\")\n@library(\"arrayHashCode\")\npublic fun IntArray.contentHashCode(): Int {\n    definedExternally\n}\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n */\n@SinceKotlin(\"1.1\")\n@library(\"arrayHashCode\")\npublic fun LongArray.contentHashCode(): Int {\n    definedExternally\n}\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n */\n@SinceKotlin(\"1.1\")\n@library(\"arrayHashCode\")\npublic fun FloatArray.contentHashCode(): Int {\n    definedExternally\n}\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n */\n@SinceKotlin(\"1.1\")\n@library(\"arrayHashCode\")\npublic fun DoubleArray.contentHashCode(): Int {\n    definedExternally\n}\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n */\n@SinceKotlin(\"1.1\")\n@library(\"arrayHashCode\")\npublic fun BooleanArray.contentHashCode(): Int {\n    definedExternally\n}\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n */\n@SinceKotlin(\"1.1\")\n@library(\"arrayHashCode\")\npublic fun CharArray.contentHashCode(): Int {\n    definedExternally\n}\n\n/**\n * Returns a string representation of the contents of the specified array as if it is [List].\n * \n * @sample samples.collections.Arrays.ContentOperations.contentToString\n */\n@SinceKotlin(\"1.1\")\n@library(\"arrayToString\")\npublic fun <T> Array<out T>.contentToString(): String {\n    definedExternally\n}\n\n/**\n * Returns a string representation of the contents of the specified array as if it is [List].\n * \n * @sample samples.collections.Arrays.ContentOperations.contentToString\n */\n@SinceKotlin(\"1.1\")\n@library(\"arrayToString\")\npublic fun ByteArray.contentToString(): String {\n    definedExternally\n}\n\n/**\n * Returns a string representation of the contents of the specified array as if it is [List].\n * \n * @sample samples.collections.Arrays.ContentOperations.contentToString\n */\n@SinceKotlin(\"1.1\")\n@library(\"arrayToString\")\npublic fun ShortArray.contentToString(): String {\n    definedExternally\n}\n\n/**\n * Returns a string representation of the contents of the specified array as if it is [List].\n * \n * @sample samples.collections.Arrays.ContentOperations.contentToString\n */\n@SinceKotlin(\"1.1\")\n@library(\"arrayToString\")\npublic fun IntArray.contentToString(): String {\n    definedExternally\n}\n\n/**\n * Returns a string representation of the contents of the specified array as if it is [List].\n * \n * @sample samples.collections.Arrays.ContentOperations.contentToString\n */\n@SinceKotlin(\"1.1\")\n@library(\"arrayToString\")\npublic fun LongArray.contentToString(): String {\n    definedExternally\n}\n\n/**\n * Returns a string representation of the contents of the specified array as if it is [List].\n * \n * @sample samples.collections.Arrays.ContentOperations.contentToString\n */\n@SinceKotlin(\"1.1\")\n@library(\"arrayToString\")\npublic fun FloatArray.contentToString(): String {\n    definedExternally\n}\n\n/**\n * Returns a string representation of the contents of the specified array as if it is [List].\n * \n * @sample samples.collections.Arrays.ContentOperations.contentToString\n */\n@SinceKotlin(\"1.1\")\n@library(\"arrayToString\")\npublic fun DoubleArray.contentToString(): String {\n    definedExternally\n}\n\n/**\n * Returns a string representation of the contents of the specified array as if it is [List].\n * \n * @sample samples.collections.Arrays.ContentOperations.contentToString\n */\n@SinceKotlin(\"1.1\")\n@library(\"arrayToString\")\npublic fun BooleanArray.contentToString(): String {\n    definedExternally\n}\n\n/**\n * Returns a string representation of the contents of the specified array as if it is [List].\n * \n * @sample samples.collections.Arrays.ContentOperations.contentToString\n */\n@SinceKotlin(\"1.1\")\n@library(\"arrayToString\")\npublic fun CharArray.contentToString(): String {\n    definedExternally\n}\n\n/**\n * Returns new array which is a copy of the original array.\n */\n@Suppress(\"NOTHING_TO_INLINE\")\npublic inline fun <T> Array<out T>.copyOf(): Array<T> {\n    return this.asDynamic().slice()\n}\n\n/**\n * Returns new array which is a copy of the original array.\n */\n@Suppress(\"NOTHING_TO_INLINE\")\npublic inline fun ByteArray.copyOf(): ByteArray {\n    return this.asDynamic().slice()\n}\n\n/**\n * Returns new array which is a copy of the original array.\n */\n@Suppress(\"NOTHING_TO_INLINE\")\npublic inline fun ShortArray.copyOf(): ShortArray {\n    return this.asDynamic().slice()\n}\n\n/**\n * Returns new array which is a copy of the original array.\n */\n@Suppress(\"NOTHING_TO_INLINE\")\npublic inline fun IntArray.copyOf(): IntArray {\n    return this.asDynamic().slice()\n}\n\n/**\n * Returns new array which is a copy of the original array.\n */\npublic fun LongArray.copyOf(): LongArray {\n    return withType(\"LongArray\", this.asDynamic().slice())\n}\n\n/**\n * Returns new array which is a copy of the original array.\n */\n@Suppress(\"NOTHING_TO_INLINE\")\npublic inline fun FloatArray.copyOf(): FloatArray {\n    return this.asDynamic().slice()\n}\n\n/**\n * Returns new array which is a copy of the original array.\n */\n@Suppress(\"NOTHING_TO_INLINE\")\npublic inline fun DoubleArray.copyOf(): DoubleArray {\n    return this.asDynamic().slice()\n}\n\n/**\n * Returns new array which is a copy of the original array.\n */\npublic fun BooleanArray.copyOf(): BooleanArray {\n    return withType(\"BooleanArray\", this.asDynamic().slice())\n}\n\n/**\n * Returns new array which is a copy of the original array.\n */\npublic fun CharArray.copyOf(): CharArray {\n    return withType(\"CharArray\", this.asDynamic().slice())\n}\n\n/**\n * Returns new array which is a copy of the original array, resized to the given [newSize].\n */\npublic fun ByteArray.copyOf(newSize: Int): ByteArray {\n    return fillFrom(this, ByteArray(newSize))\n}\n\n/**\n * Returns new array which is a copy of the original array, resized to the given [newSize].\n */\npublic fun ShortArray.copyOf(newSize: Int): ShortArray {\n    return fillFrom(this, ShortArray(newSize))\n}\n\n/**\n * Returns new array which is a copy of the original array, resized to the given [newSize].\n */\npublic fun IntArray.copyOf(newSize: Int): IntArray {\n    return fillFrom(this, IntArray(newSize))\n}\n\n/**\n * Returns new array which is a copy of the original array, resized to the given [newSize].\n */\npublic fun LongArray.copyOf(newSize: Int): LongArray {\n    return withType(\"LongArray\", arrayCopyResize(this, newSize, 0L))\n}\n\n/**\n * Returns new array which is a copy of the original array, resized to the given [newSize].\n */\npublic fun FloatArray.copyOf(newSize: Int): FloatArray {\n    return fillFrom(this, FloatArray(newSize))\n}\n\n/**\n * Returns new array which is a copy of the original array, resized to the given [newSize].\n */\npublic fun DoubleArray.copyOf(newSize: Int): DoubleArray {\n    return fillFrom(this, DoubleArray(newSize))\n}\n\n/**\n * Returns new array which is a copy of the original array, resized to the given [newSize].\n */\npublic fun BooleanArray.copyOf(newSize: Int): BooleanArray {\n    return withType(\"BooleanArray\", arrayCopyResize(this, newSize, false))\n}\n\n/**\n * Returns new array which is a copy of the original array, resized to the given [newSize].\n */\npublic fun CharArray.copyOf(newSize: Int): CharArray {\n    return withType(\"CharArray\", fillFrom(this, CharArray(newSize)))\n}\n\n/**\n * Returns new array which is a copy of the original array, resized to the given [newSize].\n */\npublic fun <T> Array<out T>.copyOf(newSize: Int): Array<T?> {\n    return arrayCopyResize(this, newSize, null)\n}\n\n/**\n * Returns new array which is a copy of range of original array.\n */\n@Suppress(\"NOTHING_TO_INLINE\")\npublic inline fun <T> Array<out T>.copyOfRange(fromIndex: Int, toIndex: Int): Array<T> {\n    return this.asDynamic().slice(fromIndex, toIndex)\n}\n\n/**\n * Returns new array which is a copy of range of original array.\n */\n@Suppress(\"NOTHING_TO_INLINE\")\npublic inline fun ByteArray.copyOfRange(fromIndex: Int, toIndex: Int): ByteArray {\n    return this.asDynamic().slice(fromIndex, toIndex)\n}\n\n/**\n * Returns new array which is a copy of range of original array.\n */\n@Suppress(\"NOTHING_TO_INLINE\")\npublic inline fun ShortArray.copyOfRange(fromIndex: Int, toIndex: Int): ShortArray {\n    return this.asDynamic().slice(fromIndex, toIndex)\n}\n\n/**\n * Returns new array which is a copy of range of original array.\n */\n@Suppress(\"NOTHING_TO_INLINE\")\npublic inline fun IntArray.copyOfRange(fromIndex: Int, toIndex: Int): IntArray {\n    return this.asDynamic().slice(fromIndex, toIndex)\n}\n\n/**\n * Returns new array which is a copy of range of original array.\n */\npublic fun LongArray.copyOfRange(fromIndex: Int, toIndex: Int): LongArray {\n    return withType(\"LongArray\", this.asDynamic().slice(fromIndex, toIndex))\n}\n\n/**\n * Returns new array which is a copy of range of original array.\n */\n@Suppress(\"NOTHING_TO_INLINE\")\npublic inline fun FloatArray.copyOfRange(fromIndex: Int, toIndex: Int): FloatArray {\n    return this.asDynamic().slice(fromIndex, toIndex)\n}\n\n/**\n * Returns new array which is a copy of range of original array.\n */\n@Suppress(\"NOTHING_TO_INLINE\")\npublic inline fun DoubleArray.copyOfRange(fromIndex: Int, toIndex: Int): DoubleArray {\n    return this.asDynamic().slice(fromIndex, toIndex)\n}\n\n/**\n * Returns new array which is a copy of range of original array.\n */\npublic fun BooleanArray.copyOfRange(fromIndex: Int, toIndex: Int): BooleanArray {\n    return withType(\"BooleanArray\", this.asDynamic().slice(fromIndex, toIndex))\n}\n\n/**\n * Returns new array which is a copy of range of original array.\n */\npublic fun CharArray.copyOfRange(fromIndex: Int, toIndex: Int): CharArray {\n    return withType(\"CharArray\", this.asDynamic().slice(fromIndex, toIndex))\n}\n\n/**\n * Returns the range of valid indices for the array.\n */\npublic val <T> Array<out T>.indices: IntRange\n    get() = IntRange(0, lastIndex)\n\n/**\n * Returns the range of valid indices for the array.\n */\npublic val ByteArray.indices: IntRange\n    get() = IntRange(0, lastIndex)\n\n/**\n * Returns the range of valid indices for the array.\n */\npublic val ShortArray.indices: IntRange\n    get() = IntRange(0, lastIndex)\n\n/**\n * Returns the range of valid indices for the array.\n */\npublic val IntArray.indices: IntRange\n    get() = IntRange(0, lastIndex)\n\n/**\n * Returns the range of valid indices for the array.\n */\npublic val LongArray.indices: IntRange\n    get() = IntRange(0, lastIndex)\n\n/**\n * Returns the range of valid indices for the array.\n */\npublic val FloatArray.indices: IntRange\n    get() = IntRange(0, lastIndex)\n\n/**\n * Returns the range of valid indices for the array.\n */\npublic val DoubleArray.indices: IntRange\n    get() = IntRange(0, lastIndex)\n\n/**\n * Returns the range of valid indices for the array.\n */\npublic val BooleanArray.indices: IntRange\n    get() = IntRange(0, lastIndex)\n\n/**\n * Returns the range of valid indices for the array.\n */\npublic val CharArray.indices: IntRange\n    get() = IntRange(0, lastIndex)\n\n/**\n * Returns `true` if the array is empty.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Array<out T>.isEmpty(): Boolean {\n    return size == 0\n}\n\n/**\n * Returns `true` if the array is empty.\n */\n@kotlin.internal.InlineOnly\npublic inline fun ByteArray.isEmpty(): Boolean {\n    return size == 0\n}\n\n/**\n * Returns `true` if the array is empty.\n */\n@kotlin.internal.InlineOnly\npublic inline fun ShortArray.isEmpty(): Boolean {\n    return size == 0\n}\n\n/**\n * Returns `true` if the array is empty.\n */\n@kotlin.internal.InlineOnly\npublic inline fun IntArray.isEmpty(): Boolean {\n    return size == 0\n}\n\n/**\n * Returns `true` if the array is empty.\n */\n@kotlin.internal.InlineOnly\npublic inline fun LongArray.isEmpty(): Boolean {\n    return size == 0\n}\n\n/**\n * Returns `true` if the array is empty.\n */\n@kotlin.internal.InlineOnly\npublic inline fun FloatArray.isEmpty(): Boolean {\n    return size == 0\n}\n\n/**\n * Returns `true` if the array is empty.\n */\n@kotlin.internal.InlineOnly\npublic inline fun DoubleArray.isEmpty(): Boolean {\n    return size == 0\n}\n\n/**\n * Returns `true` if the array is empty.\n */\n@kotlin.internal.InlineOnly\npublic inline fun BooleanArray.isEmpty(): Boolean {\n    return size == 0\n}\n\n/**\n * Returns `true` if the array is empty.\n */\n@kotlin.internal.InlineOnly\npublic inline fun CharArray.isEmpty(): Boolean {\n    return size == 0\n}\n\n/**\n * Returns `true` if the array is not empty.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Array<out T>.isNotEmpty(): Boolean {\n    return !isEmpty()\n}\n\n/**\n * Returns `true` if the array is not empty.\n */\n@kotlin.internal.InlineOnly\npublic inline fun ByteArray.isNotEmpty(): Boolean {\n    return !isEmpty()\n}\n\n/**\n * Returns `true` if the array is not empty.\n */\n@kotlin.internal.InlineOnly\npublic inline fun ShortArray.isNotEmpty(): Boolean {\n    return !isEmpty()\n}\n\n/**\n * Returns `true` if the array is not empty.\n */\n@kotlin.internal.InlineOnly\npublic inline fun IntArray.isNotEmpty(): Boolean {\n    return !isEmpty()\n}\n\n/**\n * Returns `true` if the array is not empty.\n */\n@kotlin.internal.InlineOnly\npublic inline fun LongArray.isNotEmpty(): Boolean {\n    return !isEmpty()\n}\n\n/**\n * Returns `true` if the array is not empty.\n */\n@kotlin.internal.InlineOnly\npublic inline fun FloatArray.isNotEmpty(): Boolean {\n    return !isEmpty()\n}\n\n/**\n * Returns `true` if the array is not empty.\n */\n@kotlin.internal.InlineOnly\npublic inline fun DoubleArray.isNotEmpty(): Boolean {\n    return !isEmpty()\n}\n\n/**\n * Returns `true` if the array is not empty.\n */\n@kotlin.internal.InlineOnly\npublic inline fun BooleanArray.isNotEmpty(): Boolean {\n    return !isEmpty()\n}\n\n/**\n * Returns `true` if the array is not empty.\n */\n@kotlin.internal.InlineOnly\npublic inline fun CharArray.isNotEmpty(): Boolean {\n    return !isEmpty()\n}\n\n/**\n * Returns the last valid index for the array.\n */\npublic val <T> Array<out T>.lastIndex: Int\n    get() = size - 1\n\n/**\n * Returns the last valid index for the array.\n */\npublic val ByteArray.lastIndex: Int\n    get() = size - 1\n\n/**\n * Returns the last valid index for the array.\n */\npublic val ShortArray.lastIndex: Int\n    get() = size - 1\n\n/**\n * Returns the last valid index for the array.\n */\npublic val IntArray.lastIndex: Int\n    get() = size - 1\n\n/**\n * Returns the last valid index for the array.\n */\npublic val LongArray.lastIndex: Int\n    get() = size - 1\n\n/**\n * Returns the last valid index for the array.\n */\npublic val FloatArray.lastIndex: Int\n    get() = size - 1\n\n/**\n * Returns the last valid index for the array.\n */\npublic val DoubleArray.lastIndex: Int\n    get() = size - 1\n\n/**\n * Returns the last valid index for the array.\n */\npublic val BooleanArray.lastIndex: Int\n    get() = size - 1\n\n/**\n * Returns the last valid index for the array.\n */\npublic val CharArray.lastIndex: Int\n    get() = size - 1\n\n/**\n * Returns an array containing all elements of the original array and then the given [element].\n */\n@Suppress(\"NOTHING_TO_INLINE\")\npublic inline operator fun <T> Array<out T>.plus(element: T): Array<T> {\n    return this.asDynamic().concat(arrayOf(element))\n}\n\n/**\n * Returns an array containing all elements of the original array and then the given [element].\n */\n@Suppress(\"NOTHING_TO_INLINE\")\npublic inline operator fun ByteArray.plus(element: Byte): ByteArray {\n    return plus(byteArrayOf(element))\n}\n\n/**\n * Returns an array containing all elements of the original array and then the given [element].\n */\n@Suppress(\"NOTHING_TO_INLINE\")\npublic inline operator fun ShortArray.plus(element: Short): ShortArray {\n    return plus(shortArrayOf(element))\n}\n\n/**\n * Returns an array containing all elements of the original array and then the given [element].\n */\n@Suppress(\"NOTHING_TO_INLINE\")\npublic inline operator fun IntArray.plus(element: Int): IntArray {\n    return plus(intArrayOf(element))\n}\n\n/**\n * Returns an array containing all elements of the original array and then the given [element].\n */\n@Suppress(\"NOTHING_TO_INLINE\")\npublic inline operator fun LongArray.plus(element: Long): LongArray {\n    return plus(longArrayOf(element))\n}\n\n/**\n * Returns an array containing all elements of the original array and then the given [element].\n */\n@Suppress(\"NOTHING_TO_INLINE\")\npublic inline operator fun FloatArray.plus(element: Float): FloatArray {\n    return plus(floatArrayOf(element))\n}\n\n/**\n * Returns an array containing all elements of the original array and then the given [element].\n */\n@Suppress(\"NOTHING_TO_INLINE\")\npublic inline operator fun DoubleArray.plus(element: Double): DoubleArray {\n    return plus(doubleArrayOf(element))\n}\n\n/**\n * Returns an array containing all elements of the original array and then the given [element].\n */\n@Suppress(\"NOTHING_TO_INLINE\")\npublic inline operator fun BooleanArray.plus(element: Boolean): BooleanArray {\n    return plus(booleanArrayOf(element))\n}\n\n/**\n * Returns an array containing all elements of the original array and then the given [element].\n */\n@Suppress(\"NOTHING_TO_INLINE\")\npublic inline operator fun CharArray.plus(element: Char): CharArray {\n    return plus(charArrayOf(element))\n}\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] collection.\n */\npublic operator fun <T> Array<out T>.plus(elements: Collection<T>): Array<T> {\n    return arrayPlusCollection(this, elements)\n}\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] collection.\n */\npublic operator fun ByteArray.plus(elements: Collection<Byte>): ByteArray {\n    return fillFromCollection(this.copyOf(size + elements.size), this.size, elements)\n}\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] collection.\n */\npublic operator fun ShortArray.plus(elements: Collection<Short>): ShortArray {\n    return fillFromCollection(this.copyOf(size + elements.size), this.size, elements)\n}\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] collection.\n */\npublic operator fun IntArray.plus(elements: Collection<Int>): IntArray {\n    return fillFromCollection(this.copyOf(size + elements.size), this.size, elements)\n}\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] collection.\n */\npublic operator fun LongArray.plus(elements: Collection<Long>): LongArray {\n    return arrayPlusCollection(this, elements)\n}\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] collection.\n */\npublic operator fun FloatArray.plus(elements: Collection<Float>): FloatArray {\n    return fillFromCollection(this.copyOf(size + elements.size), this.size, elements)\n}\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] collection.\n */\npublic operator fun DoubleArray.plus(elements: Collection<Double>): DoubleArray {\n    return fillFromCollection(this.copyOf(size + elements.size), this.size, elements)\n}\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] collection.\n */\npublic operator fun BooleanArray.plus(elements: Collection<Boolean>): BooleanArray {\n    return arrayPlusCollection(this, elements)\n}\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] collection.\n */\npublic operator fun CharArray.plus(elements: Collection<Char>): CharArray {\n    return fillFromCollection(this.copyOf(size + elements.size), this.size, elements)\n}\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] array.\n */\n@Suppress(\"NOTHING_TO_INLINE\")\npublic inline operator fun <T> Array<out T>.plus(elements: Array<out T>): Array<T> {\n    return this.asDynamic().concat(elements)\n}\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] array.\n */\n@Suppress(\"NOTHING_TO_INLINE\")\npublic inline operator fun ByteArray.plus(elements: ByteArray): ByteArray {\n    return primitiveArrayConcat(this, elements)\n}\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] array.\n */\n@Suppress(\"NOTHING_TO_INLINE\")\npublic inline operator fun ShortArray.plus(elements: ShortArray): ShortArray {\n    return primitiveArrayConcat(this, elements)\n}\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] array.\n */\n@Suppress(\"NOTHING_TO_INLINE\")\npublic inline operator fun IntArray.plus(elements: IntArray): IntArray {\n    return primitiveArrayConcat(this, elements)\n}\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] array.\n */\n@Suppress(\"NOTHING_TO_INLINE\")\npublic inline operator fun LongArray.plus(elements: LongArray): LongArray {\n    return primitiveArrayConcat(this, elements)\n}\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] array.\n */\n@Suppress(\"NOTHING_TO_INLINE\")\npublic inline operator fun FloatArray.plus(elements: FloatArray): FloatArray {\n    return primitiveArrayConcat(this, elements)\n}\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] array.\n */\n@Suppress(\"NOTHING_TO_INLINE\")\npublic inline operator fun DoubleArray.plus(elements: DoubleArray): DoubleArray {\n    return primitiveArrayConcat(this, elements)\n}\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] array.\n */\n@Suppress(\"NOTHING_TO_INLINE\")\npublic inline operator fun BooleanArray.plus(elements: BooleanArray): BooleanArray {\n    return primitiveArrayConcat(this, elements)\n}\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] array.\n */\n@Suppress(\"NOTHING_TO_INLINE\")\npublic inline operator fun CharArray.plus(elements: CharArray): CharArray {\n    return primitiveArrayConcat(this, elements)\n}\n\n/**\n * Returns an array containing all elements of the original array and then the given [element].\n */\n@Suppress(\"NOTHING_TO_INLINE\")\npublic inline fun <T> Array<out T>.plusElement(element: T): Array<T> {\n    return this.asDynamic().concat(arrayOf(element))\n}\n\n/**\n * Sorts the array in-place.\n */\n@library(\"primitiveArraySort\")\npublic fun IntArray.sort(): Unit {\n    definedExternally\n}\n\n/**\n * Sorts the array in-place.\n */\npublic fun LongArray.sort(): Unit {\n    if (size > 1)\n        sort { a: Long, b: Long -> a.compareTo(b) }\n}\n\n/**\n * Sorts the array in-place.\n */\n@library(\"primitiveArraySort\")\npublic fun ByteArray.sort(): Unit {\n    definedExternally\n}\n\n/**\n * Sorts the array in-place.\n */\n@library(\"primitiveArraySort\")\npublic fun ShortArray.sort(): Unit {\n    definedExternally\n}\n\n/**\n * Sorts the array in-place.\n */\n@library(\"primitiveArraySort\")\npublic fun DoubleArray.sort(): Unit {\n    definedExternally\n}\n\n/**\n * Sorts the array in-place.\n */\n@library(\"primitiveArraySort\")\npublic fun FloatArray.sort(): Unit {\n    definedExternally\n}\n\n/**\n * Sorts the array in-place.\n */\n@library(\"primitiveArraySort\")\npublic fun CharArray.sort(): Unit {\n    definedExternally\n}\n\n/**\n * Sorts the array in-place according to the natural order of its elements.\n */\npublic fun <T: Comparable<T>> Array<out T>.sort(): Unit {\n    if (size > 1)\n        sort { a: T, b: T -> a.compareTo(b) }\n}\n\n/**\n * Sorts the array in-place according to the order specified by the given [comparison] function.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Array<out T>.sort(noinline comparison: (a: T, b: T) -> Int): Unit {\n    asDynamic().sort(comparison)\n}\n\n/**\n * Sorts the array in-place according to the order specified by the given [comparison] function.\n */\n@kotlin.internal.InlineOnly\npublic inline fun ByteArray.sort(noinline comparison: (a: Byte, b: Byte) -> Int): Unit {\n    asDynamic().sort(comparison)\n}\n\n/**\n * Sorts the array in-place according to the order specified by the given [comparison] function.\n */\n@kotlin.internal.InlineOnly\npublic inline fun ShortArray.sort(noinline comparison: (a: Short, b: Short) -> Int): Unit {\n    asDynamic().sort(comparison)\n}\n\n/**\n * Sorts the array in-place according to the order specified by the given [comparison] function.\n */\n@kotlin.internal.InlineOnly\npublic inline fun IntArray.sort(noinline comparison: (a: Int, b: Int) -> Int): Unit {\n    asDynamic().sort(comparison)\n}\n\n/**\n * Sorts the array in-place according to the order specified by the given [comparison] function.\n */\n@kotlin.internal.InlineOnly\npublic inline fun LongArray.sort(noinline comparison: (a: Long, b: Long) -> Int): Unit {\n    asDynamic().sort(comparison)\n}\n\n/**\n * Sorts the array in-place according to the order specified by the given [comparison] function.\n */\n@kotlin.internal.InlineOnly\npublic inline fun FloatArray.sort(noinline comparison: (a: Float, b: Float) -> Int): Unit {\n    asDynamic().sort(comparison)\n}\n\n/**\n * Sorts the array in-place according to the order specified by the given [comparison] function.\n */\n@kotlin.internal.InlineOnly\npublic inline fun DoubleArray.sort(noinline comparison: (a: Double, b: Double) -> Int): Unit {\n    asDynamic().sort(comparison)\n}\n\n/**\n * Sorts the array in-place according to the order specified by the given [comparison] function.\n */\n@kotlin.internal.InlineOnly\npublic inline fun CharArray.sort(noinline comparison: (a: Char, b: Char) -> Int): Unit {\n    asDynamic().sort(comparison)\n}\n\n/**\n * Sorts the array in-place according to the order specified by the given [comparator].\n */\npublic fun <T> Array<out T>.sortWith(comparator: Comparator<in T>): Unit {\n    if (size > 1)\n        sort { a, b -> comparator.compare(a, b) }\n}\n\n/**\n * Returns an array of Boolean containing all of the elements of this generic array.\n */\npublic fun Array<out Boolean>.toBooleanArray(): BooleanArray {\n    val result = BooleanArray(size)\n    for (index in indices)\n        result[index] = this[index]\n    return result\n}\n\n/**\n * Returns an array of Byte containing all of the elements of this generic array.\n */\npublic fun Array<out Byte>.toByteArray(): ByteArray {\n    val result = ByteArray(size)\n    for (index in indices)\n        result[index] = this[index]\n    return result\n}\n\n/**\n * Returns an array of Char containing all of the elements of this generic array.\n */\npublic fun Array<out Char>.toCharArray(): CharArray {\n    val result = CharArray(size)\n    for (index in indices)\n        result[index] = this[index]\n    return result\n}\n\n/**\n * Returns an array of Double containing all of the elements of this generic array.\n */\npublic fun Array<out Double>.toDoubleArray(): DoubleArray {\n    val result = DoubleArray(size)\n    for (index in indices)\n        result[index] = this[index]\n    return result\n}\n\n/**\n * Returns an array of Float containing all of the elements of this generic array.\n */\npublic fun Array<out Float>.toFloatArray(): FloatArray {\n    val result = FloatArray(size)\n    for (index in indices)\n        result[index] = this[index]\n    return result\n}\n\n/**\n * Returns an array of Int containing all of the elements of this generic array.\n */\npublic fun Array<out Int>.toIntArray(): IntArray {\n    val result = IntArray(size)\n    for (index in indices)\n        result[index] = this[index]\n    return result\n}\n\n/**\n * Returns an array of Long containing all of the elements of this generic array.\n */\npublic fun Array<out Long>.toLongArray(): LongArray {\n    val result = LongArray(size)\n    for (index in indices)\n        result[index] = this[index]\n    return result\n}\n\n/**\n * Returns an array of Short containing all of the elements of this generic array.\n */\npublic fun Array<out Short>.toShortArray(): ShortArray {\n    val result = ShortArray(size)\n    for (index in indices)\n        result[index] = this[index]\n    return result\n}\n\n/**\n * Returns a *typed* object array containing all of the elements of this primitive array.\n */\npublic fun ByteArray.toTypedArray(): Array<Byte> {\n    return js(\"[]\").slice.call(this)\n}\n\n/**\n * Returns a *typed* object array containing all of the elements of this primitive array.\n */\npublic fun ShortArray.toTypedArray(): Array<Short> {\n    return js(\"[]\").slice.call(this)\n}\n\n/**\n * Returns a *typed* object array containing all of the elements of this primitive array.\n */\npublic fun IntArray.toTypedArray(): Array<Int> {\n    return js(\"[]\").slice.call(this)\n}\n\n/**\n * Returns a *typed* object array containing all of the elements of this primitive array.\n */\npublic fun LongArray.toTypedArray(): Array<Long> {\n    return copyOf().unsafeCast<Array<Long>>()\n}\n\n/**\n * Returns a *typed* object array containing all of the elements of this primitive array.\n */\npublic fun FloatArray.toTypedArray(): Array<Float> {\n    return js(\"[]\").slice.call(this)\n}\n\n/**\n * Returns a *typed* object array containing all of the elements of this primitive array.\n */\npublic fun DoubleArray.toTypedArray(): Array<Double> {\n    return js(\"[]\").slice.call(this)\n}\n\n/**\n * Returns a *typed* object array containing all of the elements of this primitive array.\n */\npublic fun BooleanArray.toTypedArray(): Array<Boolean> {\n    return copyOf().unsafeCast<Array<Boolean>>()\n}\n\n/**\n * Returns a *typed* object array containing all of the elements of this primitive array.\n */\npublic fun CharArray.toTypedArray(): Array<Char> {\n    return Array<Char>(size, { i -> this[i] })\n}\n\n/**\n * Returns a [Map] containing key-value pairs provided by [transform] function\n * applied to elements of the given array.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n */\npublic inline fun <T, K, V> Array<out T>.associate(transform: (T) -> Pair<K, V>): Map<K, V> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateTo(LinkedHashMap<K, V>(capacity), transform)\n}\n\n/**\n * Returns a [Map] containing key-value pairs provided by [transform] function\n * applied to elements of the given array.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n */\npublic inline fun <K, V> ByteArray.associate(transform: (Byte) -> Pair<K, V>): Map<K, V> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateTo(LinkedHashMap<K, V>(capacity), transform)\n}\n\n/**\n * Returns a [Map] containing key-value pairs provided by [transform] function\n * applied to elements of the given array.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n */\npublic inline fun <K, V> ShortArray.associate(transform: (Short) -> Pair<K, V>): Map<K, V> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateTo(LinkedHashMap<K, V>(capacity), transform)\n}\n\n/**\n * Returns a [Map] containing key-value pairs provided by [transform] function\n * applied to elements of the given array.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n */\npublic inline fun <K, V> IntArray.associate(transform: (Int) -> Pair<K, V>): Map<K, V> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateTo(LinkedHashMap<K, V>(capacity), transform)\n}\n\n/**\n * Returns a [Map] containing key-value pairs provided by [transform] function\n * applied to elements of the given array.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n */\npublic inline fun <K, V> LongArray.associate(transform: (Long) -> Pair<K, V>): Map<K, V> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateTo(LinkedHashMap<K, V>(capacity), transform)\n}\n\n/**\n * Returns a [Map] containing key-value pairs provided by [transform] function\n * applied to elements of the given array.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n */\npublic inline fun <K, V> FloatArray.associate(transform: (Float) -> Pair<K, V>): Map<K, V> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateTo(LinkedHashMap<K, V>(capacity), transform)\n}\n\n/**\n * Returns a [Map] containing key-value pairs provided by [transform] function\n * applied to elements of the given array.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n */\npublic inline fun <K, V> DoubleArray.associate(transform: (Double) -> Pair<K, V>): Map<K, V> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateTo(LinkedHashMap<K, V>(capacity), transform)\n}\n\n/**\n * Returns a [Map] containing key-value pairs provided by [transform] function\n * applied to elements of the given array.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n */\npublic inline fun <K, V> BooleanArray.associate(transform: (Boolean) -> Pair<K, V>): Map<K, V> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateTo(LinkedHashMap<K, V>(capacity), transform)\n}\n\n/**\n * Returns a [Map] containing key-value pairs provided by [transform] function\n * applied to elements of the given array.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n */\npublic inline fun <K, V> CharArray.associate(transform: (Char) -> Pair<K, V>): Map<K, V> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateTo(LinkedHashMap<K, V>(capacity), transform)\n}\n\n/**\n * Returns a [Map] containing the elements from the given array indexed by the key\n * returned from [keySelector] function applied to each element.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n */\npublic inline fun <T, K> Array<out T>.associateBy(keySelector: (T) -> K): Map<K, T> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateByTo(LinkedHashMap<K, T>(capacity), keySelector)\n}\n\n/**\n * Returns a [Map] containing the elements from the given array indexed by the key\n * returned from [keySelector] function applied to each element.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n */\npublic inline fun <K> ByteArray.associateBy(keySelector: (Byte) -> K): Map<K, Byte> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateByTo(LinkedHashMap<K, Byte>(capacity), keySelector)\n}\n\n/**\n * Returns a [Map] containing the elements from the given array indexed by the key\n * returned from [keySelector] function applied to each element.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n */\npublic inline fun <K> ShortArray.associateBy(keySelector: (Short) -> K): Map<K, Short> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateByTo(LinkedHashMap<K, Short>(capacity), keySelector)\n}\n\n/**\n * Returns a [Map] containing the elements from the given array indexed by the key\n * returned from [keySelector] function applied to each element.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n */\npublic inline fun <K> IntArray.associateBy(keySelector: (Int) -> K): Map<K, Int> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateByTo(LinkedHashMap<K, Int>(capacity), keySelector)\n}\n\n/**\n * Returns a [Map] containing the elements from the given array indexed by the key\n * returned from [keySelector] function applied to each element.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n */\npublic inline fun <K> LongArray.associateBy(keySelector: (Long) -> K): Map<K, Long> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateByTo(LinkedHashMap<K, Long>(capacity), keySelector)\n}\n\n/**\n * Returns a [Map] containing the elements from the given array indexed by the key\n * returned from [keySelector] function applied to each element.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n */\npublic inline fun <K> FloatArray.associateBy(keySelector: (Float) -> K): Map<K, Float> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateByTo(LinkedHashMap<K, Float>(capacity), keySelector)\n}\n\n/**\n * Returns a [Map] containing the elements from the given array indexed by the key\n * returned from [keySelector] function applied to each element.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n */\npublic inline fun <K> DoubleArray.associateBy(keySelector: (Double) -> K): Map<K, Double> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateByTo(LinkedHashMap<K, Double>(capacity), keySelector)\n}\n\n/**\n * Returns a [Map] containing the elements from the given array indexed by the key\n * returned from [keySelector] function applied to each element.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n */\npublic inline fun <K> BooleanArray.associateBy(keySelector: (Boolean) -> K): Map<K, Boolean> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateByTo(LinkedHashMap<K, Boolean>(capacity), keySelector)\n}\n\n/**\n * Returns a [Map] containing the elements from the given array indexed by the key\n * returned from [keySelector] function applied to each element.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n */\npublic inline fun <K> CharArray.associateBy(keySelector: (Char) -> K): Map<K, Char> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateByTo(LinkedHashMap<K, Char>(capacity), keySelector)\n}\n\n/**\n * Returns a [Map] containing the values provided by [valueTransform] and indexed by [keySelector] functions applied to elements of the given array.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n */\npublic inline fun <T, K, V> Array<out T>.associateBy(keySelector: (T) -> K, valueTransform: (T) -> V): Map<K, V> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateByTo(LinkedHashMap<K, V>(capacity), keySelector, valueTransform)\n}\n\n/**\n * Returns a [Map] containing the values provided by [valueTransform] and indexed by [keySelector] functions applied to elements of the given array.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n */\npublic inline fun <K, V> ByteArray.associateBy(keySelector: (Byte) -> K, valueTransform: (Byte) -> V): Map<K, V> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateByTo(LinkedHashMap<K, V>(capacity), keySelector, valueTransform)\n}\n\n/**\n * Returns a [Map] containing the values provided by [valueTransform] and indexed by [keySelector] functions applied to elements of the given array.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n */\npublic inline fun <K, V> ShortArray.associateBy(keySelector: (Short) -> K, valueTransform: (Short) -> V): Map<K, V> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateByTo(LinkedHashMap<K, V>(capacity), keySelector, valueTransform)\n}\n\n/**\n * Returns a [Map] containing the values provided by [valueTransform] and indexed by [keySelector] functions applied to elements of the given array.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n */\npublic inline fun <K, V> IntArray.associateBy(keySelector: (Int) -> K, valueTransform: (Int) -> V): Map<K, V> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateByTo(LinkedHashMap<K, V>(capacity), keySelector, valueTransform)\n}\n\n/**\n * Returns a [Map] containing the values provided by [valueTransform] and indexed by [keySelector] functions applied to elements of the given array.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n */\npublic inline fun <K, V> LongArray.associateBy(keySelector: (Long) -> K, valueTransform: (Long) -> V): Map<K, V> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateByTo(LinkedHashMap<K, V>(capacity), keySelector, valueTransform)\n}\n\n/**\n * Returns a [Map] containing the values provided by [valueTransform] and indexed by [keySelector] functions applied to elements of the given array.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n */\npublic inline fun <K, V> FloatArray.associateBy(keySelector: (Float) -> K, valueTransform: (Float) -> V): Map<K, V> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateByTo(LinkedHashMap<K, V>(capacity), keySelector, valueTransform)\n}\n\n/**\n * Returns a [Map] containing the values provided by [valueTransform] and indexed by [keySelector] functions applied to elements of the given array.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n */\npublic inline fun <K, V> DoubleArray.associateBy(keySelector: (Double) -> K, valueTransform: (Double) -> V): Map<K, V> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateByTo(LinkedHashMap<K, V>(capacity), keySelector, valueTransform)\n}\n\n/**\n * Returns a [Map] containing the values provided by [valueTransform] and indexed by [keySelector] functions applied to elements of the given array.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n */\npublic inline fun <K, V> BooleanArray.associateBy(keySelector: (Boolean) -> K, valueTransform: (Boolean) -> V): Map<K, V> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateByTo(LinkedHashMap<K, V>(capacity), keySelector, valueTransform)\n}\n\n/**\n * Returns a [Map] containing the values provided by [valueTransform] and indexed by [keySelector] functions applied to elements of the given array.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n */\npublic inline fun <K, V> CharArray.associateBy(keySelector: (Char) -> K, valueTransform: (Char) -> V): Map<K, V> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateByTo(LinkedHashMap<K, V>(capacity), keySelector, valueTransform)\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function applied to each element of the given array\n * and value is the element itself.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n */\npublic inline fun <T, K, M : MutableMap<in K, in T>> Array<out T>.associateByTo(destination: M, keySelector: (T) -> K): M {\n    for (element in this) {\n        destination.put(keySelector(element), element)\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function applied to each element of the given array\n * and value is the element itself.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n */\npublic inline fun <K, M : MutableMap<in K, in Byte>> ByteArray.associateByTo(destination: M, keySelector: (Byte) -> K): M {\n    for (element in this) {\n        destination.put(keySelector(element), element)\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function applied to each element of the given array\n * and value is the element itself.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n */\npublic inline fun <K, M : MutableMap<in K, in Short>> ShortArray.associateByTo(destination: M, keySelector: (Short) -> K): M {\n    for (element in this) {\n        destination.put(keySelector(element), element)\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function applied to each element of the given array\n * and value is the element itself.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n */\npublic inline fun <K, M : MutableMap<in K, in Int>> IntArray.associateByTo(destination: M, keySelector: (Int) -> K): M {\n    for (element in this) {\n        destination.put(keySelector(element), element)\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function applied to each element of the given array\n * and value is the element itself.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n */\npublic inline fun <K, M : MutableMap<in K, in Long>> LongArray.associateByTo(destination: M, keySelector: (Long) -> K): M {\n    for (element in this) {\n        destination.put(keySelector(element), element)\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function applied to each element of the given array\n * and value is the element itself.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n */\npublic inline fun <K, M : MutableMap<in K, in Float>> FloatArray.associateByTo(destination: M, keySelector: (Float) -> K): M {\n    for (element in this) {\n        destination.put(keySelector(element), element)\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function applied to each element of the given array\n * and value is the element itself.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n */\npublic inline fun <K, M : MutableMap<in K, in Double>> DoubleArray.associateByTo(destination: M, keySelector: (Double) -> K): M {\n    for (element in this) {\n        destination.put(keySelector(element), element)\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function applied to each element of the given array\n * and value is the element itself.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n */\npublic inline fun <K, M : MutableMap<in K, in Boolean>> BooleanArray.associateByTo(destination: M, keySelector: (Boolean) -> K): M {\n    for (element in this) {\n        destination.put(keySelector(element), element)\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function applied to each element of the given array\n * and value is the element itself.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n */\npublic inline fun <K, M : MutableMap<in K, in Char>> CharArray.associateByTo(destination: M, keySelector: (Char) -> K): M {\n    for (element in this) {\n        destination.put(keySelector(element), element)\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function and\n * and value is provided by the [valueTransform] function applied to elements of the given array.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n */\npublic inline fun <T, K, V, M : MutableMap<in K, in V>> Array<out T>.associateByTo(destination: M, keySelector: (T) -> K, valueTransform: (T) -> V): M {\n    for (element in this) {\n        destination.put(keySelector(element), valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function and\n * and value is provided by the [valueTransform] function applied to elements of the given array.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n */\npublic inline fun <K, V, M : MutableMap<in K, in V>> ByteArray.associateByTo(destination: M, keySelector: (Byte) -> K, valueTransform: (Byte) -> V): M {\n    for (element in this) {\n        destination.put(keySelector(element), valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function and\n * and value is provided by the [valueTransform] function applied to elements of the given array.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n */\npublic inline fun <K, V, M : MutableMap<in K, in V>> ShortArray.associateByTo(destination: M, keySelector: (Short) -> K, valueTransform: (Short) -> V): M {\n    for (element in this) {\n        destination.put(keySelector(element), valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function and\n * and value is provided by the [valueTransform] function applied to elements of the given array.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n */\npublic inline fun <K, V, M : MutableMap<in K, in V>> IntArray.associateByTo(destination: M, keySelector: (Int) -> K, valueTransform: (Int) -> V): M {\n    for (element in this) {\n        destination.put(keySelector(element), valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function and\n * and value is provided by the [valueTransform] function applied to elements of the given array.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n */\npublic inline fun <K, V, M : MutableMap<in K, in V>> LongArray.associateByTo(destination: M, keySelector: (Long) -> K, valueTransform: (Long) -> V): M {\n    for (element in this) {\n        destination.put(keySelector(element), valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function and\n * and value is provided by the [valueTransform] function applied to elements of the given array.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n */\npublic inline fun <K, V, M : MutableMap<in K, in V>> FloatArray.associateByTo(destination: M, keySelector: (Float) -> K, valueTransform: (Float) -> V): M {\n    for (element in this) {\n        destination.put(keySelector(element), valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function and\n * and value is provided by the [valueTransform] function applied to elements of the given array.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n */\npublic inline fun <K, V, M : MutableMap<in K, in V>> DoubleArray.associateByTo(destination: M, keySelector: (Double) -> K, valueTransform: (Double) -> V): M {\n    for (element in this) {\n        destination.put(keySelector(element), valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function and\n * and value is provided by the [valueTransform] function applied to elements of the given array.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n */\npublic inline fun <K, V, M : MutableMap<in K, in V>> BooleanArray.associateByTo(destination: M, keySelector: (Boolean) -> K, valueTransform: (Boolean) -> V): M {\n    for (element in this) {\n        destination.put(keySelector(element), valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function and\n * and value is provided by the [valueTransform] function applied to elements of the given array.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n */\npublic inline fun <K, V, M : MutableMap<in K, in V>> CharArray.associateByTo(destination: M, keySelector: (Char) -> K, valueTransform: (Char) -> V): M {\n    for (element in this) {\n        destination.put(keySelector(element), valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs\n * provided by [transform] function applied to each element of the given array.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n */\npublic inline fun <T, K, V, M : MutableMap<in K, in V>> Array<out T>.associateTo(destination: M, transform: (T) -> Pair<K, V>): M {\n    for (element in this) {\n        destination += transform(element)\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs\n * provided by [transform] function applied to each element of the given array.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n */\npublic inline fun <K, V, M : MutableMap<in K, in V>> ByteArray.associateTo(destination: M, transform: (Byte) -> Pair<K, V>): M {\n    for (element in this) {\n        destination += transform(element)\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs\n * provided by [transform] function applied to each element of the given array.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n */\npublic inline fun <K, V, M : MutableMap<in K, in V>> ShortArray.associateTo(destination: M, transform: (Short) -> Pair<K, V>): M {\n    for (element in this) {\n        destination += transform(element)\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs\n * provided by [transform] function applied to each element of the given array.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n */\npublic inline fun <K, V, M : MutableMap<in K, in V>> IntArray.associateTo(destination: M, transform: (Int) -> Pair<K, V>): M {\n    for (element in this) {\n        destination += transform(element)\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs\n * provided by [transform] function applied to each element of the given array.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n */\npublic inline fun <K, V, M : MutableMap<in K, in V>> LongArray.associateTo(destination: M, transform: (Long) -> Pair<K, V>): M {\n    for (element in this) {\n        destination += transform(element)\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs\n * provided by [transform] function applied to each element of the given array.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n */\npublic inline fun <K, V, M : MutableMap<in K, in V>> FloatArray.associateTo(destination: M, transform: (Float) -> Pair<K, V>): M {\n    for (element in this) {\n        destination += transform(element)\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs\n * provided by [transform] function applied to each element of the given array.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n */\npublic inline fun <K, V, M : MutableMap<in K, in V>> DoubleArray.associateTo(destination: M, transform: (Double) -> Pair<K, V>): M {\n    for (element in this) {\n        destination += transform(element)\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs\n * provided by [transform] function applied to each element of the given array.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n */\npublic inline fun <K, V, M : MutableMap<in K, in V>> BooleanArray.associateTo(destination: M, transform: (Boolean) -> Pair<K, V>): M {\n    for (element in this) {\n        destination += transform(element)\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs\n * provided by [transform] function applied to each element of the given array.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n */\npublic inline fun <K, V, M : MutableMap<in K, in V>> CharArray.associateTo(destination: M, transform: (Char) -> Pair<K, V>): M {\n    for (element in this) {\n        destination += transform(element)\n    }\n    return destination\n}\n\n/**\n * Appends all elements to the given [destination] collection.\n */\npublic fun <T, C : MutableCollection<in T>> Array<out T>.toCollection(destination: C): C {\n    for (item in this) {\n        destination.add(item)\n    }\n    return destination\n}\n\n/**\n * Appends all elements to the given [destination] collection.\n */\npublic fun <C : MutableCollection<in Byte>> ByteArray.toCollection(destination: C): C {\n    for (item in this) {\n        destination.add(item)\n    }\n    return destination\n}\n\n/**\n * Appends all elements to the given [destination] collection.\n */\npublic fun <C : MutableCollection<in Short>> ShortArray.toCollection(destination: C): C {\n    for (item in this) {\n        destination.add(item)\n    }\n    return destination\n}\n\n/**\n * Appends all elements to the given [destination] collection.\n */\npublic fun <C : MutableCollection<in Int>> IntArray.toCollection(destination: C): C {\n    for (item in this) {\n        destination.add(item)\n    }\n    return destination\n}\n\n/**\n * Appends all elements to the given [destination] collection.\n */\npublic fun <C : MutableCollection<in Long>> LongArray.toCollection(destination: C): C {\n    for (item in this) {\n        destination.add(item)\n    }\n    return destination\n}\n\n/**\n * Appends all elements to the given [destination] collection.\n */\npublic fun <C : MutableCollection<in Float>> FloatArray.toCollection(destination: C): C {\n    for (item in this) {\n        destination.add(item)\n    }\n    return destination\n}\n\n/**\n * Appends all elements to the given [destination] collection.\n */\npublic fun <C : MutableCollection<in Double>> DoubleArray.toCollection(destination: C): C {\n    for (item in this) {\n        destination.add(item)\n    }\n    return destination\n}\n\n/**\n * Appends all elements to the given [destination] collection.\n */\npublic fun <C : MutableCollection<in Boolean>> BooleanArray.toCollection(destination: C): C {\n    for (item in this) {\n        destination.add(item)\n    }\n    return destination\n}\n\n/**\n * Appends all elements to the given [destination] collection.\n */\npublic fun <C : MutableCollection<in Char>> CharArray.toCollection(destination: C): C {\n    for (item in this) {\n        destination.add(item)\n    }\n    return destination\n}\n\n/**\n * Returns a [HashSet] of all elements.\n */\npublic fun <T> Array<out T>.toHashSet(): HashSet<T> {\n    return toCollection(HashSet<T>(mapCapacity(size)))\n}\n\n/**\n * Returns a [HashSet] of all elements.\n */\npublic fun ByteArray.toHashSet(): HashSet<Byte> {\n    return toCollection(HashSet<Byte>(mapCapacity(size)))\n}\n\n/**\n * Returns a [HashSet] of all elements.\n */\npublic fun ShortArray.toHashSet(): HashSet<Short> {\n    return toCollection(HashSet<Short>(mapCapacity(size)))\n}\n\n/**\n * Returns a [HashSet] of all elements.\n */\npublic fun IntArray.toHashSet(): HashSet<Int> {\n    return toCollection(HashSet<Int>(mapCapacity(size)))\n}\n\n/**\n * Returns a [HashSet] of all elements.\n */\npublic fun LongArray.toHashSet(): HashSet<Long> {\n    return toCollection(HashSet<Long>(mapCapacity(size)))\n}\n\n/**\n * Returns a [HashSet] of all elements.\n */\npublic fun FloatArray.toHashSet(): HashSet<Float> {\n    return toCollection(HashSet<Float>(mapCapacity(size)))\n}\n\n/**\n * Returns a [HashSet] of all elements.\n */\npublic fun DoubleArray.toHashSet(): HashSet<Double> {\n    return toCollection(HashSet<Double>(mapCapacity(size)))\n}\n\n/**\n * Returns a [HashSet] of all elements.\n */\npublic fun BooleanArray.toHashSet(): HashSet<Boolean> {\n    return toCollection(HashSet<Boolean>(mapCapacity(size)))\n}\n\n/**\n * Returns a [HashSet] of all elements.\n */\npublic fun CharArray.toHashSet(): HashSet<Char> {\n    return toCollection(HashSet<Char>(mapCapacity(size)))\n}\n\n/**\n * Returns a [List] containing all elements.\n */\npublic fun <T> Array<out T>.toList(): List<T> {\n    return when (size) {\n        0 -> emptyList()\n        1 -> listOf(this[0])\n        else -> this.toMutableList()\n    }\n}\n\n/**\n * Returns a [List] containing all elements.\n */\npublic fun ByteArray.toList(): List<Byte> {\n    return when (size) {\n        0 -> emptyList()\n        1 -> listOf(this[0])\n        else -> this.toMutableList()\n    }\n}\n\n/**\n * Returns a [List] containing all elements.\n */\npublic fun ShortArray.toList(): List<Short> {\n    return when (size) {\n        0 -> emptyList()\n        1 -> listOf(this[0])\n        else -> this.toMutableList()\n    }\n}\n\n/**\n * Returns a [List] containing all elements.\n */\npublic fun IntArray.toList(): List<Int> {\n    return when (size) {\n        0 -> emptyList()\n        1 -> listOf(this[0])\n        else -> this.toMutableList()\n    }\n}\n\n/**\n * Returns a [List] containing all elements.\n */\npublic fun LongArray.toList(): List<Long> {\n    return when (size) {\n        0 -> emptyList()\n        1 -> listOf(this[0])\n        else -> this.toMutableList()\n    }\n}\n\n/**\n * Returns a [List] containing all elements.\n */\npublic fun FloatArray.toList(): List<Float> {\n    return when (size) {\n        0 -> emptyList()\n        1 -> listOf(this[0])\n        else -> this.toMutableList()\n    }\n}\n\n/**\n * Returns a [List] containing all elements.\n */\npublic fun DoubleArray.toList(): List<Double> {\n    return when (size) {\n        0 -> emptyList()\n        1 -> listOf(this[0])\n        else -> this.toMutableList()\n    }\n}\n\n/**\n * Returns a [List] containing all elements.\n */\npublic fun BooleanArray.toList(): List<Boolean> {\n    return when (size) {\n        0 -> emptyList()\n        1 -> listOf(this[0])\n        else -> this.toMutableList()\n    }\n}\n\n/**\n * Returns a [List] containing all elements.\n */\npublic fun CharArray.toList(): List<Char> {\n    return when (size) {\n        0 -> emptyList()\n        1 -> listOf(this[0])\n        else -> this.toMutableList()\n    }\n}\n\n/**\n * Returns a [MutableList] filled with all elements of this array.\n */\npublic fun <T> Array<out T>.toMutableList(): MutableList<T> {\n    return ArrayList(this.asCollection())\n}\n\n/**\n * Returns a [MutableList] filled with all elements of this array.\n */\npublic fun ByteArray.toMutableList(): MutableList<Byte> {\n    val list = ArrayList<Byte>(size)\n    for (item in this) list.add(item)\n    return list\n}\n\n/**\n * Returns a [MutableList] filled with all elements of this array.\n */\npublic fun ShortArray.toMutableList(): MutableList<Short> {\n    val list = ArrayList<Short>(size)\n    for (item in this) list.add(item)\n    return list\n}\n\n/**\n * Returns a [MutableList] filled with all elements of this array.\n */\npublic fun IntArray.toMutableList(): MutableList<Int> {\n    val list = ArrayList<Int>(size)\n    for (item in this) list.add(item)\n    return list\n}\n\n/**\n * Returns a [MutableList] filled with all elements of this array.\n */\npublic fun LongArray.toMutableList(): MutableList<Long> {\n    val list = ArrayList<Long>(size)\n    for (item in this) list.add(item)\n    return list\n}\n\n/**\n * Returns a [MutableList] filled with all elements of this array.\n */\npublic fun FloatArray.toMutableList(): MutableList<Float> {\n    val list = ArrayList<Float>(size)\n    for (item in this) list.add(item)\n    return list\n}\n\n/**\n * Returns a [MutableList] filled with all elements of this array.\n */\npublic fun DoubleArray.toMutableList(): MutableList<Double> {\n    val list = ArrayList<Double>(size)\n    for (item in this) list.add(item)\n    return list\n}\n\n/**\n * Returns a [MutableList] filled with all elements of this array.\n */\npublic fun BooleanArray.toMutableList(): MutableList<Boolean> {\n    val list = ArrayList<Boolean>(size)\n    for (item in this) list.add(item)\n    return list\n}\n\n/**\n * Returns a [MutableList] filled with all elements of this array.\n */\npublic fun CharArray.toMutableList(): MutableList<Char> {\n    val list = ArrayList<Char>(size)\n    for (item in this) list.add(item)\n    return list\n}\n\n/**\n * Returns a [Set] of all elements.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic fun <T> Array<out T>.toSet(): Set<T> {\n    return when (size) {\n        0 -> emptySet()\n        1 -> setOf(this[0])\n        else -> toCollection(LinkedHashSet<T>(mapCapacity(size)))\n    }\n}\n\n/**\n * Returns a [Set] of all elements.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic fun ByteArray.toSet(): Set<Byte> {\n    return when (size) {\n        0 -> emptySet()\n        1 -> setOf(this[0])\n        else -> toCollection(LinkedHashSet<Byte>(mapCapacity(size)))\n    }\n}\n\n/**\n * Returns a [Set] of all elements.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic fun ShortArray.toSet(): Set<Short> {\n    return when (size) {\n        0 -> emptySet()\n        1 -> setOf(this[0])\n        else -> toCollection(LinkedHashSet<Short>(mapCapacity(size)))\n    }\n}\n\n/**\n * Returns a [Set] of all elements.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic fun IntArray.toSet(): Set<Int> {\n    return when (size) {\n        0 -> emptySet()\n        1 -> setOf(this[0])\n        else -> toCollection(LinkedHashSet<Int>(mapCapacity(size)))\n    }\n}\n\n/**\n * Returns a [Set] of all elements.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic fun LongArray.toSet(): Set<Long> {\n    return when (size) {\n        0 -> emptySet()\n        1 -> setOf(this[0])\n        else -> toCollection(LinkedHashSet<Long>(mapCapacity(size)))\n    }\n}\n\n/**\n * Returns a [Set] of all elements.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic fun FloatArray.toSet(): Set<Float> {\n    return when (size) {\n        0 -> emptySet()\n        1 -> setOf(this[0])\n        else -> toCollection(LinkedHashSet<Float>(mapCapacity(size)))\n    }\n}\n\n/**\n * Returns a [Set] of all elements.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic fun DoubleArray.toSet(): Set<Double> {\n    return when (size) {\n        0 -> emptySet()\n        1 -> setOf(this[0])\n        else -> toCollection(LinkedHashSet<Double>(mapCapacity(size)))\n    }\n}\n\n/**\n * Returns a [Set] of all elements.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic fun BooleanArray.toSet(): Set<Boolean> {\n    return when (size) {\n        0 -> emptySet()\n        1 -> setOf(this[0])\n        else -> toCollection(LinkedHashSet<Boolean>(mapCapacity(size)))\n    }\n}\n\n/**\n * Returns a [Set] of all elements.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic fun CharArray.toSet(): Set<Char> {\n    return when (size) {\n        0 -> emptySet()\n        1 -> setOf(this[0])\n        else -> toCollection(LinkedHashSet<Char>(mapCapacity(size)))\n    }\n}\n\n/**\n * Returns a single list of all elements yielded from results of [transform] function being invoked on each element of original array.\n */\npublic inline fun <T, R> Array<out T>.flatMap(transform: (T) -> Iterable<R>): List<R> {\n    return flatMapTo(ArrayList<R>(), transform)\n}\n\n/**\n * Returns a single list of all elements yielded from results of [transform] function being invoked on each element of original array.\n */\npublic inline fun <R> ByteArray.flatMap(transform: (Byte) -> Iterable<R>): List<R> {\n    return flatMapTo(ArrayList<R>(), transform)\n}\n\n/**\n * Returns a single list of all elements yielded from results of [transform] function being invoked on each element of original array.\n */\npublic inline fun <R> ShortArray.flatMap(transform: (Short) -> Iterable<R>): List<R> {\n    return flatMapTo(ArrayList<R>(), transform)\n}\n\n/**\n * Returns a single list of all elements yielded from results of [transform] function being invoked on each element of original array.\n */\npublic inline fun <R> IntArray.flatMap(transform: (Int) -> Iterable<R>): List<R> {\n    return flatMapTo(ArrayList<R>(), transform)\n}\n\n/**\n * Returns a single list of all elements yielded from results of [transform] function being invoked on each element of original array.\n */\npublic inline fun <R> LongArray.flatMap(transform: (Long) -> Iterable<R>): List<R> {\n    return flatMapTo(ArrayList<R>(), transform)\n}\n\n/**\n * Returns a single list of all elements yielded from results of [transform] function being invoked on each element of original array.\n */\npublic inline fun <R> FloatArray.flatMap(transform: (Float) -> Iterable<R>): List<R> {\n    return flatMapTo(ArrayList<R>(), transform)\n}\n\n/**\n * Returns a single list of all elements yielded from results of [transform] function being invoked on each element of original array.\n */\npublic inline fun <R> DoubleArray.flatMap(transform: (Double) -> Iterable<R>): List<R> {\n    return flatMapTo(ArrayList<R>(), transform)\n}\n\n/**\n * Returns a single list of all elements yielded from results of [transform] function being invoked on each element of original array.\n */\npublic inline fun <R> BooleanArray.flatMap(transform: (Boolean) -> Iterable<R>): List<R> {\n    return flatMapTo(ArrayList<R>(), transform)\n}\n\n/**\n * Returns a single list of all elements yielded from results of [transform] function being invoked on each element of original array.\n */\npublic inline fun <R> CharArray.flatMap(transform: (Char) -> Iterable<R>): List<R> {\n    return flatMapTo(ArrayList<R>(), transform)\n}\n\n/**\n * Appends all elements yielded from results of [transform] function being invoked on each element of original array, to the given [destination].\n */\npublic inline fun <T, R, C : MutableCollection<in R>> Array<out T>.flatMapTo(destination: C, transform: (T) -> Iterable<R>): C {\n    for (element in this) {\n        val list = transform(element)\n        destination.addAll(list)\n    }\n    return destination\n}\n\n/**\n * Appends all elements yielded from results of [transform] function being invoked on each element of original array, to the given [destination].\n */\npublic inline fun <R, C : MutableCollection<in R>> ByteArray.flatMapTo(destination: C, transform: (Byte) -> Iterable<R>): C {\n    for (element in this) {\n        val list = transform(element)\n        destination.addAll(list)\n    }\n    return destination\n}\n\n/**\n * Appends all elements yielded from results of [transform] function being invoked on each element of original array, to the given [destination].\n */\npublic inline fun <R, C : MutableCollection<in R>> ShortArray.flatMapTo(destination: C, transform: (Short) -> Iterable<R>): C {\n    for (element in this) {\n        val list = transform(element)\n        destination.addAll(list)\n    }\n    return destination\n}\n\n/**\n * Appends all elements yielded from results of [transform] function being invoked on each element of original array, to the given [destination].\n */\npublic inline fun <R, C : MutableCollection<in R>> IntArray.flatMapTo(destination: C, transform: (Int) -> Iterable<R>): C {\n    for (element in this) {\n        val list = transform(element)\n        destination.addAll(list)\n    }\n    return destination\n}\n\n/**\n * Appends all elements yielded from results of [transform] function being invoked on each element of original array, to the given [destination].\n */\npublic inline fun <R, C : MutableCollection<in R>> LongArray.flatMapTo(destination: C, transform: (Long) -> Iterable<R>): C {\n    for (element in this) {\n        val list = transform(element)\n        destination.addAll(list)\n    }\n    return destination\n}\n\n/**\n * Appends all elements yielded from results of [transform] function being invoked on each element of original array, to the given [destination].\n */\npublic inline fun <R, C : MutableCollection<in R>> FloatArray.flatMapTo(destination: C, transform: (Float) -> Iterable<R>): C {\n    for (element in this) {\n        val list = transform(element)\n        destination.addAll(list)\n    }\n    return destination\n}\n\n/**\n * Appends all elements yielded from results of [transform] function being invoked on each element of original array, to the given [destination].\n */\npublic inline fun <R, C : MutableCollection<in R>> DoubleArray.flatMapTo(destination: C, transform: (Double) -> Iterable<R>): C {\n    for (element in this) {\n        val list = transform(element)\n        destination.addAll(list)\n    }\n    return destination\n}\n\n/**\n * Appends all elements yielded from results of [transform] function being invoked on each element of original array, to the given [destination].\n */\npublic inline fun <R, C : MutableCollection<in R>> BooleanArray.flatMapTo(destination: C, transform: (Boolean) -> Iterable<R>): C {\n    for (element in this) {\n        val list = transform(element)\n        destination.addAll(list)\n    }\n    return destination\n}\n\n/**\n * Appends all elements yielded from results of [transform] function being invoked on each element of original array, to the given [destination].\n */\npublic inline fun <R, C : MutableCollection<in R>> CharArray.flatMapTo(destination: C, transform: (Char) -> Iterable<R>): C {\n    for (element in this) {\n        val list = transform(element)\n        destination.addAll(list)\n    }\n    return destination\n}\n\n/**\n * Groups elements of the original array by the key returned by the given [keySelector] function\n * applied to each element and returns a map where each group key is associated with a list of corresponding elements.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original array.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\npublic inline fun <T, K> Array<out T>.groupBy(keySelector: (T) -> K): Map<K, List<T>> {\n    return groupByTo(LinkedHashMap<K, MutableList<T>>(), keySelector)\n}\n\n/**\n * Groups elements of the original array by the key returned by the given [keySelector] function\n * applied to each element and returns a map where each group key is associated with a list of corresponding elements.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original array.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\npublic inline fun <K> ByteArray.groupBy(keySelector: (Byte) -> K): Map<K, List<Byte>> {\n    return groupByTo(LinkedHashMap<K, MutableList<Byte>>(), keySelector)\n}\n\n/**\n * Groups elements of the original array by the key returned by the given [keySelector] function\n * applied to each element and returns a map where each group key is associated with a list of corresponding elements.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original array.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\npublic inline fun <K> ShortArray.groupBy(keySelector: (Short) -> K): Map<K, List<Short>> {\n    return groupByTo(LinkedHashMap<K, MutableList<Short>>(), keySelector)\n}\n\n/**\n * Groups elements of the original array by the key returned by the given [keySelector] function\n * applied to each element and returns a map where each group key is associated with a list of corresponding elements.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original array.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\npublic inline fun <K> IntArray.groupBy(keySelector: (Int) -> K): Map<K, List<Int>> {\n    return groupByTo(LinkedHashMap<K, MutableList<Int>>(), keySelector)\n}\n\n/**\n * Groups elements of the original array by the key returned by the given [keySelector] function\n * applied to each element and returns a map where each group key is associated with a list of corresponding elements.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original array.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\npublic inline fun <K> LongArray.groupBy(keySelector: (Long) -> K): Map<K, List<Long>> {\n    return groupByTo(LinkedHashMap<K, MutableList<Long>>(), keySelector)\n}\n\n/**\n * Groups elements of the original array by the key returned by the given [keySelector] function\n * applied to each element and returns a map where each group key is associated with a list of corresponding elements.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original array.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\npublic inline fun <K> FloatArray.groupBy(keySelector: (Float) -> K): Map<K, List<Float>> {\n    return groupByTo(LinkedHashMap<K, MutableList<Float>>(), keySelector)\n}\n\n/**\n * Groups elements of the original array by the key returned by the given [keySelector] function\n * applied to each element and returns a map where each group key is associated with a list of corresponding elements.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original array.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\npublic inline fun <K> DoubleArray.groupBy(keySelector: (Double) -> K): Map<K, List<Double>> {\n    return groupByTo(LinkedHashMap<K, MutableList<Double>>(), keySelector)\n}\n\n/**\n * Groups elements of the original array by the key returned by the given [keySelector] function\n * applied to each element and returns a map where each group key is associated with a list of corresponding elements.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original array.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\npublic inline fun <K> BooleanArray.groupBy(keySelector: (Boolean) -> K): Map<K, List<Boolean>> {\n    return groupByTo(LinkedHashMap<K, MutableList<Boolean>>(), keySelector)\n}\n\n/**\n * Groups elements of the original array by the key returned by the given [keySelector] function\n * applied to each element and returns a map where each group key is associated with a list of corresponding elements.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original array.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\npublic inline fun <K> CharArray.groupBy(keySelector: (Char) -> K): Map<K, List<Char>> {\n    return groupByTo(LinkedHashMap<K, MutableList<Char>>(), keySelector)\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original array\n * by the key returned by the given [keySelector] function applied to the element\n * and returns a map where each group key is associated with a list of corresponding values.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original array.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\npublic inline fun <T, K, V> Array<out T>.groupBy(keySelector: (T) -> K, valueTransform: (T) -> V): Map<K, List<V>> {\n    return groupByTo(LinkedHashMap<K, MutableList<V>>(), keySelector, valueTransform)\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original array\n * by the key returned by the given [keySelector] function applied to the element\n * and returns a map where each group key is associated with a list of corresponding values.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original array.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\npublic inline fun <K, V> ByteArray.groupBy(keySelector: (Byte) -> K, valueTransform: (Byte) -> V): Map<K, List<V>> {\n    return groupByTo(LinkedHashMap<K, MutableList<V>>(), keySelector, valueTransform)\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original array\n * by the key returned by the given [keySelector] function applied to the element\n * and returns a map where each group key is associated with a list of corresponding values.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original array.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\npublic inline fun <K, V> ShortArray.groupBy(keySelector: (Short) -> K, valueTransform: (Short) -> V): Map<K, List<V>> {\n    return groupByTo(LinkedHashMap<K, MutableList<V>>(), keySelector, valueTransform)\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original array\n * by the key returned by the given [keySelector] function applied to the element\n * and returns a map where each group key is associated with a list of corresponding values.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original array.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\npublic inline fun <K, V> IntArray.groupBy(keySelector: (Int) -> K, valueTransform: (Int) -> V): Map<K, List<V>> {\n    return groupByTo(LinkedHashMap<K, MutableList<V>>(), keySelector, valueTransform)\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original array\n * by the key returned by the given [keySelector] function applied to the element\n * and returns a map where each group key is associated with a list of corresponding values.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original array.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\npublic inline fun <K, V> LongArray.groupBy(keySelector: (Long) -> K, valueTransform: (Long) -> V): Map<K, List<V>> {\n    return groupByTo(LinkedHashMap<K, MutableList<V>>(), keySelector, valueTransform)\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original array\n * by the key returned by the given [keySelector] function applied to the element\n * and returns a map where each group key is associated with a list of corresponding values.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original array.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\npublic inline fun <K, V> FloatArray.groupBy(keySelector: (Float) -> K, valueTransform: (Float) -> V): Map<K, List<V>> {\n    return groupByTo(LinkedHashMap<K, MutableList<V>>(), keySelector, valueTransform)\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original array\n * by the key returned by the given [keySelector] function applied to the element\n * and returns a map where each group key is associated with a list of corresponding values.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original array.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\npublic inline fun <K, V> DoubleArray.groupBy(keySelector: (Double) -> K, valueTransform: (Double) -> V): Map<K, List<V>> {\n    return groupByTo(LinkedHashMap<K, MutableList<V>>(), keySelector, valueTransform)\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original array\n * by the key returned by the given [keySelector] function applied to the element\n * and returns a map where each group key is associated with a list of corresponding values.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original array.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\npublic inline fun <K, V> BooleanArray.groupBy(keySelector: (Boolean) -> K, valueTransform: (Boolean) -> V): Map<K, List<V>> {\n    return groupByTo(LinkedHashMap<K, MutableList<V>>(), keySelector, valueTransform)\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original array\n * by the key returned by the given [keySelector] function applied to the element\n * and returns a map where each group key is associated with a list of corresponding values.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original array.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\npublic inline fun <K, V> CharArray.groupBy(keySelector: (Char) -> K, valueTransform: (Char) -> V): Map<K, List<V>> {\n    return groupByTo(LinkedHashMap<K, MutableList<V>>(), keySelector, valueTransform)\n}\n\n/**\n * Groups elements of the original array by the key returned by the given [keySelector] function\n * applied to each element and puts to the [destination] map each group key associated with a list of corresponding elements.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\npublic inline fun <T, K, M : MutableMap<in K, MutableList<T>>> Array<out T>.groupByTo(destination: M, keySelector: (T) -> K): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<T>() }\n        list.add(element)\n    }\n    return destination\n}\n\n/**\n * Groups elements of the original array by the key returned by the given [keySelector] function\n * applied to each element and puts to the [destination] map each group key associated with a list of corresponding elements.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\npublic inline fun <K, M : MutableMap<in K, MutableList<Byte>>> ByteArray.groupByTo(destination: M, keySelector: (Byte) -> K): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<Byte>() }\n        list.add(element)\n    }\n    return destination\n}\n\n/**\n * Groups elements of the original array by the key returned by the given [keySelector] function\n * applied to each element and puts to the [destination] map each group key associated with a list of corresponding elements.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\npublic inline fun <K, M : MutableMap<in K, MutableList<Short>>> ShortArray.groupByTo(destination: M, keySelector: (Short) -> K): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<Short>() }\n        list.add(element)\n    }\n    return destination\n}\n\n/**\n * Groups elements of the original array by the key returned by the given [keySelector] function\n * applied to each element and puts to the [destination] map each group key associated with a list of corresponding elements.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\npublic inline fun <K, M : MutableMap<in K, MutableList<Int>>> IntArray.groupByTo(destination: M, keySelector: (Int) -> K): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<Int>() }\n        list.add(element)\n    }\n    return destination\n}\n\n/**\n * Groups elements of the original array by the key returned by the given [keySelector] function\n * applied to each element and puts to the [destination] map each group key associated with a list of corresponding elements.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\npublic inline fun <K, M : MutableMap<in K, MutableList<Long>>> LongArray.groupByTo(destination: M, keySelector: (Long) -> K): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<Long>() }\n        list.add(element)\n    }\n    return destination\n}\n\n/**\n * Groups elements of the original array by the key returned by the given [keySelector] function\n * applied to each element and puts to the [destination] map each group key associated with a list of corresponding elements.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\npublic inline fun <K, M : MutableMap<in K, MutableList<Float>>> FloatArray.groupByTo(destination: M, keySelector: (Float) -> K): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<Float>() }\n        list.add(element)\n    }\n    return destination\n}\n\n/**\n * Groups elements of the original array by the key returned by the given [keySelector] function\n * applied to each element and puts to the [destination] map each group key associated with a list of corresponding elements.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\npublic inline fun <K, M : MutableMap<in K, MutableList<Double>>> DoubleArray.groupByTo(destination: M, keySelector: (Double) -> K): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<Double>() }\n        list.add(element)\n    }\n    return destination\n}\n\n/**\n * Groups elements of the original array by the key returned by the given [keySelector] function\n * applied to each element and puts to the [destination] map each group key associated with a list of corresponding elements.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\npublic inline fun <K, M : MutableMap<in K, MutableList<Boolean>>> BooleanArray.groupByTo(destination: M, keySelector: (Boolean) -> K): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<Boolean>() }\n        list.add(element)\n    }\n    return destination\n}\n\n/**\n * Groups elements of the original array by the key returned by the given [keySelector] function\n * applied to each element and puts to the [destination] map each group key associated with a list of corresponding elements.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\npublic inline fun <K, M : MutableMap<in K, MutableList<Char>>> CharArray.groupByTo(destination: M, keySelector: (Char) -> K): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<Char>() }\n        list.add(element)\n    }\n    return destination\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original array\n * by the key returned by the given [keySelector] function applied to the element\n * and puts to the [destination] map each group key associated with a list of corresponding values.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\npublic inline fun <T, K, V, M : MutableMap<in K, MutableList<V>>> Array<out T>.groupByTo(destination: M, keySelector: (T) -> K, valueTransform: (T) -> V): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<V>() }\n        list.add(valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original array\n * by the key returned by the given [keySelector] function applied to the element\n * and puts to the [destination] map each group key associated with a list of corresponding values.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\npublic inline fun <K, V, M : MutableMap<in K, MutableList<V>>> ByteArray.groupByTo(destination: M, keySelector: (Byte) -> K, valueTransform: (Byte) -> V): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<V>() }\n        list.add(valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original array\n * by the key returned by the given [keySelector] function applied to the element\n * and puts to the [destination] map each group key associated with a list of corresponding values.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\npublic inline fun <K, V, M : MutableMap<in K, MutableList<V>>> ShortArray.groupByTo(destination: M, keySelector: (Short) -> K, valueTransform: (Short) -> V): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<V>() }\n        list.add(valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original array\n * by the key returned by the given [keySelector] function applied to the element\n * and puts to the [destination] map each group key associated with a list of corresponding values.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\npublic inline fun <K, V, M : MutableMap<in K, MutableList<V>>> IntArray.groupByTo(destination: M, keySelector: (Int) -> K, valueTransform: (Int) -> V): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<V>() }\n        list.add(valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original array\n * by the key returned by the given [keySelector] function applied to the element\n * and puts to the [destination] map each group key associated with a list of corresponding values.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\npublic inline fun <K, V, M : MutableMap<in K, MutableList<V>>> LongArray.groupByTo(destination: M, keySelector: (Long) -> K, valueTransform: (Long) -> V): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<V>() }\n        list.add(valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original array\n * by the key returned by the given [keySelector] function applied to the element\n * and puts to the [destination] map each group key associated with a list of corresponding values.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\npublic inline fun <K, V, M : MutableMap<in K, MutableList<V>>> FloatArray.groupByTo(destination: M, keySelector: (Float) -> K, valueTransform: (Float) -> V): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<V>() }\n        list.add(valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original array\n * by the key returned by the given [keySelector] function applied to the element\n * and puts to the [destination] map each group key associated with a list of corresponding values.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\npublic inline fun <K, V, M : MutableMap<in K, MutableList<V>>> DoubleArray.groupByTo(destination: M, keySelector: (Double) -> K, valueTransform: (Double) -> V): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<V>() }\n        list.add(valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original array\n * by the key returned by the given [keySelector] function applied to the element\n * and puts to the [destination] map each group key associated with a list of corresponding values.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\npublic inline fun <K, V, M : MutableMap<in K, MutableList<V>>> BooleanArray.groupByTo(destination: M, keySelector: (Boolean) -> K, valueTransform: (Boolean) -> V): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<V>() }\n        list.add(valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original array\n * by the key returned by the given [keySelector] function applied to the element\n * and puts to the [destination] map each group key associated with a list of corresponding values.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\npublic inline fun <K, V, M : MutableMap<in K, MutableList<V>>> CharArray.groupByTo(destination: M, keySelector: (Char) -> K, valueTransform: (Char) -> V): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<V>() }\n        list.add(valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Creates a [Grouping] source from an array to be used later with one of group-and-fold operations\n * using the specified [keySelector] function to extract a key from each element.\n * \n * @sample samples.collections.Collections.Transformations.groupingByEachCount\n */\n@SinceKotlin(\"1.1\")\npublic inline fun <T, K> Array<out T>.groupingBy(crossinline keySelector: (T) -> K): Grouping<T, K> {\n    return object : Grouping<T, K> {\n        override fun sourceIterator(): Iterator<T> = this@groupingBy.iterator()\n        override fun keyOf(element: T): K = keySelector(element)\n    }\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each element in the original array.\n */\npublic inline fun <T, R> Array<out T>.map(transform: (T) -> R): List<R> {\n    return mapTo(ArrayList<R>(size), transform)\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each element in the original array.\n */\npublic inline fun <R> ByteArray.map(transform: (Byte) -> R): List<R> {\n    return mapTo(ArrayList<R>(size), transform)\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each element in the original array.\n */\npublic inline fun <R> ShortArray.map(transform: (Short) -> R): List<R> {\n    return mapTo(ArrayList<R>(size), transform)\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each element in the original array.\n */\npublic inline fun <R> IntArray.map(transform: (Int) -> R): List<R> {\n    return mapTo(ArrayList<R>(size), transform)\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each element in the original array.\n */\npublic inline fun <R> LongArray.map(transform: (Long) -> R): List<R> {\n    return mapTo(ArrayList<R>(size), transform)\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each element in the original array.\n */\npublic inline fun <R> FloatArray.map(transform: (Float) -> R): List<R> {\n    return mapTo(ArrayList<R>(size), transform)\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each element in the original array.\n */\npublic inline fun <R> DoubleArray.map(transform: (Double) -> R): List<R> {\n    return mapTo(ArrayList<R>(size), transform)\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each element in the original array.\n */\npublic inline fun <R> BooleanArray.map(transform: (Boolean) -> R): List<R> {\n    return mapTo(ArrayList<R>(size), transform)\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each element in the original array.\n */\npublic inline fun <R> CharArray.map(transform: (Char) -> R): List<R> {\n    return mapTo(ArrayList<R>(size), transform)\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each element and its index in the original array.\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <T, R> Array<out T>.mapIndexed(transform: (index: Int, T) -> R): List<R> {\n    return mapIndexedTo(ArrayList<R>(size), transform)\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each element and its index in the original array.\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <R> ByteArray.mapIndexed(transform: (index: Int, Byte) -> R): List<R> {\n    return mapIndexedTo(ArrayList<R>(size), transform)\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each element and its index in the original array.\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <R> ShortArray.mapIndexed(transform: (index: Int, Short) -> R): List<R> {\n    return mapIndexedTo(ArrayList<R>(size), transform)\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each element and its index in the original array.\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <R> IntArray.mapIndexed(transform: (index: Int, Int) -> R): List<R> {\n    return mapIndexedTo(ArrayList<R>(size), transform)\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each element and its index in the original array.\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <R> LongArray.mapIndexed(transform: (index: Int, Long) -> R): List<R> {\n    return mapIndexedTo(ArrayList<R>(size), transform)\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each element and its index in the original array.\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <R> FloatArray.mapIndexed(transform: (index: Int, Float) -> R): List<R> {\n    return mapIndexedTo(ArrayList<R>(size), transform)\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each element and its index in the original array.\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <R> DoubleArray.mapIndexed(transform: (index: Int, Double) -> R): List<R> {\n    return mapIndexedTo(ArrayList<R>(size), transform)\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each element and its index in the original array.\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <R> BooleanArray.mapIndexed(transform: (index: Int, Boolean) -> R): List<R> {\n    return mapIndexedTo(ArrayList<R>(size), transform)\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each element and its index in the original array.\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <R> CharArray.mapIndexed(transform: (index: Int, Char) -> R): List<R> {\n    return mapIndexedTo(ArrayList<R>(size), transform)\n}\n\n/**\n * Returns a list containing only the non-null results of applying the given [transform] function\n * to each element and its index in the original array.\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <T, R : Any> Array<out T>.mapIndexedNotNull(transform: (index: Int, T) -> R?): List<R> {\n    return mapIndexedNotNullTo(ArrayList<R>(), transform)\n}\n\n/**\n * Applies the given [transform] function to each element and its index in the original array\n * and appends only the non-null results to the given [destination].\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <T, R : Any, C : MutableCollection<in R>> Array<out T>.mapIndexedNotNullTo(destination: C, transform: (index: Int, T) -> R?): C {\n    forEachIndexed { index, element -> transform(index, element)?.let { destination.add(it) } }\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element and its index in the original array\n * and appends the results to the given [destination].\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <T, R, C : MutableCollection<in R>> Array<out T>.mapIndexedTo(destination: C, transform: (index: Int, T) -> R): C {\n    var index = 0\n    for (item in this)\n        destination.add(transform(index++, item))\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element and its index in the original array\n * and appends the results to the given [destination].\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <R, C : MutableCollection<in R>> ByteArray.mapIndexedTo(destination: C, transform: (index: Int, Byte) -> R): C {\n    var index = 0\n    for (item in this)\n        destination.add(transform(index++, item))\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element and its index in the original array\n * and appends the results to the given [destination].\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <R, C : MutableCollection<in R>> ShortArray.mapIndexedTo(destination: C, transform: (index: Int, Short) -> R): C {\n    var index = 0\n    for (item in this)\n        destination.add(transform(index++, item))\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element and its index in the original array\n * and appends the results to the given [destination].\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <R, C : MutableCollection<in R>> IntArray.mapIndexedTo(destination: C, transform: (index: Int, Int) -> R): C {\n    var index = 0\n    for (item in this)\n        destination.add(transform(index++, item))\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element and its index in the original array\n * and appends the results to the given [destination].\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <R, C : MutableCollection<in R>> LongArray.mapIndexedTo(destination: C, transform: (index: Int, Long) -> R): C {\n    var index = 0\n    for (item in this)\n        destination.add(transform(index++, item))\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element and its index in the original array\n * and appends the results to the given [destination].\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <R, C : MutableCollection<in R>> FloatArray.mapIndexedTo(destination: C, transform: (index: Int, Float) -> R): C {\n    var index = 0\n    for (item in this)\n        destination.add(transform(index++, item))\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element and its index in the original array\n * and appends the results to the given [destination].\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <R, C : MutableCollection<in R>> DoubleArray.mapIndexedTo(destination: C, transform: (index: Int, Double) -> R): C {\n    var index = 0\n    for (item in this)\n        destination.add(transform(index++, item))\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element and its index in the original array\n * and appends the results to the given [destination].\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <R, C : MutableCollection<in R>> BooleanArray.mapIndexedTo(destination: C, transform: (index: Int, Boolean) -> R): C {\n    var index = 0\n    for (item in this)\n        destination.add(transform(index++, item))\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element and its index in the original array\n * and appends the results to the given [destination].\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <R, C : MutableCollection<in R>> CharArray.mapIndexedTo(destination: C, transform: (index: Int, Char) -> R): C {\n    var index = 0\n    for (item in this)\n        destination.add(transform(index++, item))\n    return destination\n}\n\n/**\n * Returns a list containing only the non-null results of applying the given [transform] function\n * to each element in the original array.\n */\npublic inline fun <T, R : Any> Array<out T>.mapNotNull(transform: (T) -> R?): List<R> {\n    return mapNotNullTo(ArrayList<R>(), transform)\n}\n\n/**\n * Applies the given [transform] function to each element in the original array\n * and appends only the non-null results to the given [destination].\n */\npublic inline fun <T, R : Any, C : MutableCollection<in R>> Array<out T>.mapNotNullTo(destination: C, transform: (T) -> R?): C {\n    forEach { element -> transform(element)?.let { destination.add(it) } }\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element of the original array\n * and appends the results to the given [destination].\n */\npublic inline fun <T, R, C : MutableCollection<in R>> Array<out T>.mapTo(destination: C, transform: (T) -> R): C {\n    for (item in this)\n        destination.add(transform(item))\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element of the original array\n * and appends the results to the given [destination].\n */\npublic inline fun <R, C : MutableCollection<in R>> ByteArray.mapTo(destination: C, transform: (Byte) -> R): C {\n    for (item in this)\n        destination.add(transform(item))\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element of the original array\n * and appends the results to the given [destination].\n */\npublic inline fun <R, C : MutableCollection<in R>> ShortArray.mapTo(destination: C, transform: (Short) -> R): C {\n    for (item in this)\n        destination.add(transform(item))\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element of the original array\n * and appends the results to the given [destination].\n */\npublic inline fun <R, C : MutableCollection<in R>> IntArray.mapTo(destination: C, transform: (Int) -> R): C {\n    for (item in this)\n        destination.add(transform(item))\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element of the original array\n * and appends the results to the given [destination].\n */\npublic inline fun <R, C : MutableCollection<in R>> LongArray.mapTo(destination: C, transform: (Long) -> R): C {\n    for (item in this)\n        destination.add(transform(item))\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element of the original array\n * and appends the results to the given [destination].\n */\npublic inline fun <R, C : MutableCollection<in R>> FloatArray.mapTo(destination: C, transform: (Float) -> R): C {\n    for (item in this)\n        destination.add(transform(item))\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element of the original array\n * and appends the results to the given [destination].\n */\npublic inline fun <R, C : MutableCollection<in R>> DoubleArray.mapTo(destination: C, transform: (Double) -> R): C {\n    for (item in this)\n        destination.add(transform(item))\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element of the original array\n * and appends the results to the given [destination].\n */\npublic inline fun <R, C : MutableCollection<in R>> BooleanArray.mapTo(destination: C, transform: (Boolean) -> R): C {\n    for (item in this)\n        destination.add(transform(item))\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element of the original array\n * and appends the results to the given [destination].\n */\npublic inline fun <R, C : MutableCollection<in R>> CharArray.mapTo(destination: C, transform: (Char) -> R): C {\n    for (item in this)\n        destination.add(transform(item))\n    return destination\n}\n\n/**\n * Returns a lazy [Iterable] of [IndexedValue] for each element of the original array.\n */\npublic fun <T> Array<out T>.withIndex(): Iterable<IndexedValue<T>> {\n    return IndexingIterable { iterator() }\n}\n\n/**\n * Returns a lazy [Iterable] of [IndexedValue] for each element of the original array.\n */\npublic fun ByteArray.withIndex(): Iterable<IndexedValue<Byte>> {\n    return IndexingIterable { iterator() }\n}\n\n/**\n * Returns a lazy [Iterable] of [IndexedValue] for each element of the original array.\n */\npublic fun ShortArray.withIndex(): Iterable<IndexedValue<Short>> {\n    return IndexingIterable { iterator() }\n}\n\n/**\n * Returns a lazy [Iterable] of [IndexedValue] for each element of the original array.\n */\npublic fun IntArray.withIndex(): Iterable<IndexedValue<Int>> {\n    return IndexingIterable { iterator() }\n}\n\n/**\n * Returns a lazy [Iterable] of [IndexedValue] for each element of the original array.\n */\npublic fun LongArray.withIndex(): Iterable<IndexedValue<Long>> {\n    return IndexingIterable { iterator() }\n}\n\n/**\n * Returns a lazy [Iterable] of [IndexedValue] for each element of the original array.\n */\npublic fun FloatArray.withIndex(): Iterable<IndexedValue<Float>> {\n    return IndexingIterable { iterator() }\n}\n\n/**\n * Returns a lazy [Iterable] of [IndexedValue] for each element of the original array.\n */\npublic fun DoubleArray.withIndex(): Iterable<IndexedValue<Double>> {\n    return IndexingIterable { iterator() }\n}\n\n/**\n * Returns a lazy [Iterable] of [IndexedValue] for each element of the original array.\n */\npublic fun BooleanArray.withIndex(): Iterable<IndexedValue<Boolean>> {\n    return IndexingIterable { iterator() }\n}\n\n/**\n * Returns a lazy [Iterable] of [IndexedValue] for each element of the original array.\n */\npublic fun CharArray.withIndex(): Iterable<IndexedValue<Char>> {\n    return IndexingIterable { iterator() }\n}\n\n/**\n * Returns a list containing only distinct elements from the given array.\n * \n * The elements in the resulting list are in the same order as they were in the source array.\n */\npublic fun <T> Array<out T>.distinct(): List<T> {\n    return this.toMutableSet().toList()\n}\n\n/**\n * Returns a list containing only distinct elements from the given array.\n * \n * The elements in the resulting list are in the same order as they were in the source array.\n */\npublic fun ByteArray.distinct(): List<Byte> {\n    return this.toMutableSet().toList()\n}\n\n/**\n * Returns a list containing only distinct elements from the given array.\n * \n * The elements in the resulting list are in the same order as they were in the source array.\n */\npublic fun ShortArray.distinct(): List<Short> {\n    return this.toMutableSet().toList()\n}\n\n/**\n * Returns a list containing only distinct elements from the given array.\n * \n * The elements in the resulting list are in the same order as they were in the source array.\n */\npublic fun IntArray.distinct(): List<Int> {\n    return this.toMutableSet().toList()\n}\n\n/**\n * Returns a list containing only distinct elements from the given array.\n * \n * The elements in the resulting list are in the same order as they were in the source array.\n */\npublic fun LongArray.distinct(): List<Long> {\n    return this.toMutableSet().toList()\n}\n\n/**\n * Returns a list containing only distinct elements from the given array.\n * \n * The elements in the resulting list are in the same order as they were in the source array.\n */\npublic fun FloatArray.distinct(): List<Float> {\n    return this.toMutableSet().toList()\n}\n\n/**\n * Returns a list containing only distinct elements from the given array.\n * \n * The elements in the resulting list are in the same order as they were in the source array.\n */\npublic fun DoubleArray.distinct(): List<Double> {\n    return this.toMutableSet().toList()\n}\n\n/**\n * Returns a list containing only distinct elements from the given array.\n * \n * The elements in the resulting list are in the same order as they were in the source array.\n */\npublic fun BooleanArray.distinct(): List<Boolean> {\n    return this.toMutableSet().toList()\n}\n\n/**\n * Returns a list containing only distinct elements from the given array.\n * \n * The elements in the resulting list are in the same order as they were in the source array.\n */\npublic fun CharArray.distinct(): List<Char> {\n    return this.toMutableSet().toList()\n}\n\n/**\n * Returns a list containing only elements from the given array\n * having distinct keys returned by the given [selector] function.\n * \n * The elements in the resulting list are in the same order as they were in the source array.\n */\npublic inline fun <T, K> Array<out T>.distinctBy(selector: (T) -> K): List<T> {\n    val set = HashSet<K>()\n    val list = ArrayList<T>()\n    for (e in this) {\n        val key = selector(e)\n        if (set.add(key))\n            list.add(e)\n    }\n    return list\n}\n\n/**\n * Returns a list containing only elements from the given array\n * having distinct keys returned by the given [selector] function.\n * \n * The elements in the resulting list are in the same order as they were in the source array.\n */\npublic inline fun <K> ByteArray.distinctBy(selector: (Byte) -> K): List<Byte> {\n    val set = HashSet<K>()\n    val list = ArrayList<Byte>()\n    for (e in this) {\n        val key = selector(e)\n        if (set.add(key))\n            list.add(e)\n    }\n    return list\n}\n\n/**\n * Returns a list containing only elements from the given array\n * having distinct keys returned by the given [selector] function.\n * \n * The elements in the resulting list are in the same order as they were in the source array.\n */\npublic inline fun <K> ShortArray.distinctBy(selector: (Short) -> K): List<Short> {\n    val set = HashSet<K>()\n    val list = ArrayList<Short>()\n    for (e in this) {\n        val key = selector(e)\n        if (set.add(key))\n            list.add(e)\n    }\n    return list\n}\n\n/**\n * Returns a list containing only elements from the given array\n * having distinct keys returned by the given [selector] function.\n * \n * The elements in the resulting list are in the same order as they were in the source array.\n */\npublic inline fun <K> IntArray.distinctBy(selector: (Int) -> K): List<Int> {\n    val set = HashSet<K>()\n    val list = ArrayList<Int>()\n    for (e in this) {\n        val key = selector(e)\n        if (set.add(key))\n            list.add(e)\n    }\n    return list\n}\n\n/**\n * Returns a list containing only elements from the given array\n * having distinct keys returned by the given [selector] function.\n * \n * The elements in the resulting list are in the same order as they were in the source array.\n */\npublic inline fun <K> LongArray.distinctBy(selector: (Long) -> K): List<Long> {\n    val set = HashSet<K>()\n    val list = ArrayList<Long>()\n    for (e in this) {\n        val key = selector(e)\n        if (set.add(key))\n            list.add(e)\n    }\n    return list\n}\n\n/**\n * Returns a list containing only elements from the given array\n * having distinct keys returned by the given [selector] function.\n * \n * The elements in the resulting list are in the same order as they were in the source array.\n */\npublic inline fun <K> FloatArray.distinctBy(selector: (Float) -> K): List<Float> {\n    val set = HashSet<K>()\n    val list = ArrayList<Float>()\n    for (e in this) {\n        val key = selector(e)\n        if (set.add(key))\n            list.add(e)\n    }\n    return list\n}\n\n/**\n * Returns a list containing only elements from the given array\n * having distinct keys returned by the given [selector] function.\n * \n * The elements in the resulting list are in the same order as they were in the source array.\n */\npublic inline fun <K> DoubleArray.distinctBy(selector: (Double) -> K): List<Double> {\n    val set = HashSet<K>()\n    val list = ArrayList<Double>()\n    for (e in this) {\n        val key = selector(e)\n        if (set.add(key))\n            list.add(e)\n    }\n    return list\n}\n\n/**\n * Returns a list containing only elements from the given array\n * having distinct keys returned by the given [selector] function.\n * \n * The elements in the resulting list are in the same order as they were in the source array.\n */\npublic inline fun <K> BooleanArray.distinctBy(selector: (Boolean) -> K): List<Boolean> {\n    val set = HashSet<K>()\n    val list = ArrayList<Boolean>()\n    for (e in this) {\n        val key = selector(e)\n        if (set.add(key))\n            list.add(e)\n    }\n    return list\n}\n\n/**\n * Returns a list containing only elements from the given array\n * having distinct keys returned by the given [selector] function.\n * \n * The elements in the resulting list are in the same order as they were in the source array.\n */\npublic inline fun <K> CharArray.distinctBy(selector: (Char) -> K): List<Char> {\n    val set = HashSet<K>()\n    val list = ArrayList<Char>()\n    for (e in this) {\n        val key = selector(e)\n        if (set.add(key))\n            list.add(e)\n    }\n    return list\n}\n\n/**\n * Returns a set containing all elements that are contained by both this set and the specified collection.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic infix fun <T> Array<out T>.intersect(other: Iterable<T>): Set<T> {\n    val set = this.toMutableSet()\n    set.retainAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all elements that are contained by both this set and the specified collection.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic infix fun ByteArray.intersect(other: Iterable<Byte>): Set<Byte> {\n    val set = this.toMutableSet()\n    set.retainAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all elements that are contained by both this set and the specified collection.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic infix fun ShortArray.intersect(other: Iterable<Short>): Set<Short> {\n    val set = this.toMutableSet()\n    set.retainAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all elements that are contained by both this set and the specified collection.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic infix fun IntArray.intersect(other: Iterable<Int>): Set<Int> {\n    val set = this.toMutableSet()\n    set.retainAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all elements that are contained by both this set and the specified collection.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic infix fun LongArray.intersect(other: Iterable<Long>): Set<Long> {\n    val set = this.toMutableSet()\n    set.retainAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all elements that are contained by both this set and the specified collection.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic infix fun FloatArray.intersect(other: Iterable<Float>): Set<Float> {\n    val set = this.toMutableSet()\n    set.retainAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all elements that are contained by both this set and the specified collection.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic infix fun DoubleArray.intersect(other: Iterable<Double>): Set<Double> {\n    val set = this.toMutableSet()\n    set.retainAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all elements that are contained by both this set and the specified collection.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic infix fun BooleanArray.intersect(other: Iterable<Boolean>): Set<Boolean> {\n    val set = this.toMutableSet()\n    set.retainAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all elements that are contained by both this set and the specified collection.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic infix fun CharArray.intersect(other: Iterable<Char>): Set<Char> {\n    val set = this.toMutableSet()\n    set.retainAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all elements that are contained by this array and not contained by the specified collection.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic infix fun <T> Array<out T>.subtract(other: Iterable<T>): Set<T> {\n    val set = this.toMutableSet()\n    set.removeAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all elements that are contained by this array and not contained by the specified collection.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic infix fun ByteArray.subtract(other: Iterable<Byte>): Set<Byte> {\n    val set = this.toMutableSet()\n    set.removeAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all elements that are contained by this array and not contained by the specified collection.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic infix fun ShortArray.subtract(other: Iterable<Short>): Set<Short> {\n    val set = this.toMutableSet()\n    set.removeAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all elements that are contained by this array and not contained by the specified collection.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic infix fun IntArray.subtract(other: Iterable<Int>): Set<Int> {\n    val set = this.toMutableSet()\n    set.removeAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all elements that are contained by this array and not contained by the specified collection.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic infix fun LongArray.subtract(other: Iterable<Long>): Set<Long> {\n    val set = this.toMutableSet()\n    set.removeAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all elements that are contained by this array and not contained by the specified collection.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic infix fun FloatArray.subtract(other: Iterable<Float>): Set<Float> {\n    val set = this.toMutableSet()\n    set.removeAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all elements that are contained by this array and not contained by the specified collection.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic infix fun DoubleArray.subtract(other: Iterable<Double>): Set<Double> {\n    val set = this.toMutableSet()\n    set.removeAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all elements that are contained by this array and not contained by the specified collection.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic infix fun BooleanArray.subtract(other: Iterable<Boolean>): Set<Boolean> {\n    val set = this.toMutableSet()\n    set.removeAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all elements that are contained by this array and not contained by the specified collection.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic infix fun CharArray.subtract(other: Iterable<Char>): Set<Char> {\n    val set = this.toMutableSet()\n    set.removeAll(other)\n    return set\n}\n\n/**\n * Returns a mutable set containing all distinct elements from the given array.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic fun <T> Array<out T>.toMutableSet(): MutableSet<T> {\n    val set = LinkedHashSet<T>(mapCapacity(size))\n    for (item in this) set.add(item)\n    return set\n}\n\n/**\n * Returns a mutable set containing all distinct elements from the given array.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic fun ByteArray.toMutableSet(): MutableSet<Byte> {\n    val set = LinkedHashSet<Byte>(mapCapacity(size))\n    for (item in this) set.add(item)\n    return set\n}\n\n/**\n * Returns a mutable set containing all distinct elements from the given array.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic fun ShortArray.toMutableSet(): MutableSet<Short> {\n    val set = LinkedHashSet<Short>(mapCapacity(size))\n    for (item in this) set.add(item)\n    return set\n}\n\n/**\n * Returns a mutable set containing all distinct elements from the given array.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic fun IntArray.toMutableSet(): MutableSet<Int> {\n    val set = LinkedHashSet<Int>(mapCapacity(size))\n    for (item in this) set.add(item)\n    return set\n}\n\n/**\n * Returns a mutable set containing all distinct elements from the given array.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic fun LongArray.toMutableSet(): MutableSet<Long> {\n    val set = LinkedHashSet<Long>(mapCapacity(size))\n    for (item in this) set.add(item)\n    return set\n}\n\n/**\n * Returns a mutable set containing all distinct elements from the given array.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic fun FloatArray.toMutableSet(): MutableSet<Float> {\n    val set = LinkedHashSet<Float>(mapCapacity(size))\n    for (item in this) set.add(item)\n    return set\n}\n\n/**\n * Returns a mutable set containing all distinct elements from the given array.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic fun DoubleArray.toMutableSet(): MutableSet<Double> {\n    val set = LinkedHashSet<Double>(mapCapacity(size))\n    for (item in this) set.add(item)\n    return set\n}\n\n/**\n * Returns a mutable set containing all distinct elements from the given array.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic fun BooleanArray.toMutableSet(): MutableSet<Boolean> {\n    val set = LinkedHashSet<Boolean>(mapCapacity(size))\n    for (item in this) set.add(item)\n    return set\n}\n\n/**\n * Returns a mutable set containing all distinct elements from the given array.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic fun CharArray.toMutableSet(): MutableSet<Char> {\n    val set = LinkedHashSet<Char>(mapCapacity(size))\n    for (item in this) set.add(item)\n    return set\n}\n\n/**\n * Returns a set containing all distinct elements from both collections.\n * \n * The returned set preserves the element iteration order of the original array.\n * Those elements of the [other] collection that are unique are iterated in the end\n * in the order of the [other] collection.\n */\npublic infix fun <T> Array<out T>.union(other: Iterable<T>): Set<T> {\n    val set = this.toMutableSet()\n    set.addAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all distinct elements from both collections.\n * \n * The returned set preserves the element iteration order of the original array.\n * Those elements of the [other] collection that are unique are iterated in the end\n * in the order of the [other] collection.\n */\npublic infix fun ByteArray.union(other: Iterable<Byte>): Set<Byte> {\n    val set = this.toMutableSet()\n    set.addAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all distinct elements from both collections.\n * \n * The returned set preserves the element iteration order of the original array.\n * Those elements of the [other] collection that are unique are iterated in the end\n * in the order of the [other] collection.\n */\npublic infix fun ShortArray.union(other: Iterable<Short>): Set<Short> {\n    val set = this.toMutableSet()\n    set.addAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all distinct elements from both collections.\n * \n * The returned set preserves the element iteration order of the original array.\n * Those elements of the [other] collection that are unique are iterated in the end\n * in the order of the [other] collection.\n */\npublic infix fun IntArray.union(other: Iterable<Int>): Set<Int> {\n    val set = this.toMutableSet()\n    set.addAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all distinct elements from both collections.\n * \n * The returned set preserves the element iteration order of the original array.\n * Those elements of the [other] collection that are unique are iterated in the end\n * in the order of the [other] collection.\n */\npublic infix fun LongArray.union(other: Iterable<Long>): Set<Long> {\n    val set = this.toMutableSet()\n    set.addAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all distinct elements from both collections.\n * \n * The returned set preserves the element iteration order of the original array.\n * Those elements of the [other] collection that are unique are iterated in the end\n * in the order of the [other] collection.\n */\npublic infix fun FloatArray.union(other: Iterable<Float>): Set<Float> {\n    val set = this.toMutableSet()\n    set.addAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all distinct elements from both collections.\n * \n * The returned set preserves the element iteration order of the original array.\n * Those elements of the [other] collection that are unique are iterated in the end\n * in the order of the [other] collection.\n */\npublic infix fun DoubleArray.union(other: Iterable<Double>): Set<Double> {\n    val set = this.toMutableSet()\n    set.addAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all distinct elements from both collections.\n * \n * The returned set preserves the element iteration order of the original array.\n * Those elements of the [other] collection that are unique are iterated in the end\n * in the order of the [other] collection.\n */\npublic infix fun BooleanArray.union(other: Iterable<Boolean>): Set<Boolean> {\n    val set = this.toMutableSet()\n    set.addAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all distinct elements from both collections.\n * \n * The returned set preserves the element iteration order of the original array.\n * Those elements of the [other] collection that are unique are iterated in the end\n * in the order of the [other] collection.\n */\npublic infix fun CharArray.union(other: Iterable<Char>): Set<Char> {\n    val set = this.toMutableSet()\n    set.addAll(other)\n    return set\n}\n\n/**\n * Returns `true` if all elements match the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.all\n */\npublic inline fun <T> Array<out T>.all(predicate: (T) -> Boolean): Boolean {\n    for (element in this) if (!predicate(element)) return false\n    return true\n}\n\n/**\n * Returns `true` if all elements match the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.all\n */\npublic inline fun ByteArray.all(predicate: (Byte) -> Boolean): Boolean {\n    for (element in this) if (!predicate(element)) return false\n    return true\n}\n\n/**\n * Returns `true` if all elements match the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.all\n */\npublic inline fun ShortArray.all(predicate: (Short) -> Boolean): Boolean {\n    for (element in this) if (!predicate(element)) return false\n    return true\n}\n\n/**\n * Returns `true` if all elements match the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.all\n */\npublic inline fun IntArray.all(predicate: (Int) -> Boolean): Boolean {\n    for (element in this) if (!predicate(element)) return false\n    return true\n}\n\n/**\n * Returns `true` if all elements match the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.all\n */\npublic inline fun LongArray.all(predicate: (Long) -> Boolean): Boolean {\n    for (element in this) if (!predicate(element)) return false\n    return true\n}\n\n/**\n * Returns `true` if all elements match the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.all\n */\npublic inline fun FloatArray.all(predicate: (Float) -> Boolean): Boolean {\n    for (element in this) if (!predicate(element)) return false\n    return true\n}\n\n/**\n * Returns `true` if all elements match the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.all\n */\npublic inline fun DoubleArray.all(predicate: (Double) -> Boolean): Boolean {\n    for (element in this) if (!predicate(element)) return false\n    return true\n}\n\n/**\n * Returns `true` if all elements match the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.all\n */\npublic inline fun BooleanArray.all(predicate: (Boolean) -> Boolean): Boolean {\n    for (element in this) if (!predicate(element)) return false\n    return true\n}\n\n/**\n * Returns `true` if all elements match the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.all\n */\npublic inline fun CharArray.all(predicate: (Char) -> Boolean): Boolean {\n    for (element in this) if (!predicate(element)) return false\n    return true\n}\n\n/**\n * Returns `true` if array has at least one element.\n * \n * @sample samples.collections.Collections.Aggregates.any\n */\npublic fun <T> Array<out T>.any(): Boolean {\n    return !isEmpty()\n}\n\n/**\n * Returns `true` if array has at least one element.\n * \n * @sample samples.collections.Collections.Aggregates.any\n */\npublic fun ByteArray.any(): Boolean {\n    return !isEmpty()\n}\n\n/**\n * Returns `true` if array has at least one element.\n * \n * @sample samples.collections.Collections.Aggregates.any\n */\npublic fun ShortArray.any(): Boolean {\n    return !isEmpty()\n}\n\n/**\n * Returns `true` if array has at least one element.\n * \n * @sample samples.collections.Collections.Aggregates.any\n */\npublic fun IntArray.any(): Boolean {\n    return !isEmpty()\n}\n\n/**\n * Returns `true` if array has at least one element.\n * \n * @sample samples.collections.Collections.Aggregates.any\n */\npublic fun LongArray.any(): Boolean {\n    return !isEmpty()\n}\n\n/**\n * Returns `true` if array has at least one element.\n * \n * @sample samples.collections.Collections.Aggregates.any\n */\npublic fun FloatArray.any(): Boolean {\n    return !isEmpty()\n}\n\n/**\n * Returns `true` if array has at least one element.\n * \n * @sample samples.collections.Collections.Aggregates.any\n */\npublic fun DoubleArray.any(): Boolean {\n    return !isEmpty()\n}\n\n/**\n * Returns `true` if array has at least one element.\n * \n * @sample samples.collections.Collections.Aggregates.any\n */\npublic fun BooleanArray.any(): Boolean {\n    return !isEmpty()\n}\n\n/**\n * Returns `true` if array has at least one element.\n * \n * @sample samples.collections.Collections.Aggregates.any\n */\npublic fun CharArray.any(): Boolean {\n    return !isEmpty()\n}\n\n/**\n * Returns `true` if at least one element matches the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.anyWithPredicate\n */\npublic inline fun <T> Array<out T>.any(predicate: (T) -> Boolean): Boolean {\n    for (element in this) if (predicate(element)) return true\n    return false\n}\n\n/**\n * Returns `true` if at least one element matches the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.anyWithPredicate\n */\npublic inline fun ByteArray.any(predicate: (Byte) -> Boolean): Boolean {\n    for (element in this) if (predicate(element)) return true\n    return false\n}\n\n/**\n * Returns `true` if at least one element matches the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.anyWithPredicate\n */\npublic inline fun ShortArray.any(predicate: (Short) -> Boolean): Boolean {\n    for (element in this) if (predicate(element)) return true\n    return false\n}\n\n/**\n * Returns `true` if at least one element matches the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.anyWithPredicate\n */\npublic inline fun IntArray.any(predicate: (Int) -> Boolean): Boolean {\n    for (element in this) if (predicate(element)) return true\n    return false\n}\n\n/**\n * Returns `true` if at least one element matches the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.anyWithPredicate\n */\npublic inline fun LongArray.any(predicate: (Long) -> Boolean): Boolean {\n    for (element in this) if (predicate(element)) return true\n    return false\n}\n\n/**\n * Returns `true` if at least one element matches the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.anyWithPredicate\n */\npublic inline fun FloatArray.any(predicate: (Float) -> Boolean): Boolean {\n    for (element in this) if (predicate(element)) return true\n    return false\n}\n\n/**\n * Returns `true` if at least one element matches the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.anyWithPredicate\n */\npublic inline fun DoubleArray.any(predicate: (Double) -> Boolean): Boolean {\n    for (element in this) if (predicate(element)) return true\n    return false\n}\n\n/**\n * Returns `true` if at least one element matches the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.anyWithPredicate\n */\npublic inline fun BooleanArray.any(predicate: (Boolean) -> Boolean): Boolean {\n    for (element in this) if (predicate(element)) return true\n    return false\n}\n\n/**\n * Returns `true` if at least one element matches the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.anyWithPredicate\n */\npublic inline fun CharArray.any(predicate: (Char) -> Boolean): Boolean {\n    for (element in this) if (predicate(element)) return true\n    return false\n}\n\n/**\n * Returns the number of elements in this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Array<out T>.count(): Int {\n    return size\n}\n\n/**\n * Returns the number of elements in this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun ByteArray.count(): Int {\n    return size\n}\n\n/**\n * Returns the number of elements in this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun ShortArray.count(): Int {\n    return size\n}\n\n/**\n * Returns the number of elements in this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun IntArray.count(): Int {\n    return size\n}\n\n/**\n * Returns the number of elements in this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun LongArray.count(): Int {\n    return size\n}\n\n/**\n * Returns the number of elements in this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun FloatArray.count(): Int {\n    return size\n}\n\n/**\n * Returns the number of elements in this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun DoubleArray.count(): Int {\n    return size\n}\n\n/**\n * Returns the number of elements in this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun BooleanArray.count(): Int {\n    return size\n}\n\n/**\n * Returns the number of elements in this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun CharArray.count(): Int {\n    return size\n}\n\n/**\n * Returns the number of elements matching the given [predicate].\n */\npublic inline fun <T> Array<out T>.count(predicate: (T) -> Boolean): Int {\n    var count = 0\n    for (element in this) if (predicate(element)) count++\n    return count\n}\n\n/**\n * Returns the number of elements matching the given [predicate].\n */\npublic inline fun ByteArray.count(predicate: (Byte) -> Boolean): Int {\n    var count = 0\n    for (element in this) if (predicate(element)) count++\n    return count\n}\n\n/**\n * Returns the number of elements matching the given [predicate].\n */\npublic inline fun ShortArray.count(predicate: (Short) -> Boolean): Int {\n    var count = 0\n    for (element in this) if (predicate(element)) count++\n    return count\n}\n\n/**\n * Returns the number of elements matching the given [predicate].\n */\npublic inline fun IntArray.count(predicate: (Int) -> Boolean): Int {\n    var count = 0\n    for (element in this) if (predicate(element)) count++\n    return count\n}\n\n/**\n * Returns the number of elements matching the given [predicate].\n */\npublic inline fun LongArray.count(predicate: (Long) -> Boolean): Int {\n    var count = 0\n    for (element in this) if (predicate(element)) count++\n    return count\n}\n\n/**\n * Returns the number of elements matching the given [predicate].\n */\npublic inline fun FloatArray.count(predicate: (Float) -> Boolean): Int {\n    var count = 0\n    for (element in this) if (predicate(element)) count++\n    return count\n}\n\n/**\n * Returns the number of elements matching the given [predicate].\n */\npublic inline fun DoubleArray.count(predicate: (Double) -> Boolean): Int {\n    var count = 0\n    for (element in this) if (predicate(element)) count++\n    return count\n}\n\n/**\n * Returns the number of elements matching the given [predicate].\n */\npublic inline fun BooleanArray.count(predicate: (Boolean) -> Boolean): Int {\n    var count = 0\n    for (element in this) if (predicate(element)) count++\n    return count\n}\n\n/**\n * Returns the number of elements matching the given [predicate].\n */\npublic inline fun CharArray.count(predicate: (Char) -> Boolean): Int {\n    var count = 0\n    for (element in this) if (predicate(element)) count++\n    return count\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right to current accumulator value and each element.\n */\npublic inline fun <T, R> Array<out T>.fold(initial: R, operation: (acc: R, T) -> R): R {\n    var accumulator = initial\n    for (element in this) accumulator = operation(accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right to current accumulator value and each element.\n */\npublic inline fun <R> ByteArray.fold(initial: R, operation: (acc: R, Byte) -> R): R {\n    var accumulator = initial\n    for (element in this) accumulator = operation(accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right to current accumulator value and each element.\n */\npublic inline fun <R> ShortArray.fold(initial: R, operation: (acc: R, Short) -> R): R {\n    var accumulator = initial\n    for (element in this) accumulator = operation(accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right to current accumulator value and each element.\n */\npublic inline fun <R> IntArray.fold(initial: R, operation: (acc: R, Int) -> R): R {\n    var accumulator = initial\n    for (element in this) accumulator = operation(accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right to current accumulator value and each element.\n */\npublic inline fun <R> LongArray.fold(initial: R, operation: (acc: R, Long) -> R): R {\n    var accumulator = initial\n    for (element in this) accumulator = operation(accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right to current accumulator value and each element.\n */\npublic inline fun <R> FloatArray.fold(initial: R, operation: (acc: R, Float) -> R): R {\n    var accumulator = initial\n    for (element in this) accumulator = operation(accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right to current accumulator value and each element.\n */\npublic inline fun <R> DoubleArray.fold(initial: R, operation: (acc: R, Double) -> R): R {\n    var accumulator = initial\n    for (element in this) accumulator = operation(accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right to current accumulator value and each element.\n */\npublic inline fun <R> BooleanArray.fold(initial: R, operation: (acc: R, Boolean) -> R): R {\n    var accumulator = initial\n    for (element in this) accumulator = operation(accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right to current accumulator value and each element.\n */\npublic inline fun <R> CharArray.fold(initial: R, operation: (acc: R, Char) -> R): R {\n    var accumulator = initial\n    for (element in this) accumulator = operation(accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original array.\n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n */\npublic inline fun <T, R> Array<out T>.foldIndexed(initial: R, operation: (index: Int, acc: R, T) -> R): R {\n    var index = 0\n    var accumulator = initial\n    for (element in this) accumulator = operation(index++, accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original array.\n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n */\npublic inline fun <R> ByteArray.foldIndexed(initial: R, operation: (index: Int, acc: R, Byte) -> R): R {\n    var index = 0\n    var accumulator = initial\n    for (element in this) accumulator = operation(index++, accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original array.\n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n */\npublic inline fun <R> ShortArray.foldIndexed(initial: R, operation: (index: Int, acc: R, Short) -> R): R {\n    var index = 0\n    var accumulator = initial\n    for (element in this) accumulator = operation(index++, accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original array.\n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n */\npublic inline fun <R> IntArray.foldIndexed(initial: R, operation: (index: Int, acc: R, Int) -> R): R {\n    var index = 0\n    var accumulator = initial\n    for (element in this) accumulator = operation(index++, accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original array.\n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n */\npublic inline fun <R> LongArray.foldIndexed(initial: R, operation: (index: Int, acc: R, Long) -> R): R {\n    var index = 0\n    var accumulator = initial\n    for (element in this) accumulator = operation(index++, accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original array.\n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n */\npublic inline fun <R> FloatArray.foldIndexed(initial: R, operation: (index: Int, acc: R, Float) -> R): R {\n    var index = 0\n    var accumulator = initial\n    for (element in this) accumulator = operation(index++, accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original array.\n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n */\npublic inline fun <R> DoubleArray.foldIndexed(initial: R, operation: (index: Int, acc: R, Double) -> R): R {\n    var index = 0\n    var accumulator = initial\n    for (element in this) accumulator = operation(index++, accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original array.\n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n */\npublic inline fun <R> BooleanArray.foldIndexed(initial: R, operation: (index: Int, acc: R, Boolean) -> R): R {\n    var index = 0\n    var accumulator = initial\n    for (element in this) accumulator = operation(index++, accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original array.\n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n */\npublic inline fun <R> CharArray.foldIndexed(initial: R, operation: (index: Int, acc: R, Char) -> R): R {\n    var index = 0\n    var accumulator = initial\n    for (element in this) accumulator = operation(index++, accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left to each element and current accumulator value.\n */\npublic inline fun <T, R> Array<out T>.foldRight(initial: R, operation: (T, acc: R) -> R): R {\n    var index = lastIndex\n    var accumulator = initial\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left to each element and current accumulator value.\n */\npublic inline fun <R> ByteArray.foldRight(initial: R, operation: (Byte, acc: R) -> R): R {\n    var index = lastIndex\n    var accumulator = initial\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left to each element and current accumulator value.\n */\npublic inline fun <R> ShortArray.foldRight(initial: R, operation: (Short, acc: R) -> R): R {\n    var index = lastIndex\n    var accumulator = initial\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left to each element and current accumulator value.\n */\npublic inline fun <R> IntArray.foldRight(initial: R, operation: (Int, acc: R) -> R): R {\n    var index = lastIndex\n    var accumulator = initial\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left to each element and current accumulator value.\n */\npublic inline fun <R> LongArray.foldRight(initial: R, operation: (Long, acc: R) -> R): R {\n    var index = lastIndex\n    var accumulator = initial\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left to each element and current accumulator value.\n */\npublic inline fun <R> FloatArray.foldRight(initial: R, operation: (Float, acc: R) -> R): R {\n    var index = lastIndex\n    var accumulator = initial\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left to each element and current accumulator value.\n */\npublic inline fun <R> DoubleArray.foldRight(initial: R, operation: (Double, acc: R) -> R): R {\n    var index = lastIndex\n    var accumulator = initial\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left to each element and current accumulator value.\n */\npublic inline fun <R> BooleanArray.foldRight(initial: R, operation: (Boolean, acc: R) -> R): R {\n    var index = lastIndex\n    var accumulator = initial\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left to each element and current accumulator value.\n */\npublic inline fun <R> CharArray.foldRight(initial: R, operation: (Char, acc: R) -> R): R {\n    var index = lastIndex\n    var accumulator = initial\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left\n * to each element with its index in the original array and current accumulator value.\n * @param [operation] function that takes the index of an element, the element itself\n * and current accumulator value, and calculates the next accumulator value.\n */\npublic inline fun <T, R> Array<out T>.foldRightIndexed(initial: R, operation: (index: Int, T, acc: R) -> R): R {\n    var index = lastIndex\n    var accumulator = initial\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left\n * to each element with its index in the original array and current accumulator value.\n * @param [operation] function that takes the index of an element, the element itself\n * and current accumulator value, and calculates the next accumulator value.\n */\npublic inline fun <R> ByteArray.foldRightIndexed(initial: R, operation: (index: Int, Byte, acc: R) -> R): R {\n    var index = lastIndex\n    var accumulator = initial\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left\n * to each element with its index in the original array and current accumulator value.\n * @param [operation] function that takes the index of an element, the element itself\n * and current accumulator value, and calculates the next accumulator value.\n */\npublic inline fun <R> ShortArray.foldRightIndexed(initial: R, operation: (index: Int, Short, acc: R) -> R): R {\n    var index = lastIndex\n    var accumulator = initial\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left\n * to each element with its index in the original array and current accumulator value.\n * @param [operation] function that takes the index of an element, the element itself\n * and current accumulator value, and calculates the next accumulator value.\n */\npublic inline fun <R> IntArray.foldRightIndexed(initial: R, operation: (index: Int, Int, acc: R) -> R): R {\n    var index = lastIndex\n    var accumulator = initial\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left\n * to each element with its index in the original array and current accumulator value.\n * @param [operation] function that takes the index of an element, the element itself\n * and current accumulator value, and calculates the next accumulator value.\n */\npublic inline fun <R> LongArray.foldRightIndexed(initial: R, operation: (index: Int, Long, acc: R) -> R): R {\n    var index = lastIndex\n    var accumulator = initial\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left\n * to each element with its index in the original array and current accumulator value.\n * @param [operation] function that takes the index of an element, the element itself\n * and current accumulator value, and calculates the next accumulator value.\n */\npublic inline fun <R> FloatArray.foldRightIndexed(initial: R, operation: (index: Int, Float, acc: R) -> R): R {\n    var index = lastIndex\n    var accumulator = initial\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left\n * to each element with its index in the original array and current accumulator value.\n * @param [operation] function that takes the index of an element, the element itself\n * and current accumulator value, and calculates the next accumulator value.\n */\npublic inline fun <R> DoubleArray.foldRightIndexed(initial: R, operation: (index: Int, Double, acc: R) -> R): R {\n    var index = lastIndex\n    var accumulator = initial\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left\n * to each element with its index in the original array and current accumulator value.\n * @param [operation] function that takes the index of an element, the element itself\n * and current accumulator value, and calculates the next accumulator value.\n */\npublic inline fun <R> BooleanArray.foldRightIndexed(initial: R, operation: (index: Int, Boolean, acc: R) -> R): R {\n    var index = lastIndex\n    var accumulator = initial\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left\n * to each element with its index in the original array and current accumulator value.\n * @param [operation] function that takes the index of an element, the element itself\n * and current accumulator value, and calculates the next accumulator value.\n */\npublic inline fun <R> CharArray.foldRightIndexed(initial: R, operation: (index: Int, Char, acc: R) -> R): R {\n    var index = lastIndex\n    var accumulator = initial\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Performs the given [action] on each element.\n */\npublic inline fun <T> Array<out T>.forEach(action: (T) -> Unit): Unit {\n    for (element in this) action(element)\n}\n\n/**\n * Performs the given [action] on each element.\n */\npublic inline fun ByteArray.forEach(action: (Byte) -> Unit): Unit {\n    for (element in this) action(element)\n}\n\n/**\n * Performs the given [action] on each element.\n */\npublic inline fun ShortArray.forEach(action: (Short) -> Unit): Unit {\n    for (element in this) action(element)\n}\n\n/**\n * Performs the given [action] on each element.\n */\npublic inline fun IntArray.forEach(action: (Int) -> Unit): Unit {\n    for (element in this) action(element)\n}\n\n/**\n * Performs the given [action] on each element.\n */\npublic inline fun LongArray.forEach(action: (Long) -> Unit): Unit {\n    for (element in this) action(element)\n}\n\n/**\n * Performs the given [action] on each element.\n */\npublic inline fun FloatArray.forEach(action: (Float) -> Unit): Unit {\n    for (element in this) action(element)\n}\n\n/**\n * Performs the given [action] on each element.\n */\npublic inline fun DoubleArray.forEach(action: (Double) -> Unit): Unit {\n    for (element in this) action(element)\n}\n\n/**\n * Performs the given [action] on each element.\n */\npublic inline fun BooleanArray.forEach(action: (Boolean) -> Unit): Unit {\n    for (element in this) action(element)\n}\n\n/**\n * Performs the given [action] on each element.\n */\npublic inline fun CharArray.forEach(action: (Char) -> Unit): Unit {\n    for (element in this) action(element)\n}\n\n/**\n * Performs the given [action] on each element, providing sequential index with the element.\n * @param [action] function that takes the index of an element and the element itself\n * and performs the desired action on the element.\n */\npublic inline fun <T> Array<out T>.forEachIndexed(action: (index: Int, T) -> Unit): Unit {\n    var index = 0\n    for (item in this) action(index++, item)\n}\n\n/**\n * Performs the given [action] on each element, providing sequential index with the element.\n * @param [action] function that takes the index of an element and the element itself\n * and performs the desired action on the element.\n */\npublic inline fun ByteArray.forEachIndexed(action: (index: Int, Byte) -> Unit): Unit {\n    var index = 0\n    for (item in this) action(index++, item)\n}\n\n/**\n * Performs the given [action] on each element, providing sequential index with the element.\n * @param [action] function that takes the index of an element and the element itself\n * and performs the desired action on the element.\n */\npublic inline fun ShortArray.forEachIndexed(action: (index: Int, Short) -> Unit): Unit {\n    var index = 0\n    for (item in this) action(index++, item)\n}\n\n/**\n * Performs the given [action] on each element, providing sequential index with the element.\n * @param [action] function that takes the index of an element and the element itself\n * and performs the desired action on the element.\n */\npublic inline fun IntArray.forEachIndexed(action: (index: Int, Int) -> Unit): Unit {\n    var index = 0\n    for (item in this) action(index++, item)\n}\n\n/**\n * Performs the given [action] on each element, providing sequential index with the element.\n * @param [action] function that takes the index of an element and the element itself\n * and performs the desired action on the element.\n */\npublic inline fun LongArray.forEachIndexed(action: (index: Int, Long) -> Unit): Unit {\n    var index = 0\n    for (item in this) action(index++, item)\n}\n\n/**\n * Performs the given [action] on each element, providing sequential index with the element.\n * @param [action] function that takes the index of an element and the element itself\n * and performs the desired action on the element.\n */\npublic inline fun FloatArray.forEachIndexed(action: (index: Int, Float) -> Unit): Unit {\n    var index = 0\n    for (item in this) action(index++, item)\n}\n\n/**\n * Performs the given [action] on each element, providing sequential index with the element.\n * @param [action] function that takes the index of an element and the element itself\n * and performs the desired action on the element.\n */\npublic inline fun DoubleArray.forEachIndexed(action: (index: Int, Double) -> Unit): Unit {\n    var index = 0\n    for (item in this) action(index++, item)\n}\n\n/**\n * Performs the given [action] on each element, providing sequential index with the element.\n * @param [action] function that takes the index of an element and the element itself\n * and performs the desired action on the element.\n */\npublic inline fun BooleanArray.forEachIndexed(action: (index: Int, Boolean) -> Unit): Unit {\n    var index = 0\n    for (item in this) action(index++, item)\n}\n\n/**\n * Performs the given [action] on each element, providing sequential index with the element.\n * @param [action] function that takes the index of an element and the element itself\n * and performs the desired action on the element.\n */\npublic inline fun CharArray.forEachIndexed(action: (index: Int, Char) -> Unit): Unit {\n    var index = 0\n    for (item in this) action(index++, item)\n}\n\n/**\n * Returns the largest element or `null` if there are no elements.\n * \n * If any of elements is `NaN` returns `NaN`.\n */\n@SinceKotlin(\"1.1\")\npublic fun Array<out Double>.max(): Double? {\n    if (isEmpty()) return null\n    var max = this[0]\n    if (max.isNaN()) return max\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (e.isNaN()) return e\n        if (max < e) max = e\n    }\n    return max\n}\n\n/**\n * Returns the largest element or `null` if there are no elements.\n * \n * If any of elements is `NaN` returns `NaN`.\n */\n@SinceKotlin(\"1.1\")\npublic fun Array<out Float>.max(): Float? {\n    if (isEmpty()) return null\n    var max = this[0]\n    if (max.isNaN()) return max\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (e.isNaN()) return e\n        if (max < e) max = e\n    }\n    return max\n}\n\n/**\n * Returns the largest element or `null` if there are no elements.\n */\npublic fun <T : Comparable<T>> Array<out T>.max(): T? {\n    if (isEmpty()) return null\n    var max = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (max < e) max = e\n    }\n    return max\n}\n\n/**\n * Returns the largest element or `null` if there are no elements.\n */\npublic fun ByteArray.max(): Byte? {\n    if (isEmpty()) return null\n    var max = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (max < e) max = e\n    }\n    return max\n}\n\n/**\n * Returns the largest element or `null` if there are no elements.\n */\npublic fun ShortArray.max(): Short? {\n    if (isEmpty()) return null\n    var max = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (max < e) max = e\n    }\n    return max\n}\n\n/**\n * Returns the largest element or `null` if there are no elements.\n */\npublic fun IntArray.max(): Int? {\n    if (isEmpty()) return null\n    var max = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (max < e) max = e\n    }\n    return max\n}\n\n/**\n * Returns the largest element or `null` if there are no elements.\n */\npublic fun LongArray.max(): Long? {\n    if (isEmpty()) return null\n    var max = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (max < e) max = e\n    }\n    return max\n}\n\n/**\n * Returns the largest element or `null` if there are no elements.\n * \n * If any of elements is `NaN` returns `NaN`.\n */\npublic fun FloatArray.max(): Float? {\n    if (isEmpty()) return null\n    var max = this[0]\n    if (max.isNaN()) return max\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (e.isNaN()) return e\n        if (max < e) max = e\n    }\n    return max\n}\n\n/**\n * Returns the largest element or `null` if there are no elements.\n * \n * If any of elements is `NaN` returns `NaN`.\n */\npublic fun DoubleArray.max(): Double? {\n    if (isEmpty()) return null\n    var max = this[0]\n    if (max.isNaN()) return max\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (e.isNaN()) return e\n        if (max < e) max = e\n    }\n    return max\n}\n\n/**\n * Returns the largest element or `null` if there are no elements.\n */\npublic fun CharArray.max(): Char? {\n    if (isEmpty()) return null\n    var max = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (max < e) max = e\n    }\n    return max\n}\n\n/**\n * Returns the first element yielding the largest value of the given function or `null` if there are no elements.\n */\npublic inline fun <T, R : Comparable<R>> Array<out T>.maxBy(selector: (T) -> R): T? {\n    if (isEmpty()) return null\n    var maxElem = this[0]\n    var maxValue = selector(maxElem)\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        val v = selector(e)\n        if (maxValue < v) {\n            maxElem = e\n            maxValue = v\n        }\n    }\n    return maxElem\n}\n\n/**\n * Returns the first element yielding the largest value of the given function or `null` if there are no elements.\n */\npublic inline fun <R : Comparable<R>> ByteArray.maxBy(selector: (Byte) -> R): Byte? {\n    if (isEmpty()) return null\n    var maxElem = this[0]\n    var maxValue = selector(maxElem)\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        val v = selector(e)\n        if (maxValue < v) {\n            maxElem = e\n            maxValue = v\n        }\n    }\n    return maxElem\n}\n\n/**\n * Returns the first element yielding the largest value of the given function or `null` if there are no elements.\n */\npublic inline fun <R : Comparable<R>> ShortArray.maxBy(selector: (Short) -> R): Short? {\n    if (isEmpty()) return null\n    var maxElem = this[0]\n    var maxValue = selector(maxElem)\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        val v = selector(e)\n        if (maxValue < v) {\n            maxElem = e\n            maxValue = v\n        }\n    }\n    return maxElem\n}\n\n/**\n * Returns the first element yielding the largest value of the given function or `null` if there are no elements.\n */\npublic inline fun <R : Comparable<R>> IntArray.maxBy(selector: (Int) -> R): Int? {\n    if (isEmpty()) return null\n    var maxElem = this[0]\n    var maxValue = selector(maxElem)\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        val v = selector(e)\n        if (maxValue < v) {\n            maxElem = e\n            maxValue = v\n        }\n    }\n    return maxElem\n}\n\n/**\n * Returns the first element yielding the largest value of the given function or `null` if there are no elements.\n */\npublic inline fun <R : Comparable<R>> LongArray.maxBy(selector: (Long) -> R): Long? {\n    if (isEmpty()) return null\n    var maxElem = this[0]\n    var maxValue = selector(maxElem)\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        val v = selector(e)\n        if (maxValue < v) {\n            maxElem = e\n            maxValue = v\n        }\n    }\n    return maxElem\n}\n\n/**\n * Returns the first element yielding the largest value of the given function or `null` if there are no elements.\n */\npublic inline fun <R : Comparable<R>> FloatArray.maxBy(selector: (Float) -> R): Float? {\n    if (isEmpty()) return null\n    var maxElem = this[0]\n    var maxValue = selector(maxElem)\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        val v = selector(e)\n        if (maxValue < v) {\n            maxElem = e\n            maxValue = v\n        }\n    }\n    return maxElem\n}\n\n/**\n * Returns the first element yielding the largest value of the given function or `null` if there are no elements.\n */\npublic inline fun <R : Comparable<R>> DoubleArray.maxBy(selector: (Double) -> R): Double? {\n    if (isEmpty()) return null\n    var maxElem = this[0]\n    var maxValue = selector(maxElem)\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        val v = selector(e)\n        if (maxValue < v) {\n            maxElem = e\n            maxValue = v\n        }\n    }\n    return maxElem\n}\n\n/**\n * Returns the first element yielding the largest value of the given function or `null` if there are no elements.\n */\npublic inline fun <R : Comparable<R>> BooleanArray.maxBy(selector: (Boolean) -> R): Boolean? {\n    if (isEmpty()) return null\n    var maxElem = this[0]\n    var maxValue = selector(maxElem)\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        val v = selector(e)\n        if (maxValue < v) {\n            maxElem = e\n            maxValue = v\n        }\n    }\n    return maxElem\n}\n\n/**\n * Returns the first element yielding the largest value of the given function or `null` if there are no elements.\n */\npublic inline fun <R : Comparable<R>> CharArray.maxBy(selector: (Char) -> R): Char? {\n    if (isEmpty()) return null\n    var maxElem = this[0]\n    var maxValue = selector(maxElem)\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        val v = selector(e)\n        if (maxValue < v) {\n            maxElem = e\n            maxValue = v\n        }\n    }\n    return maxElem\n}\n\n/**\n * Returns the first element having the largest value according to the provided [comparator] or `null` if there are no elements.\n */\npublic fun <T> Array<out T>.maxWith(comparator: Comparator<in T>): T? {\n    if (isEmpty()) return null\n    var max = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (comparator.compare(max, e) < 0) max = e\n    }\n    return max\n}\n\n/**\n * Returns the first element having the largest value according to the provided [comparator] or `null` if there are no elements.\n */\npublic fun ByteArray.maxWith(comparator: Comparator<in Byte>): Byte? {\n    if (isEmpty()) return null\n    var max = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (comparator.compare(max, e) < 0) max = e\n    }\n    return max\n}\n\n/**\n * Returns the first element having the largest value according to the provided [comparator] or `null` if there are no elements.\n */\npublic fun ShortArray.maxWith(comparator: Comparator<in Short>): Short? {\n    if (isEmpty()) return null\n    var max = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (comparator.compare(max, e) < 0) max = e\n    }\n    return max\n}\n\n/**\n * Returns the first element having the largest value according to the provided [comparator] or `null` if there are no elements.\n */\npublic fun IntArray.maxWith(comparator: Comparator<in Int>): Int? {\n    if (isEmpty()) return null\n    var max = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (comparator.compare(max, e) < 0) max = e\n    }\n    return max\n}\n\n/**\n * Returns the first element having the largest value according to the provided [comparator] or `null` if there are no elements.\n */\npublic fun LongArray.maxWith(comparator: Comparator<in Long>): Long? {\n    if (isEmpty()) return null\n    var max = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (comparator.compare(max, e) < 0) max = e\n    }\n    return max\n}\n\n/**\n * Returns the first element having the largest value according to the provided [comparator] or `null` if there are no elements.\n */\npublic fun FloatArray.maxWith(comparator: Comparator<in Float>): Float? {\n    if (isEmpty()) return null\n    var max = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (comparator.compare(max, e) < 0) max = e\n    }\n    return max\n}\n\n/**\n * Returns the first element having the largest value according to the provided [comparator] or `null` if there are no elements.\n */\npublic fun DoubleArray.maxWith(comparator: Comparator<in Double>): Double? {\n    if (isEmpty()) return null\n    var max = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (comparator.compare(max, e) < 0) max = e\n    }\n    return max\n}\n\n/**\n * Returns the first element having the largest value according to the provided [comparator] or `null` if there are no elements.\n */\npublic fun BooleanArray.maxWith(comparator: Comparator<in Boolean>): Boolean? {\n    if (isEmpty()) return null\n    var max = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (comparator.compare(max, e) < 0) max = e\n    }\n    return max\n}\n\n/**\n * Returns the first element having the largest value according to the provided [comparator] or `null` if there are no elements.\n */\npublic fun CharArray.maxWith(comparator: Comparator<in Char>): Char? {\n    if (isEmpty()) return null\n    var max = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (comparator.compare(max, e) < 0) max = e\n    }\n    return max\n}\n\n/**\n * Returns the smallest element or `null` if there are no elements.\n * \n * If any of elements is `NaN` returns `NaN`.\n */\n@SinceKotlin(\"1.1\")\npublic fun Array<out Double>.min(): Double? {\n    if (isEmpty()) return null\n    var min = this[0]\n    if (min.isNaN()) return min\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (e.isNaN()) return e\n        if (min > e) min = e\n    }\n    return min\n}\n\n/**\n * Returns the smallest element or `null` if there are no elements.\n * \n * If any of elements is `NaN` returns `NaN`.\n */\n@SinceKotlin(\"1.1\")\npublic fun Array<out Float>.min(): Float? {\n    if (isEmpty()) return null\n    var min = this[0]\n    if (min.isNaN()) return min\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (e.isNaN()) return e\n        if (min > e) min = e\n    }\n    return min\n}\n\n/**\n * Returns the smallest element or `null` if there are no elements.\n */\npublic fun <T : Comparable<T>> Array<out T>.min(): T? {\n    if (isEmpty()) return null\n    var min = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (min > e) min = e\n    }\n    return min\n}\n\n/**\n * Returns the smallest element or `null` if there are no elements.\n */\npublic fun ByteArray.min(): Byte? {\n    if (isEmpty()) return null\n    var min = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (min > e) min = e\n    }\n    return min\n}\n\n/**\n * Returns the smallest element or `null` if there are no elements.\n */\npublic fun ShortArray.min(): Short? {\n    if (isEmpty()) return null\n    var min = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (min > e) min = e\n    }\n    return min\n}\n\n/**\n * Returns the smallest element or `null` if there are no elements.\n */\npublic fun IntArray.min(): Int? {\n    if (isEmpty()) return null\n    var min = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (min > e) min = e\n    }\n    return min\n}\n\n/**\n * Returns the smallest element or `null` if there are no elements.\n */\npublic fun LongArray.min(): Long? {\n    if (isEmpty()) return null\n    var min = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (min > e) min = e\n    }\n    return min\n}\n\n/**\n * Returns the smallest element or `null` if there are no elements.\n * \n * If any of elements is `NaN` returns `NaN`.\n */\npublic fun FloatArray.min(): Float? {\n    if (isEmpty()) return null\n    var min = this[0]\n    if (min.isNaN()) return min\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (e.isNaN()) return e\n        if (min > e) min = e\n    }\n    return min\n}\n\n/**\n * Returns the smallest element or `null` if there are no elements.\n * \n * If any of elements is `NaN` returns `NaN`.\n */\npublic fun DoubleArray.min(): Double? {\n    if (isEmpty()) return null\n    var min = this[0]\n    if (min.isNaN()) return min\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (e.isNaN()) return e\n        if (min > e) min = e\n    }\n    return min\n}\n\n/**\n * Returns the smallest element or `null` if there are no elements.\n */\npublic fun CharArray.min(): Char? {\n    if (isEmpty()) return null\n    var min = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (min > e) min = e\n    }\n    return min\n}\n\n/**\n * Returns the first element yielding the smallest value of the given function or `null` if there are no elements.\n */\npublic inline fun <T, R : Comparable<R>> Array<out T>.minBy(selector: (T) -> R): T? {\n    if (isEmpty()) return null\n    var minElem = this[0]\n    var minValue = selector(minElem)\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        val v = selector(e)\n        if (minValue > v) {\n            minElem = e\n            minValue = v\n        }\n    }\n    return minElem\n}\n\n/**\n * Returns the first element yielding the smallest value of the given function or `null` if there are no elements.\n */\npublic inline fun <R : Comparable<R>> ByteArray.minBy(selector: (Byte) -> R): Byte? {\n    if (isEmpty()) return null\n    var minElem = this[0]\n    var minValue = selector(minElem)\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        val v = selector(e)\n        if (minValue > v) {\n            minElem = e\n            minValue = v\n        }\n    }\n    return minElem\n}\n\n/**\n * Returns the first element yielding the smallest value of the given function or `null` if there are no elements.\n */\npublic inline fun <R : Comparable<R>> ShortArray.minBy(selector: (Short) -> R): Short? {\n    if (isEmpty()) return null\n    var minElem = this[0]\n    var minValue = selector(minElem)\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        val v = selector(e)\n        if (minValue > v) {\n            minElem = e\n            minValue = v\n        }\n    }\n    return minElem\n}\n\n/**\n * Returns the first element yielding the smallest value of the given function or `null` if there are no elements.\n */\npublic inline fun <R : Comparable<R>> IntArray.minBy(selector: (Int) -> R): Int? {\n    if (isEmpty()) return null\n    var minElem = this[0]\n    var minValue = selector(minElem)\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        val v = selector(e)\n        if (minValue > v) {\n            minElem = e\n            minValue = v\n        }\n    }\n    return minElem\n}\n\n/**\n * Returns the first element yielding the smallest value of the given function or `null` if there are no elements.\n */\npublic inline fun <R : Comparable<R>> LongArray.minBy(selector: (Long) -> R): Long? {\n    if (isEmpty()) return null\n    var minElem = this[0]\n    var minValue = selector(minElem)\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        val v = selector(e)\n        if (minValue > v) {\n            minElem = e\n            minValue = v\n        }\n    }\n    return minElem\n}\n\n/**\n * Returns the first element yielding the smallest value of the given function or `null` if there are no elements.\n */\npublic inline fun <R : Comparable<R>> FloatArray.minBy(selector: (Float) -> R): Float? {\n    if (isEmpty()) return null\n    var minElem = this[0]\n    var minValue = selector(minElem)\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        val v = selector(e)\n        if (minValue > v) {\n            minElem = e\n            minValue = v\n        }\n    }\n    return minElem\n}\n\n/**\n * Returns the first element yielding the smallest value of the given function or `null` if there are no elements.\n */\npublic inline fun <R : Comparable<R>> DoubleArray.minBy(selector: (Double) -> R): Double? {\n    if (isEmpty()) return null\n    var minElem = this[0]\n    var minValue = selector(minElem)\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        val v = selector(e)\n        if (minValue > v) {\n            minElem = e\n            minValue = v\n        }\n    }\n    return minElem\n}\n\n/**\n * Returns the first element yielding the smallest value of the given function or `null` if there are no elements.\n */\npublic inline fun <R : Comparable<R>> BooleanArray.minBy(selector: (Boolean) -> R): Boolean? {\n    if (isEmpty()) return null\n    var minElem = this[0]\n    var minValue = selector(minElem)\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        val v = selector(e)\n        if (minValue > v) {\n            minElem = e\n            minValue = v\n        }\n    }\n    return minElem\n}\n\n/**\n * Returns the first element yielding the smallest value of the given function or `null` if there are no elements.\n */\npublic inline fun <R : Comparable<R>> CharArray.minBy(selector: (Char) -> R): Char? {\n    if (isEmpty()) return null\n    var minElem = this[0]\n    var minValue = selector(minElem)\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        val v = selector(e)\n        if (minValue > v) {\n            minElem = e\n            minValue = v\n        }\n    }\n    return minElem\n}\n\n/**\n * Returns the first element having the smallest value according to the provided [comparator] or `null` if there are no elements.\n */\npublic fun <T> Array<out T>.minWith(comparator: Comparator<in T>): T? {\n    if (isEmpty()) return null\n    var min = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (comparator.compare(min, e) > 0) min = e\n    }\n    return min\n}\n\n/**\n * Returns the first element having the smallest value according to the provided [comparator] or `null` if there are no elements.\n */\npublic fun ByteArray.minWith(comparator: Comparator<in Byte>): Byte? {\n    if (isEmpty()) return null\n    var min = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (comparator.compare(min, e) > 0) min = e\n    }\n    return min\n}\n\n/**\n * Returns the first element having the smallest value according to the provided [comparator] or `null` if there are no elements.\n */\npublic fun ShortArray.minWith(comparator: Comparator<in Short>): Short? {\n    if (isEmpty()) return null\n    var min = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (comparator.compare(min, e) > 0) min = e\n    }\n    return min\n}\n\n/**\n * Returns the first element having the smallest value according to the provided [comparator] or `null` if there are no elements.\n */\npublic fun IntArray.minWith(comparator: Comparator<in Int>): Int? {\n    if (isEmpty()) return null\n    var min = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (comparator.compare(min, e) > 0) min = e\n    }\n    return min\n}\n\n/**\n * Returns the first element having the smallest value according to the provided [comparator] or `null` if there are no elements.\n */\npublic fun LongArray.minWith(comparator: Comparator<in Long>): Long? {\n    if (isEmpty()) return null\n    var min = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (comparator.compare(min, e) > 0) min = e\n    }\n    return min\n}\n\n/**\n * Returns the first element having the smallest value according to the provided [comparator] or `null` if there are no elements.\n */\npublic fun FloatArray.minWith(comparator: Comparator<in Float>): Float? {\n    if (isEmpty()) return null\n    var min = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (comparator.compare(min, e) > 0) min = e\n    }\n    return min\n}\n\n/**\n * Returns the first element having the smallest value according to the provided [comparator] or `null` if there are no elements.\n */\npublic fun DoubleArray.minWith(comparator: Comparator<in Double>): Double? {\n    if (isEmpty()) return null\n    var min = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (comparator.compare(min, e) > 0) min = e\n    }\n    return min\n}\n\n/**\n * Returns the first element having the smallest value according to the provided [comparator] or `null` if there are no elements.\n */\npublic fun BooleanArray.minWith(comparator: Comparator<in Boolean>): Boolean? {\n    if (isEmpty()) return null\n    var min = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (comparator.compare(min, e) > 0) min = e\n    }\n    return min\n}\n\n/**\n * Returns the first element having the smallest value according to the provided [comparator] or `null` if there are no elements.\n */\npublic fun CharArray.minWith(comparator: Comparator<in Char>): Char? {\n    if (isEmpty()) return null\n    var min = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (comparator.compare(min, e) > 0) min = e\n    }\n    return min\n}\n\n/**\n * Returns `true` if the array has no elements.\n * \n * @sample samples.collections.Collections.Aggregates.none\n */\npublic fun <T> Array<out T>.none(): Boolean {\n    return isEmpty()\n}\n\n/**\n * Returns `true` if the array has no elements.\n * \n * @sample samples.collections.Collections.Aggregates.none\n */\npublic fun ByteArray.none(): Boolean {\n    return isEmpty()\n}\n\n/**\n * Returns `true` if the array has no elements.\n * \n * @sample samples.collections.Collections.Aggregates.none\n */\npublic fun ShortArray.none(): Boolean {\n    return isEmpty()\n}\n\n/**\n * Returns `true` if the array has no elements.\n * \n * @sample samples.collections.Collections.Aggregates.none\n */\npublic fun IntArray.none(): Boolean {\n    return isEmpty()\n}\n\n/**\n * Returns `true` if the array has no elements.\n * \n * @sample samples.collections.Collections.Aggregates.none\n */\npublic fun LongArray.none(): Boolean {\n    return isEmpty()\n}\n\n/**\n * Returns `true` if the array has no elements.\n * \n * @sample samples.collections.Collections.Aggregates.none\n */\npublic fun FloatArray.none(): Boolean {\n    return isEmpty()\n}\n\n/**\n * Returns `true` if the array has no elements.\n * \n * @sample samples.collections.Collections.Aggregates.none\n */\npublic fun DoubleArray.none(): Boolean {\n    return isEmpty()\n}\n\n/**\n * Returns `true` if the array has no elements.\n * \n * @sample samples.collections.Collections.Aggregates.none\n */\npublic fun BooleanArray.none(): Boolean {\n    return isEmpty()\n}\n\n/**\n * Returns `true` if the array has no elements.\n * \n * @sample samples.collections.Collections.Aggregates.none\n */\npublic fun CharArray.none(): Boolean {\n    return isEmpty()\n}\n\n/**\n * Returns `true` if no elements match the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.noneWithPredicate\n */\npublic inline fun <T> Array<out T>.none(predicate: (T) -> Boolean): Boolean {\n    for (element in this) if (predicate(element)) return false\n    return true\n}\n\n/**\n * Returns `true` if no elements match the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.noneWithPredicate\n */\npublic inline fun ByteArray.none(predicate: (Byte) -> Boolean): Boolean {\n    for (element in this) if (predicate(element)) return false\n    return true\n}\n\n/**\n * Returns `true` if no elements match the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.noneWithPredicate\n */\npublic inline fun ShortArray.none(predicate: (Short) -> Boolean): Boolean {\n    for (element in this) if (predicate(element)) return false\n    return true\n}\n\n/**\n * Returns `true` if no elements match the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.noneWithPredicate\n */\npublic inline fun IntArray.none(predicate: (Int) -> Boolean): Boolean {\n    for (element in this) if (predicate(element)) return false\n    return true\n}\n\n/**\n * Returns `true` if no elements match the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.noneWithPredicate\n */\npublic inline fun LongArray.none(predicate: (Long) -> Boolean): Boolean {\n    for (element in this) if (predicate(element)) return false\n    return true\n}\n\n/**\n * Returns `true` if no elements match the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.noneWithPredicate\n */\npublic inline fun FloatArray.none(predicate: (Float) -> Boolean): Boolean {\n    for (element in this) if (predicate(element)) return false\n    return true\n}\n\n/**\n * Returns `true` if no elements match the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.noneWithPredicate\n */\npublic inline fun DoubleArray.none(predicate: (Double) -> Boolean): Boolean {\n    for (element in this) if (predicate(element)) return false\n    return true\n}\n\n/**\n * Returns `true` if no elements match the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.noneWithPredicate\n */\npublic inline fun BooleanArray.none(predicate: (Boolean) -> Boolean): Boolean {\n    for (element in this) if (predicate(element)) return false\n    return true\n}\n\n/**\n * Returns `true` if no elements match the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.noneWithPredicate\n */\npublic inline fun CharArray.none(predicate: (Char) -> Boolean): Boolean {\n    for (element in this) if (predicate(element)) return false\n    return true\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right to current accumulator value and each element.\n */\npublic inline fun <S, T: S> Array<out T>.reduce(operation: (acc: S, T) -> S): S {\n    if (isEmpty())\n        throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator: S = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right to current accumulator value and each element.\n */\npublic inline fun ByteArray.reduce(operation: (acc: Byte, Byte) -> Byte): Byte {\n    if (isEmpty())\n        throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right to current accumulator value and each element.\n */\npublic inline fun ShortArray.reduce(operation: (acc: Short, Short) -> Short): Short {\n    if (isEmpty())\n        throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right to current accumulator value and each element.\n */\npublic inline fun IntArray.reduce(operation: (acc: Int, Int) -> Int): Int {\n    if (isEmpty())\n        throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right to current accumulator value and each element.\n */\npublic inline fun LongArray.reduce(operation: (acc: Long, Long) -> Long): Long {\n    if (isEmpty())\n        throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right to current accumulator value and each element.\n */\npublic inline fun FloatArray.reduce(operation: (acc: Float, Float) -> Float): Float {\n    if (isEmpty())\n        throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right to current accumulator value and each element.\n */\npublic inline fun DoubleArray.reduce(operation: (acc: Double, Double) -> Double): Double {\n    if (isEmpty())\n        throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right to current accumulator value and each element.\n */\npublic inline fun BooleanArray.reduce(operation: (acc: Boolean, Boolean) -> Boolean): Boolean {\n    if (isEmpty())\n        throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right to current accumulator value and each element.\n */\npublic inline fun CharArray.reduce(operation: (acc: Char, Char) -> Char): Char {\n    if (isEmpty())\n        throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original array.\n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself and calculates the next accumulator value.\n */\npublic inline fun <S, T: S> Array<out T>.reduceIndexed(operation: (index: Int, acc: S, T) -> S): S {\n    if (isEmpty())\n        throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator: S = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(index, accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original array.\n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself and calculates the next accumulator value.\n */\npublic inline fun ByteArray.reduceIndexed(operation: (index: Int, acc: Byte, Byte) -> Byte): Byte {\n    if (isEmpty())\n        throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(index, accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original array.\n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself and calculates the next accumulator value.\n */\npublic inline fun ShortArray.reduceIndexed(operation: (index: Int, acc: Short, Short) -> Short): Short {\n    if (isEmpty())\n        throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(index, accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original array.\n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself and calculates the next accumulator value.\n */\npublic inline fun IntArray.reduceIndexed(operation: (index: Int, acc: Int, Int) -> Int): Int {\n    if (isEmpty())\n        throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(index, accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original array.\n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself and calculates the next accumulator value.\n */\npublic inline fun LongArray.reduceIndexed(operation: (index: Int, acc: Long, Long) -> Long): Long {\n    if (isEmpty())\n        throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(index, accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original array.\n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself and calculates the next accumulator value.\n */\npublic inline fun FloatArray.reduceIndexed(operation: (index: Int, acc: Float, Float) -> Float): Float {\n    if (isEmpty())\n        throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(index, accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original array.\n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself and calculates the next accumulator value.\n */\npublic inline fun DoubleArray.reduceIndexed(operation: (index: Int, acc: Double, Double) -> Double): Double {\n    if (isEmpty())\n        throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(index, accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original array.\n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself and calculates the next accumulator value.\n */\npublic inline fun BooleanArray.reduceIndexed(operation: (index: Int, acc: Boolean, Boolean) -> Boolean): Boolean {\n    if (isEmpty())\n        throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(index, accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original array.\n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself and calculates the next accumulator value.\n */\npublic inline fun CharArray.reduceIndexed(operation: (index: Int, acc: Char, Char) -> Char): Char {\n    if (isEmpty())\n        throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(index, accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with last element and applying [operation] from right to left to each element and current accumulator value.\n */\npublic inline fun <S, T: S> Array<out T>.reduceRight(operation: (T, acc: S) -> S): S {\n    var index = lastIndex\n    if (index < 0) throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator: S = get(index--)\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with last element and applying [operation] from right to left to each element and current accumulator value.\n */\npublic inline fun ByteArray.reduceRight(operation: (Byte, acc: Byte) -> Byte): Byte {\n    var index = lastIndex\n    if (index < 0) throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with last element and applying [operation] from right to left to each element and current accumulator value.\n */\npublic inline fun ShortArray.reduceRight(operation: (Short, acc: Short) -> Short): Short {\n    var index = lastIndex\n    if (index < 0) throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with last element and applying [operation] from right to left to each element and current accumulator value.\n */\npublic inline fun IntArray.reduceRight(operation: (Int, acc: Int) -> Int): Int {\n    var index = lastIndex\n    if (index < 0) throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with last element and applying [operation] from right to left to each element and current accumulator value.\n */\npublic inline fun LongArray.reduceRight(operation: (Long, acc: Long) -> Long): Long {\n    var index = lastIndex\n    if (index < 0) throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with last element and applying [operation] from right to left to each element and current accumulator value.\n */\npublic inline fun FloatArray.reduceRight(operation: (Float, acc: Float) -> Float): Float {\n    var index = lastIndex\n    if (index < 0) throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with last element and applying [operation] from right to left to each element and current accumulator value.\n */\npublic inline fun DoubleArray.reduceRight(operation: (Double, acc: Double) -> Double): Double {\n    var index = lastIndex\n    if (index < 0) throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with last element and applying [operation] from right to left to each element and current accumulator value.\n */\npublic inline fun BooleanArray.reduceRight(operation: (Boolean, acc: Boolean) -> Boolean): Boolean {\n    var index = lastIndex\n    if (index < 0) throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with last element and applying [operation] from right to left to each element and current accumulator value.\n */\npublic inline fun CharArray.reduceRight(operation: (Char, acc: Char) -> Char): Char {\n    var index = lastIndex\n    if (index < 0) throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with last element and applying [operation] from right to left\n * to each element with its index in the original array and current accumulator value.\n * @param [operation] function that takes the index of an element, the element itself\n * and current accumulator value, and calculates the next accumulator value.\n */\npublic inline fun <S, T: S> Array<out T>.reduceRightIndexed(operation: (index: Int, T, acc: S) -> S): S {\n    var index = lastIndex\n    if (index < 0) throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator: S = get(index--)\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with last element and applying [operation] from right to left\n * to each element with its index in the original array and current accumulator value.\n * @param [operation] function that takes the index of an element, the element itself\n * and current accumulator value, and calculates the next accumulator value.\n */\npublic inline fun ByteArray.reduceRightIndexed(operation: (index: Int, Byte, acc: Byte) -> Byte): Byte {\n    var index = lastIndex\n    if (index < 0) throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with last element and applying [operation] from right to left\n * to each element with its index in the original array and current accumulator value.\n * @param [operation] function that takes the index of an element, the element itself\n * and current accumulator value, and calculates the next accumulator value.\n */\npublic inline fun ShortArray.reduceRightIndexed(operation: (index: Int, Short, acc: Short) -> Short): Short {\n    var index = lastIndex\n    if (index < 0) throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with last element and applying [operation] from right to left\n * to each element with its index in the original array and current accumulator value.\n * @param [operation] function that takes the index of an element, the element itself\n * and current accumulator value, and calculates the next accumulator value.\n */\npublic inline fun IntArray.reduceRightIndexed(operation: (index: Int, Int, acc: Int) -> Int): Int {\n    var index = lastIndex\n    if (index < 0) throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with last element and applying [operation] from right to left\n * to each element with its index in the original array and current accumulator value.\n * @param [operation] function that takes the index of an element, the element itself\n * and current accumulator value, and calculates the next accumulator value.\n */\npublic inline fun LongArray.reduceRightIndexed(operation: (index: Int, Long, acc: Long) -> Long): Long {\n    var index = lastIndex\n    if (index < 0) throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with last element and applying [operation] from right to left\n * to each element with its index in the original array and current accumulator value.\n * @param [operation] function that takes the index of an element, the element itself\n * and current accumulator value, and calculates the next accumulator value.\n */\npublic inline fun FloatArray.reduceRightIndexed(operation: (index: Int, Float, acc: Float) -> Float): Float {\n    var index = lastIndex\n    if (index < 0) throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with last element and applying [operation] from right to left\n * to each element with its index in the original array and current accumulator value.\n * @param [operation] function that takes the index of an element, the element itself\n * and current accumulator value, and calculates the next accumulator value.\n */\npublic inline fun DoubleArray.reduceRightIndexed(operation: (index: Int, Double, acc: Double) -> Double): Double {\n    var index = lastIndex\n    if (index < 0) throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with last element and applying [operation] from right to left\n * to each element with its index in the original array and current accumulator value.\n * @param [operation] function that takes the index of an element, the element itself\n * and current accumulator value, and calculates the next accumulator value.\n */\npublic inline fun BooleanArray.reduceRightIndexed(operation: (index: Int, Boolean, acc: Boolean) -> Boolean): Boolean {\n    var index = lastIndex\n    if (index < 0) throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with last element and applying [operation] from right to left\n * to each element with its index in the original array and current accumulator value.\n * @param [operation] function that takes the index of an element, the element itself\n * and current accumulator value, and calculates the next accumulator value.\n */\npublic inline fun CharArray.reduceRightIndexed(operation: (index: Int, Char, acc: Char) -> Char): Char {\n    var index = lastIndex\n    if (index < 0) throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\npublic inline fun <T> Array<out T>.sumBy(selector: (T) -> Int): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\npublic inline fun ByteArray.sumBy(selector: (Byte) -> Int): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\npublic inline fun ShortArray.sumBy(selector: (Short) -> Int): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\npublic inline fun IntArray.sumBy(selector: (Int) -> Int): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\npublic inline fun LongArray.sumBy(selector: (Long) -> Int): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\npublic inline fun FloatArray.sumBy(selector: (Float) -> Int): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\npublic inline fun DoubleArray.sumBy(selector: (Double) -> Int): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\npublic inline fun BooleanArray.sumBy(selector: (Boolean) -> Int): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\npublic inline fun CharArray.sumBy(selector: (Char) -> Int): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\npublic inline fun <T> Array<out T>.sumByDouble(selector: (T) -> Double): Double {\n    var sum: Double = 0.0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\npublic inline fun ByteArray.sumByDouble(selector: (Byte) -> Double): Double {\n    var sum: Double = 0.0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\npublic inline fun ShortArray.sumByDouble(selector: (Short) -> Double): Double {\n    var sum: Double = 0.0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\npublic inline fun IntArray.sumByDouble(selector: (Int) -> Double): Double {\n    var sum: Double = 0.0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\npublic inline fun LongArray.sumByDouble(selector: (Long) -> Double): Double {\n    var sum: Double = 0.0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\npublic inline fun FloatArray.sumByDouble(selector: (Float) -> Double): Double {\n    var sum: Double = 0.0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\npublic inline fun DoubleArray.sumByDouble(selector: (Double) -> Double): Double {\n    var sum: Double = 0.0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\npublic inline fun BooleanArray.sumByDouble(selector: (Boolean) -> Double): Double {\n    var sum: Double = 0.0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\npublic inline fun CharArray.sumByDouble(selector: (Char) -> Double): Double {\n    var sum: Double = 0.0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns an original collection containing all the non-`null` elements, throwing an [IllegalArgumentException] if there are any `null` elements.\n */\npublic fun <T : Any> Array<T?>.requireNoNulls(): Array<T> {\n    for (element in this) {\n        if (element == null) {\n            throw IllegalArgumentException(\"null element found in $this.\")\n        }\n    }\n    @Suppress(\"UNCHECKED_CAST\")\n    return this as Array<T>\n}\n\n/**\n * Splits the original array into pair of lists,\n * where *first* list contains elements for which [predicate] yielded `true`,\n * while *second* list contains elements for which [predicate] yielded `false`.\n */\npublic inline fun <T> Array<out T>.partition(predicate: (T) -> Boolean): Pair<List<T>, List<T>> {\n    val first = ArrayList<T>()\n    val second = ArrayList<T>()\n    for (element in this) {\n        if (predicate(element)) {\n            first.add(element)\n        } else {\n            second.add(element)\n        }\n    }\n    return Pair(first, second)\n}\n\n/**\n * Splits the original array into pair of lists,\n * where *first* list contains elements for which [predicate] yielded `true`,\n * while *second* list contains elements for which [predicate] yielded `false`.\n */\npublic inline fun ByteArray.partition(predicate: (Byte) -> Boolean): Pair<List<Byte>, List<Byte>> {\n    val first = ArrayList<Byte>()\n    val second = ArrayList<Byte>()\n    for (element in this) {\n        if (predicate(element)) {\n            first.add(element)\n        } else {\n            second.add(element)\n        }\n    }\n    return Pair(first, second)\n}\n\n/**\n * Splits the original array into pair of lists,\n * where *first* list contains elements for which [predicate] yielded `true`,\n * while *second* list contains elements for which [predicate] yielded `false`.\n */\npublic inline fun ShortArray.partition(predicate: (Short) -> Boolean): Pair<List<Short>, List<Short>> {\n    val first = ArrayList<Short>()\n    val second = ArrayList<Short>()\n    for (element in this) {\n        if (predicate(element)) {\n            first.add(element)\n        } else {\n            second.add(element)\n        }\n    }\n    return Pair(first, second)\n}\n\n/**\n * Splits the original array into pair of lists,\n * where *first* list contains elements for which [predicate] yielded `true`,\n * while *second* list contains elements for which [predicate] yielded `false`.\n */\npublic inline fun IntArray.partition(predicate: (Int) -> Boolean): Pair<List<Int>, List<Int>> {\n    val first = ArrayList<Int>()\n    val second = ArrayList<Int>()\n    for (element in this) {\n        if (predicate(element)) {\n            first.add(element)\n        } else {\n            second.add(element)\n        }\n    }\n    return Pair(first, second)\n}\n\n/**\n * Splits the original array into pair of lists,\n * where *first* list contains elements for which [predicate] yielded `true`,\n * while *second* list contains elements for which [predicate] yielded `false`.\n */\npublic inline fun LongArray.partition(predicate: (Long) -> Boolean): Pair<List<Long>, List<Long>> {\n    val first = ArrayList<Long>()\n    val second = ArrayList<Long>()\n    for (element in this) {\n        if (predicate(element)) {\n            first.add(element)\n        } else {\n            second.add(element)\n        }\n    }\n    return Pair(first, second)\n}\n\n/**\n * Splits the original array into pair of lists,\n * where *first* list contains elements for which [predicate] yielded `true`,\n * while *second* list contains elements for which [predicate] yielded `false`.\n */\npublic inline fun FloatArray.partition(predicate: (Float) -> Boolean): Pair<List<Float>, List<Float>> {\n    val first = ArrayList<Float>()\n    val second = ArrayList<Float>()\n    for (element in this) {\n        if (predicate(element)) {\n            first.add(element)\n        } else {\n            second.add(element)\n        }\n    }\n    return Pair(first, second)\n}\n\n/**\n * Splits the original array into pair of lists,\n * where *first* list contains elements for which [predicate] yielded `true`,\n * while *second* list contains elements for which [predicate] yielded `false`.\n */\npublic inline fun DoubleArray.partition(predicate: (Double) -> Boolean): Pair<List<Double>, List<Double>> {\n    val first = ArrayList<Double>()\n    val second = ArrayList<Double>()\n    for (element in this) {\n        if (predicate(element)) {\n            first.add(element)\n        } else {\n            second.add(element)\n        }\n    }\n    return Pair(first, second)\n}\n\n/**\n * Splits the original array into pair of lists,\n * where *first* list contains elements for which [predicate] yielded `true`,\n * while *second* list contains elements for which [predicate] yielded `false`.\n */\npublic inline fun BooleanArray.partition(predicate: (Boolean) -> Boolean): Pair<List<Boolean>, List<Boolean>> {\n    val first = ArrayList<Boolean>()\n    val second = ArrayList<Boolean>()\n    for (element in this) {\n        if (predicate(element)) {\n            first.add(element)\n        } else {\n            second.add(element)\n        }\n    }\n    return Pair(first, second)\n}\n\n/**\n * Splits the original array into pair of lists,\n * where *first* list contains elements for which [predicate] yielded `true`,\n * while *second* list contains elements for which [predicate] yielded `false`.\n */\npublic inline fun CharArray.partition(predicate: (Char) -> Boolean): Pair<List<Char>, List<Char>> {\n    val first = ArrayList<Char>()\n    val second = ArrayList<Char>()\n    for (element in this) {\n        if (predicate(element)) {\n            first.add(element)\n        } else {\n            second.add(element)\n        }\n    }\n    return Pair(first, second)\n}\n\n/**\n * Returns a list of pairs built from elements of both collections with same indexes. List has length of shortest collection.\n */\npublic infix fun <T, R> Array<out T>.zip(other: Array<out R>): List<Pair<T, R>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from elements of both collections with same indexes. List has length of shortest collection.\n */\npublic infix fun <R> ByteArray.zip(other: Array<out R>): List<Pair<Byte, R>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from elements of both collections with same indexes. List has length of shortest collection.\n */\npublic infix fun <R> ShortArray.zip(other: Array<out R>): List<Pair<Short, R>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from elements of both collections with same indexes. List has length of shortest collection.\n */\npublic infix fun <R> IntArray.zip(other: Array<out R>): List<Pair<Int, R>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from elements of both collections with same indexes. List has length of shortest collection.\n */\npublic infix fun <R> LongArray.zip(other: Array<out R>): List<Pair<Long, R>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from elements of both collections with same indexes. List has length of shortest collection.\n */\npublic infix fun <R> FloatArray.zip(other: Array<out R>): List<Pair<Float, R>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from elements of both collections with same indexes. List has length of shortest collection.\n */\npublic infix fun <R> DoubleArray.zip(other: Array<out R>): List<Pair<Double, R>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from elements of both collections with same indexes. List has length of shortest collection.\n */\npublic infix fun <R> BooleanArray.zip(other: Array<out R>): List<Pair<Boolean, R>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from elements of both collections with same indexes. List has length of shortest collection.\n */\npublic infix fun <R> CharArray.zip(other: Array<out R>): List<Pair<Char, R>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of values built from elements of both collections with same indexes using provided [transform]. List has length of shortest collection.\n */\npublic inline fun <T, R, V> Array<out T>.zip(other: Array<out R>, transform: (a: T, b: R) -> V): List<V> {\n    val size = minOf(size, other.size)\n    val list = ArrayList<V>(size)\n    for (i in 0 until size) {\n        list.add(transform(this[i], other[i]))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from elements of both collections with same indexes using provided [transform]. List has length of shortest collection.\n */\npublic inline fun <R, V> ByteArray.zip(other: Array<out R>, transform: (a: Byte, b: R) -> V): List<V> {\n    val size = minOf(size, other.size)\n    val list = ArrayList<V>(size)\n    for (i in 0 until size) {\n        list.add(transform(this[i], other[i]))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from elements of both collections with same indexes using provided [transform]. List has length of shortest collection.\n */\npublic inline fun <R, V> ShortArray.zip(other: Array<out R>, transform: (a: Short, b: R) -> V): List<V> {\n    val size = minOf(size, other.size)\n    val list = ArrayList<V>(size)\n    for (i in 0 until size) {\n        list.add(transform(this[i], other[i]))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from elements of both collections with same indexes using provided [transform]. List has length of shortest collection.\n */\npublic inline fun <R, V> IntArray.zip(other: Array<out R>, transform: (a: Int, b: R) -> V): List<V> {\n    val size = minOf(size, other.size)\n    val list = ArrayList<V>(size)\n    for (i in 0 until size) {\n        list.add(transform(this[i], other[i]))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from elements of both collections with same indexes using provided [transform]. List has length of shortest collection.\n */\npublic inline fun <R, V> LongArray.zip(other: Array<out R>, transform: (a: Long, b: R) -> V): List<V> {\n    val size = minOf(size, other.size)\n    val list = ArrayList<V>(size)\n    for (i in 0 until size) {\n        list.add(transform(this[i], other[i]))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from elements of both collections with same indexes using provided [transform]. List has length of shortest collection.\n */\npublic inline fun <R, V> FloatArray.zip(other: Array<out R>, transform: (a: Float, b: R) -> V): List<V> {\n    val size = minOf(size, other.size)\n    val list = ArrayList<V>(size)\n    for (i in 0 until size) {\n        list.add(transform(this[i], other[i]))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from elements of both collections with same indexes using provided [transform]. List has length of shortest collection.\n */\npublic inline fun <R, V> DoubleArray.zip(other: Array<out R>, transform: (a: Double, b: R) -> V): List<V> {\n    val size = minOf(size, other.size)\n    val list = ArrayList<V>(size)\n    for (i in 0 until size) {\n        list.add(transform(this[i], other[i]))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from elements of both collections with same indexes using provided [transform]. List has length of shortest collection.\n */\npublic inline fun <R, V> BooleanArray.zip(other: Array<out R>, transform: (a: Boolean, b: R) -> V): List<V> {\n    val size = minOf(size, other.size)\n    val list = ArrayList<V>(size)\n    for (i in 0 until size) {\n        list.add(transform(this[i], other[i]))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from elements of both collections with same indexes using provided [transform]. List has length of shortest collection.\n */\npublic inline fun <R, V> CharArray.zip(other: Array<out R>, transform: (a: Char, b: R) -> V): List<V> {\n    val size = minOf(size, other.size)\n    val list = ArrayList<V>(size)\n    for (i in 0 until size) {\n        list.add(transform(this[i], other[i]))\n    }\n    return list\n}\n\n/**\n * Returns a list of pairs built from elements of both collections with same indexes. List has length of shortest collection.\n */\npublic infix fun <T, R> Array<out T>.zip(other: Iterable<R>): List<Pair<T, R>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from elements of both collections with same indexes. List has length of shortest collection.\n */\npublic infix fun <R> ByteArray.zip(other: Iterable<R>): List<Pair<Byte, R>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from elements of both collections with same indexes. List has length of shortest collection.\n */\npublic infix fun <R> ShortArray.zip(other: Iterable<R>): List<Pair<Short, R>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from elements of both collections with same indexes. List has length of shortest collection.\n */\npublic infix fun <R> IntArray.zip(other: Iterable<R>): List<Pair<Int, R>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from elements of both collections with same indexes. List has length of shortest collection.\n */\npublic infix fun <R> LongArray.zip(other: Iterable<R>): List<Pair<Long, R>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from elements of both collections with same indexes. List has length of shortest collection.\n */\npublic infix fun <R> FloatArray.zip(other: Iterable<R>): List<Pair<Float, R>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from elements of both collections with same indexes. List has length of shortest collection.\n */\npublic infix fun <R> DoubleArray.zip(other: Iterable<R>): List<Pair<Double, R>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from elements of both collections with same indexes. List has length of shortest collection.\n */\npublic infix fun <R> BooleanArray.zip(other: Iterable<R>): List<Pair<Boolean, R>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from elements of both collections with same indexes. List has length of shortest collection.\n */\npublic infix fun <R> CharArray.zip(other: Iterable<R>): List<Pair<Char, R>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of values built from elements of both collections with same indexes using provided [transform]. List has length of shortest collection.\n */\npublic inline fun <T, R, V> Array<out T>.zip(other: Iterable<R>, transform: (a: T, b: R) -> V): List<V> {\n    val arraySize = size\n    val list = ArrayList<V>(minOf(other.collectionSizeOrDefault(10), arraySize))\n    var i = 0\n    for (element in other) {\n        if (i >= arraySize) break\n        list.add(transform(this[i++], element))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from elements of both collections with same indexes using provided [transform]. List has length of shortest collection.\n */\npublic inline fun <R, V> ByteArray.zip(other: Iterable<R>, transform: (a: Byte, b: R) -> V): List<V> {\n    val arraySize = size\n    val list = ArrayList<V>(minOf(other.collectionSizeOrDefault(10), arraySize))\n    var i = 0\n    for (element in other) {\n        if (i >= arraySize) break\n        list.add(transform(this[i++], element))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from elements of both collections with same indexes using provided [transform]. List has length of shortest collection.\n */\npublic inline fun <R, V> ShortArray.zip(other: Iterable<R>, transform: (a: Short, b: R) -> V): List<V> {\n    val arraySize = size\n    val list = ArrayList<V>(minOf(other.collectionSizeOrDefault(10), arraySize))\n    var i = 0\n    for (element in other) {\n        if (i >= arraySize) break\n        list.add(transform(this[i++], element))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from elements of both collections with same indexes using provided [transform]. List has length of shortest collection.\n */\npublic inline fun <R, V> IntArray.zip(other: Iterable<R>, transform: (a: Int, b: R) -> V): List<V> {\n    val arraySize = size\n    val list = ArrayList<V>(minOf(other.collectionSizeOrDefault(10), arraySize))\n    var i = 0\n    for (element in other) {\n        if (i >= arraySize) break\n        list.add(transform(this[i++], element))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from elements of both collections with same indexes using provided [transform]. List has length of shortest collection.\n */\npublic inline fun <R, V> LongArray.zip(other: Iterable<R>, transform: (a: Long, b: R) -> V): List<V> {\n    val arraySize = size\n    val list = ArrayList<V>(minOf(other.collectionSizeOrDefault(10), arraySize))\n    var i = 0\n    for (element in other) {\n        if (i >= arraySize) break\n        list.add(transform(this[i++], element))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from elements of both collections with same indexes using provided [transform]. List has length of shortest collection.\n */\npublic inline fun <R, V> FloatArray.zip(other: Iterable<R>, transform: (a: Float, b: R) -> V): List<V> {\n    val arraySize = size\n    val list = ArrayList<V>(minOf(other.collectionSizeOrDefault(10), arraySize))\n    var i = 0\n    for (element in other) {\n        if (i >= arraySize) break\n        list.add(transform(this[i++], element))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from elements of both collections with same indexes using provided [transform]. List has length of shortest collection.\n */\npublic inline fun <R, V> DoubleArray.zip(other: Iterable<R>, transform: (a: Double, b: R) -> V): List<V> {\n    val arraySize = size\n    val list = ArrayList<V>(minOf(other.collectionSizeOrDefault(10), arraySize))\n    var i = 0\n    for (element in other) {\n        if (i >= arraySize) break\n        list.add(transform(this[i++], element))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from elements of both collections with same indexes using provided [transform]. List has length of shortest collection.\n */\npublic inline fun <R, V> BooleanArray.zip(other: Iterable<R>, transform: (a: Boolean, b: R) -> V): List<V> {\n    val arraySize = size\n    val list = ArrayList<V>(minOf(other.collectionSizeOrDefault(10), arraySize))\n    var i = 0\n    for (element in other) {\n        if (i >= arraySize) break\n        list.add(transform(this[i++], element))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from elements of both collections with same indexes using provided [transform]. List has length of shortest collection.\n */\npublic inline fun <R, V> CharArray.zip(other: Iterable<R>, transform: (a: Char, b: R) -> V): List<V> {\n    val arraySize = size\n    val list = ArrayList<V>(minOf(other.collectionSizeOrDefault(10), arraySize))\n    var i = 0\n    for (element in other) {\n        if (i >= arraySize) break\n        list.add(transform(this[i++], element))\n    }\n    return list\n}\n\n/**\n * Returns a list of pairs built from elements of both collections with same indexes. List has length of shortest collection.\n */\npublic infix fun ByteArray.zip(other: ByteArray): List<Pair<Byte, Byte>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from elements of both collections with same indexes. List has length of shortest collection.\n */\npublic infix fun ShortArray.zip(other: ShortArray): List<Pair<Short, Short>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from elements of both collections with same indexes. List has length of shortest collection.\n */\npublic infix fun IntArray.zip(other: IntArray): List<Pair<Int, Int>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from elements of both collections with same indexes. List has length of shortest collection.\n */\npublic infix fun LongArray.zip(other: LongArray): List<Pair<Long, Long>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from elements of both collections with same indexes. List has length of shortest collection.\n */\npublic infix fun FloatArray.zip(other: FloatArray): List<Pair<Float, Float>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from elements of both collections with same indexes. List has length of shortest collection.\n */\npublic infix fun DoubleArray.zip(other: DoubleArray): List<Pair<Double, Double>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from elements of both collections with same indexes. List has length of shortest collection.\n */\npublic infix fun BooleanArray.zip(other: BooleanArray): List<Pair<Boolean, Boolean>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from elements of both collections with same indexes. List has length of shortest collection.\n */\npublic infix fun CharArray.zip(other: CharArray): List<Pair<Char, Char>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of values built from elements of both collections with same indexes using provided [transform]. List has length of shortest collection.\n */\npublic inline fun <V> ByteArray.zip(other: ByteArray, transform: (a: Byte, b: Byte) -> V): List<V> {\n    val size = minOf(size, other.size)\n    val list = ArrayList<V>(size)\n    for (i in 0 until size) {\n        list.add(transform(this[i], other[i]))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from elements of both collections with same indexes using provided [transform]. List has length of shortest collection.\n */\npublic inline fun <V> ShortArray.zip(other: ShortArray, transform: (a: Short, b: Short) -> V): List<V> {\n    val size = minOf(size, other.size)\n    val list = ArrayList<V>(size)\n    for (i in 0 until size) {\n        list.add(transform(this[i], other[i]))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from elements of both collections with same indexes using provided [transform]. List has length of shortest collection.\n */\npublic inline fun <V> IntArray.zip(other: IntArray, transform: (a: Int, b: Int) -> V): List<V> {\n    val size = minOf(size, other.size)\n    val list = ArrayList<V>(size)\n    for (i in 0 until size) {\n        list.add(transform(this[i], other[i]))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from elements of both collections with same indexes using provided [transform]. List has length of shortest collection.\n */\npublic inline fun <V> LongArray.zip(other: LongArray, transform: (a: Long, b: Long) -> V): List<V> {\n    val size = minOf(size, other.size)\n    val list = ArrayList<V>(size)\n    for (i in 0 until size) {\n        list.add(transform(this[i], other[i]))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from elements of both collections with same indexes using provided [transform]. List has length of shortest collection.\n */\npublic inline fun <V> FloatArray.zip(other: FloatArray, transform: (a: Float, b: Float) -> V): List<V> {\n    val size = minOf(size, other.size)\n    val list = ArrayList<V>(size)\n    for (i in 0 until size) {\n        list.add(transform(this[i], other[i]))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from elements of both collections with same indexes using provided [transform]. List has length of shortest collection.\n */\npublic inline fun <V> DoubleArray.zip(other: DoubleArray, transform: (a: Double, b: Double) -> V): List<V> {\n    val size = minOf(size, other.size)\n    val list = ArrayList<V>(size)\n    for (i in 0 until size) {\n        list.add(transform(this[i], other[i]))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from elements of both collections with same indexes using provided [transform]. List has length of shortest collection.\n */\npublic inline fun <V> BooleanArray.zip(other: BooleanArray, transform: (a: Boolean, b: Boolean) -> V): List<V> {\n    val size = minOf(size, other.size)\n    val list = ArrayList<V>(size)\n    for (i in 0 until size) {\n        list.add(transform(this[i], other[i]))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from elements of both collections with same indexes using provided [transform]. List has length of shortest collection.\n */\npublic inline fun <V> CharArray.zip(other: CharArray, transform: (a: Char, b: Char) -> V): List<V> {\n    val size = minOf(size, other.size)\n    val list = ArrayList<V>(size)\n    for (i in 0 until size) {\n        list.add(transform(this[i], other[i]))\n    }\n    return list\n}\n\n/**\n * Appends the string from all the elements separated using [separator] and using the given [prefix] and [postfix] if supplied.\n * \n * If the collection could be huge, you can specify a non-negative value of [limit], in which case only the first [limit]\n * elements will be appended, followed by the [truncated] string (which defaults to \"...\").\n * \n * @sample samples.collections.Collections.Transformations.joinTo\n */\npublic fun <T, A : Appendable> Array<out T>.joinTo(buffer: A, separator: CharSequence = \", \", prefix: CharSequence = \"\", postfix: CharSequence = \"\", limit: Int = -1, truncated: CharSequence = \"...\", transform: ((T) -> CharSequence)? = null): A {\n    buffer.append(prefix)\n    var count = 0\n    for (element in this) {\n        if (++count > 1) buffer.append(separator)\n        if (limit < 0 || count <= limit) {\n            buffer.appendElement(element, transform)\n        } else break\n    }\n    if (limit >= 0 && count > limit) buffer.append(truncated)\n    buffer.append(postfix)\n    return buffer\n}\n\n/**\n * Appends the string from all the elements separated using [separator] and using the given [prefix] and [postfix] if supplied.\n * \n * If the collection could be huge, you can specify a non-negative value of [limit], in which case only the first [limit]\n * elements will be appended, followed by the [truncated] string (which defaults to \"...\").\n * \n * @sample samples.collections.Collections.Transformations.joinTo\n */\npublic fun <A : Appendable> ByteArray.joinTo(buffer: A, separator: CharSequence = \", \", prefix: CharSequence = \"\", postfix: CharSequence = \"\", limit: Int = -1, truncated: CharSequence = \"...\", transform: ((Byte) -> CharSequence)? = null): A {\n    buffer.append(prefix)\n    var count = 0\n    for (element in this) {\n        if (++count > 1) buffer.append(separator)\n        if (limit < 0 || count <= limit) {\n            if (transform != null)\n                buffer.append(transform(element))\n            else\n                buffer.append(element.toString())\n        } else break\n    }\n    if (limit >= 0 && count > limit) buffer.append(truncated)\n    buffer.append(postfix)\n    return buffer\n}\n\n/**\n * Appends the string from all the elements separated using [separator] and using the given [prefix] and [postfix] if supplied.\n * \n * If the collection could be huge, you can specify a non-negative value of [limit], in which case only the first [limit]\n * elements will be appended, followed by the [truncated] string (which defaults to \"...\").\n * \n * @sample samples.collections.Collections.Transformations.joinTo\n */\npublic fun <A : Appendable> ShortArray.joinTo(buffer: A, separator: CharSequence = \", \", prefix: CharSequence = \"\", postfix: CharSequence = \"\", limit: Int = -1, truncated: CharSequence = \"...\", transform: ((Short) -> CharSequence)? = null): A {\n    buffer.append(prefix)\n    var count = 0\n    for (element in this) {\n        if (++count > 1) buffer.append(separator)\n        if (limit < 0 || count <= limit) {\n            if (transform != null)\n                buffer.append(transform(element))\n            else\n                buffer.append(element.toString())\n        } else break\n    }\n    if (limit >= 0 && count > limit) buffer.append(truncated)\n    buffer.append(postfix)\n    return buffer\n}\n\n/**\n * Appends the string from all the elements separated using [separator] and using the given [prefix] and [postfix] if supplied.\n * \n * If the collection could be huge, you can specify a non-negative value of [limit], in which case only the first [limit]\n * elements will be appended, followed by the [truncated] string (which defaults to \"...\").\n * \n * @sample samples.collections.Collections.Transformations.joinTo\n */\npublic fun <A : Appendable> IntArray.joinTo(buffer: A, separator: CharSequence = \", \", prefix: CharSequence = \"\", postfix: CharSequence = \"\", limit: Int = -1, truncated: CharSequence = \"...\", transform: ((Int) -> CharSequence)? = null): A {\n    buffer.append(prefix)\n    var count = 0\n    for (element in this) {\n        if (++count > 1) buffer.append(separator)\n        if (limit < 0 || count <= limit) {\n            if (transform != null)\n                buffer.append(transform(element))\n            else\n                buffer.append(element.toString())\n        } else break\n    }\n    if (limit >= 0 && count > limit) buffer.append(truncated)\n    buffer.append(postfix)\n    return buffer\n}\n\n/**\n * Appends the string from all the elements separated using [separator] and using the given [prefix] and [postfix] if supplied.\n * \n * If the collection could be huge, you can specify a non-negative value of [limit], in which case only the first [limit]\n * elements will be appended, followed by the [truncated] string (which defaults to \"...\").\n * \n * @sample samples.collections.Collections.Transformations.joinTo\n */\npublic fun <A : Appendable> LongArray.joinTo(buffer: A, separator: CharSequence = \", \", prefix: CharSequence = \"\", postfix: CharSequence = \"\", limit: Int = -1, truncated: CharSequence = \"...\", transform: ((Long) -> CharSequence)? = null): A {\n    buffer.append(prefix)\n    var count = 0\n    for (element in this) {\n        if (++count > 1) buffer.append(separator)\n        if (limit < 0 || count <= limit) {\n            if (transform != null)\n                buffer.append(transform(element))\n            else\n                buffer.append(element.toString())\n        } else break\n    }\n    if (limit >= 0 && count > limit) buffer.append(truncated)\n    buffer.append(postfix)\n    return buffer\n}\n\n/**\n * Appends the string from all the elements separated using [separator] and using the given [prefix] and [postfix] if supplied.\n * \n * If the collection could be huge, you can specify a non-negative value of [limit], in which case only the first [limit]\n * elements will be appended, followed by the [truncated] string (which defaults to \"...\").\n * \n * @sample samples.collections.Collections.Transformations.joinTo\n */\npublic fun <A : Appendable> FloatArray.joinTo(buffer: A, separator: CharSequence = \", \", prefix: CharSequence = \"\", postfix: CharSequence = \"\", limit: Int = -1, truncated: CharSequence = \"...\", transform: ((Float) -> CharSequence)? = null): A {\n    buffer.append(prefix)\n    var count = 0\n    for (element in this) {\n        if (++count > 1) buffer.append(separator)\n        if (limit < 0 || count <= limit) {\n            if (transform != null)\n                buffer.append(transform(element))\n            else\n                buffer.append(element.toString())\n        } else break\n    }\n    if (limit >= 0 && count > limit) buffer.append(truncated)\n    buffer.append(postfix)\n    return buffer\n}\n\n/**\n * Appends the string from all the elements separated using [separator] and using the given [prefix] and [postfix] if supplied.\n * \n * If the collection could be huge, you can specify a non-negative value of [limit], in which case only the first [limit]\n * elements will be appended, followed by the [truncated] string (which defaults to \"...\").\n * \n * @sample samples.collections.Collections.Transformations.joinTo\n */\npublic fun <A : Appendable> DoubleArray.joinTo(buffer: A, separator: CharSequence = \", \", prefix: CharSequence = \"\", postfix: CharSequence = \"\", limit: Int = -1, truncated: CharSequence = \"...\", transform: ((Double) -> CharSequence)? = null): A {\n    buffer.append(prefix)\n    var count = 0\n    for (element in this) {\n        if (++count > 1) buffer.append(separator)\n        if (limit < 0 || count <= limit) {\n            if (transform != null)\n                buffer.append(transform(element))\n            else\n                buffer.append(element.toString())\n        } else break\n    }\n    if (limit >= 0 && count > limit) buffer.append(truncated)\n    buffer.append(postfix)\n    return buffer\n}\n\n/**\n * Appends the string from all the elements separated using [separator] and using the given [prefix] and [postfix] if supplied.\n * \n * If the collection could be huge, you can specify a non-negative value of [limit], in which case only the first [limit]\n * elements will be appended, followed by the [truncated] string (which defaults to \"...\").\n * \n * @sample samples.collections.Collections.Transformations.joinTo\n */\npublic fun <A : Appendable> BooleanArray.joinTo(buffer: A, separator: CharSequence = \", \", prefix: CharSequence = \"\", postfix: CharSequence = \"\", limit: Int = -1, truncated: CharSequence = \"...\", transform: ((Boolean) -> CharSequence)? = null): A {\n    buffer.append(prefix)\n    var count = 0\n    for (element in this) {\n        if (++count > 1) buffer.append(separator)\n        if (limit < 0 || count <= limit) {\n            if (transform != null)\n                buffer.append(transform(element))\n            else\n                buffer.append(element.toString())\n        } else break\n    }\n    if (limit >= 0 && count > limit) buffer.append(truncated)\n    buffer.append(postfix)\n    return buffer\n}\n\n/**\n * Appends the string from all the elements separated using [separator] and using the given [prefix] and [postfix] if supplied.\n * \n * If the collection could be huge, you can specify a non-negative value of [limit], in which case only the first [limit]\n * elements will be appended, followed by the [truncated] string (which defaults to \"...\").\n * \n * @sample samples.collections.Collections.Transformations.joinTo\n */\npublic fun <A : Appendable> CharArray.joinTo(buffer: A, separator: CharSequence = \", \", prefix: CharSequence = \"\", postfix: CharSequence = \"\", limit: Int = -1, truncated: CharSequence = \"...\", transform: ((Char) -> CharSequence)? = null): A {\n    buffer.append(prefix)\n    var count = 0\n    for (element in this) {\n        if (++count > 1) buffer.append(separator)\n        if (limit < 0 || count <= limit) {\n            if (transform != null)\n                buffer.append(transform(element))\n            else\n                buffer.append(element)\n        } else break\n    }\n    if (limit >= 0 && count > limit) buffer.append(truncated)\n    buffer.append(postfix)\n    return buffer\n}\n\n/**\n * Creates a string from all the elements separated using [separator] and using the given [prefix] and [postfix] if supplied.\n * \n * If the collection could be huge, you can specify a non-negative value of [limit], in which case only the first [limit]\n * elements will be appended, followed by the [truncated] string (which defaults to \"...\").\n * \n * @sample samples.collections.Collections.Transformations.joinToString\n */\npublic fun <T> Array<out T>.joinToString(separator: CharSequence = \", \", prefix: CharSequence = \"\", postfix: CharSequence = \"\", limit: Int = -1, truncated: CharSequence = \"...\", transform: ((T) -> CharSequence)? = null): String {\n    return joinTo(StringBuilder(), separator, prefix, postfix, limit, truncated, transform).toString()\n}\n\n/**\n * Creates a string from all the elements separated using [separator] and using the given [prefix] and [postfix] if supplied.\n * \n * If the collection could be huge, you can specify a non-negative value of [limit], in which case only the first [limit]\n * elements will be appended, followed by the [truncated] string (which defaults to \"...\").\n * \n * @sample samples.collections.Collections.Transformations.joinToString\n */\npublic fun ByteArray.joinToString(separator: CharSequence = \", \", prefix: CharSequence = \"\", postfix: CharSequence = \"\", limit: Int = -1, truncated: CharSequence = \"...\", transform: ((Byte) -> CharSequence)? = null): String {\n    return joinTo(StringBuilder(), separator, prefix, postfix, limit, truncated, transform).toString()\n}\n\n/**\n * Creates a string from all the elements separated using [separator] and using the given [prefix] and [postfix] if supplied.\n * \n * If the collection could be huge, you can specify a non-negative value of [limit], in which case only the first [limit]\n * elements will be appended, followed by the [truncated] string (which defaults to \"...\").\n * \n * @sample samples.collections.Collections.Transformations.joinToString\n */\npublic fun ShortArray.joinToString(separator: CharSequence = \", \", prefix: CharSequence = \"\", postfix: CharSequence = \"\", limit: Int = -1, truncated: CharSequence = \"...\", transform: ((Short) -> CharSequence)? = null): String {\n    return joinTo(StringBuilder(), separator, prefix, postfix, limit, truncated, transform).toString()\n}\n\n/**\n * Creates a string from all the elements separated using [separator] and using the given [prefix] and [postfix] if supplied.\n * \n * If the collection could be huge, you can specify a non-negative value of [limit], in which case only the first [limit]\n * elements will be appended, followed by the [truncated] string (which defaults to \"...\").\n * \n * @sample samples.collections.Collections.Transformations.joinToString\n */\npublic fun IntArray.joinToString(separator: CharSequence = \", \", prefix: CharSequence = \"\", postfix: CharSequence = \"\", limit: Int = -1, truncated: CharSequence = \"...\", transform: ((Int) -> CharSequence)? = null): String {\n    return joinTo(StringBuilder(), separator, prefix, postfix, limit, truncated, transform).toString()\n}\n\n/**\n * Creates a string from all the elements separated using [separator] and using the given [prefix] and [postfix] if supplied.\n * \n * If the collection could be huge, you can specify a non-negative value of [limit], in which case only the first [limit]\n * elements will be appended, followed by the [truncated] string (which defaults to \"...\").\n * \n * @sample samples.collections.Collections.Transformations.joinToString\n */\npublic fun LongArray.joinToString(separator: CharSequence = \", \", prefix: CharSequence = \"\", postfix: CharSequence = \"\", limit: Int = -1, truncated: CharSequence = \"...\", transform: ((Long) -> CharSequence)? = null): String {\n    return joinTo(StringBuilder(), separator, prefix, postfix, limit, truncated, transform).toString()\n}\n\n/**\n * Creates a string from all the elements separated using [separator] and using the given [prefix] and [postfix] if supplied.\n * \n * If the collection could be huge, you can specify a non-negative value of [limit], in which case only the first [limit]\n * elements will be appended, followed by the [truncated] string (which defaults to \"...\").\n * \n * @sample samples.collections.Collections.Transformations.joinToString\n */\npublic fun FloatArray.joinToString(separator: CharSequence = \", \", prefix: CharSequence = \"\", postfix: CharSequence = \"\", limit: Int = -1, truncated: CharSequence = \"...\", transform: ((Float) -> CharSequence)? = null): String {\n    return joinTo(StringBuilder(), separator, prefix, postfix, limit, truncated, transform).toString()\n}\n\n/**\n * Creates a string from all the elements separated using [separator] and using the given [prefix] and [postfix] if supplied.\n * \n * If the collection could be huge, you can specify a non-negative value of [limit], in which case only the first [limit]\n * elements will be appended, followed by the [truncated] string (which defaults to \"...\").\n * \n * @sample samples.collections.Collections.Transformations.joinToString\n */\npublic fun DoubleArray.joinToString(separator: CharSequence = \", \", prefix: CharSequence = \"\", postfix: CharSequence = \"\", limit: Int = -1, truncated: CharSequence = \"...\", transform: ((Double) -> CharSequence)? = null): String {\n    return joinTo(StringBuilder(), separator, prefix, postfix, limit, truncated, transform).toString()\n}\n\n/**\n * Creates a string from all the elements separated using [separator] and using the given [prefix] and [postfix] if supplied.\n * \n * If the collection could be huge, you can specify a non-negative value of [limit], in which case only the first [limit]\n * elements will be appended, followed by the [truncated] string (which defaults to \"...\").\n * \n * @sample samples.collections.Collections.Transformations.joinToString\n */\npublic fun BooleanArray.joinToString(separator: CharSequence = \", \", prefix: CharSequence = \"\", postfix: CharSequence = \"\", limit: Int = -1, truncated: CharSequence = \"...\", transform: ((Boolean) -> CharSequence)? = null): String {\n    return joinTo(StringBuilder(), separator, prefix, postfix, limit, truncated, transform).toString()\n}\n\n/**\n * Creates a string from all the elements separated using [separator] and using the given [prefix] and [postfix] if supplied.\n * \n * If the collection could be huge, you can specify a non-negative value of [limit], in which case only the first [limit]\n * elements will be appended, followed by the [truncated] string (which defaults to \"...\").\n * \n * @sample samples.collections.Collections.Transformations.joinToString\n */\npublic fun CharArray.joinToString(separator: CharSequence = \", \", prefix: CharSequence = \"\", postfix: CharSequence = \"\", limit: Int = -1, truncated: CharSequence = \"...\", transform: ((Char) -> CharSequence)? = null): String {\n    return joinTo(StringBuilder(), separator, prefix, postfix, limit, truncated, transform).toString()\n}\n\n/**\n * Creates an [Iterable] instance that wraps the original array returning its elements when being iterated.\n */\npublic fun <T> Array<out T>.asIterable(): Iterable<T> {\n    if (isEmpty()) return emptyList()\n    return Iterable { this.iterator() }\n}\n\n/**\n * Creates an [Iterable] instance that wraps the original array returning its elements when being iterated.\n */\npublic fun ByteArray.asIterable(): Iterable<Byte> {\n    if (isEmpty()) return emptyList()\n    return Iterable { this.iterator() }\n}\n\n/**\n * Creates an [Iterable] instance that wraps the original array returning its elements when being iterated.\n */\npublic fun ShortArray.asIterable(): Iterable<Short> {\n    if (isEmpty()) return emptyList()\n    return Iterable { this.iterator() }\n}\n\n/**\n * Creates an [Iterable] instance that wraps the original array returning its elements when being iterated.\n */\npublic fun IntArray.asIterable(): Iterable<Int> {\n    if (isEmpty()) return emptyList()\n    return Iterable { this.iterator() }\n}\n\n/**\n * Creates an [Iterable] instance that wraps the original array returning its elements when being iterated.\n */\npublic fun LongArray.asIterable(): Iterable<Long> {\n    if (isEmpty()) return emptyList()\n    return Iterable { this.iterator() }\n}\n\n/**\n * Creates an [Iterable] instance that wraps the original array returning its elements when being iterated.\n */\npublic fun FloatArray.asIterable(): Iterable<Float> {\n    if (isEmpty()) return emptyList()\n    return Iterable { this.iterator() }\n}\n\n/**\n * Creates an [Iterable] instance that wraps the original array returning its elements when being iterated.\n */\npublic fun DoubleArray.asIterable(): Iterable<Double> {\n    if (isEmpty()) return emptyList()\n    return Iterable { this.iterator() }\n}\n\n/**\n * Creates an [Iterable] instance that wraps the original array returning its elements when being iterated.\n */\npublic fun BooleanArray.asIterable(): Iterable<Boolean> {\n    if (isEmpty()) return emptyList()\n    return Iterable { this.iterator() }\n}\n\n/**\n * Creates an [Iterable] instance that wraps the original array returning its elements when being iterated.\n */\npublic fun CharArray.asIterable(): Iterable<Char> {\n    if (isEmpty()) return emptyList()\n    return Iterable { this.iterator() }\n}\n\n/**\n * Creates a [Sequence] instance that wraps the original array returning its elements when being iterated.\n * \n * @sample samples.collections.Sequences.Building.sequenceFromArray\n */\npublic fun <T> Array<out T>.asSequence(): Sequence<T> {\n    if (isEmpty()) return emptySequence()\n    return Sequence { this.iterator() }\n}\n\n/**\n * Creates a [Sequence] instance that wraps the original array returning its elements when being iterated.\n * \n * @sample samples.collections.Sequences.Building.sequenceFromArray\n */\npublic fun ByteArray.asSequence(): Sequence<Byte> {\n    if (isEmpty()) return emptySequence()\n    return Sequence { this.iterator() }\n}\n\n/**\n * Creates a [Sequence] instance that wraps the original array returning its elements when being iterated.\n * \n * @sample samples.collections.Sequences.Building.sequenceFromArray\n */\npublic fun ShortArray.asSequence(): Sequence<Short> {\n    if (isEmpty()) return emptySequence()\n    return Sequence { this.iterator() }\n}\n\n/**\n * Creates a [Sequence] instance that wraps the original array returning its elements when being iterated.\n * \n * @sample samples.collections.Sequences.Building.sequenceFromArray\n */\npublic fun IntArray.asSequence(): Sequence<Int> {\n    if (isEmpty()) return emptySequence()\n    return Sequence { this.iterator() }\n}\n\n/**\n * Creates a [Sequence] instance that wraps the original array returning its elements when being iterated.\n * \n * @sample samples.collections.Sequences.Building.sequenceFromArray\n */\npublic fun LongArray.asSequence(): Sequence<Long> {\n    if (isEmpty()) return emptySequence()\n    return Sequence { this.iterator() }\n}\n\n/**\n * Creates a [Sequence] instance that wraps the original array returning its elements when being iterated.\n * \n * @sample samples.collections.Sequences.Building.sequenceFromArray\n */\npublic fun FloatArray.asSequence(): Sequence<Float> {\n    if (isEmpty()) return emptySequence()\n    return Sequence { this.iterator() }\n}\n\n/**\n * Creates a [Sequence] instance that wraps the original array returning its elements when being iterated.\n * \n * @sample samples.collections.Sequences.Building.sequenceFromArray\n */\npublic fun DoubleArray.asSequence(): Sequence<Double> {\n    if (isEmpty()) return emptySequence()\n    return Sequence { this.iterator() }\n}\n\n/**\n * Creates a [Sequence] instance that wraps the original array returning its elements when being iterated.\n * \n * @sample samples.collections.Sequences.Building.sequenceFromArray\n */\npublic fun BooleanArray.asSequence(): Sequence<Boolean> {\n    if (isEmpty()) return emptySequence()\n    return Sequence { this.iterator() }\n}\n\n/**\n * Creates a [Sequence] instance that wraps the original array returning its elements when being iterated.\n * \n * @sample samples.collections.Sequences.Building.sequenceFromArray\n */\npublic fun CharArray.asSequence(): Sequence<Char> {\n    if (isEmpty()) return emptySequence()\n    return Sequence { this.iterator() }\n}\n\n/**\n * Returns an average value of elements in the array.\n */\n@kotlin.jvm.JvmName(\"averageOfByte\")\npublic fun Array<out Byte>.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        count += 1\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns an average value of elements in the array.\n */\n@kotlin.jvm.JvmName(\"averageOfShort\")\npublic fun Array<out Short>.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        count += 1\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns an average value of elements in the array.\n */\n@kotlin.jvm.JvmName(\"averageOfInt\")\npublic fun Array<out Int>.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        count += 1\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns an average value of elements in the array.\n */\n@kotlin.jvm.JvmName(\"averageOfLong\")\npublic fun Array<out Long>.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        count += 1\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns an average value of elements in the array.\n */\n@kotlin.jvm.JvmName(\"averageOfFloat\")\npublic fun Array<out Float>.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        count += 1\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns an average value of elements in the array.\n */\n@kotlin.jvm.JvmName(\"averageOfDouble\")\npublic fun Array<out Double>.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        count += 1\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns an average value of elements in the array.\n */\npublic fun ByteArray.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        count += 1\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns an average value of elements in the array.\n */\npublic fun ShortArray.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        count += 1\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns an average value of elements in the array.\n */\npublic fun IntArray.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        count += 1\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns an average value of elements in the array.\n */\npublic fun LongArray.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        count += 1\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns an average value of elements in the array.\n */\npublic fun FloatArray.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        count += 1\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns an average value of elements in the array.\n */\npublic fun DoubleArray.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        count += 1\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns the sum of all elements in the array.\n */\n@kotlin.jvm.JvmName(\"sumOfByte\")\npublic fun Array<out Byte>.sum(): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all elements in the array.\n */\n@kotlin.jvm.JvmName(\"sumOfShort\")\npublic fun Array<out Short>.sum(): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all elements in the array.\n */\n@kotlin.jvm.JvmName(\"sumOfInt\")\npublic fun Array<out Int>.sum(): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all elements in the array.\n */\n@kotlin.jvm.JvmName(\"sumOfLong\")\npublic fun Array<out Long>.sum(): Long {\n    var sum: Long = 0L\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all elements in the array.\n */\n@kotlin.jvm.JvmName(\"sumOfFloat\")\npublic fun Array<out Float>.sum(): Float {\n    var sum: Float = 0.0f\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all elements in the array.\n */\n@kotlin.jvm.JvmName(\"sumOfDouble\")\npublic fun Array<out Double>.sum(): Double {\n    var sum: Double = 0.0\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all elements in the array.\n */\npublic fun ByteArray.sum(): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all elements in the array.\n */\npublic fun ShortArray.sum(): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all elements in the array.\n */\npublic fun IntArray.sum(): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all elements in the array.\n */\npublic fun LongArray.sum(): Long {\n    var sum: Long = 0L\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all elements in the array.\n */\npublic fun FloatArray.sum(): Float {\n    var sum: Float = 0.0f\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all elements in the array.\n */\npublic fun DoubleArray.sum(): Double {\n    var sum: Double = 0.0\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n","/*\n * Copyright 2010-2016 JetBrains s.r.o.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n// a package is omitted to get declarations directly under the module\n\n@PublishedApi\nexternal internal fun <T> Array(size: Int): Array<T>\n\n@JsName(\"newArray\")\nfun <T> newArray(size: Int, initValue: T) = fillArrayVal(Array<T>(size), initValue)\n\n@JsName(\"newArrayF\")\ninline fun <T> arrayWithFun(size: Int, init: (Int) -> T) = fillArrayFun(Array<T>(size), init)\n\n@JsName(\"fillArray\")\ninline fun <T> fillArrayFun(array: Array<T>, init: (Int) -> T): Array<T> {\n    for (i in 0..array.size - 1) {\n        array[i] = init(i)\n    }\n    return array\n}\n\n@JsName(\"booleanArray\")\nfun booleanArray(size: Int, init: dynamic): Array<Boolean> {\n    val result: dynamic = Array<Boolean>(size)\n    result.`$type$` = \"BooleanArray\"\n    return when (init) {\n        null, true -> fillArrayVal(result, false)\n        false -> result\n        else -> fillArrayFun<Boolean>(result, init)\n    }\n}\n\n@JsName(\"booleanArrayF\")\ninline fun booleanArrayWithFun(size: Int, init: (Int) -> Boolean): Array<Boolean> = fillArrayFun(booleanArray(size, false), init)\n\n@JsName(\"charArray\")\n@Suppress(\"UNUSED_PARAMETER\")\nfun charArray(size: Int, init: dynamic): Array<Char> {\n    val result = js(\"new Uint16Array(size)\")\n    result.`$type$` = \"CharArray\"\n    return when (init) {\n        null, true, false -> result // For consistency\n        else -> fillArrayFun<Char>(result, init)\n    }\n}\n\n@JsName(\"charArrayF\")\ninline fun charArrayWithFun(size: Int, init: (Int) -> Char): Array<Char> {\n    val array = charArray(size, null)\n    for (i in 0..array.size - 1) {\n        val value = init(i)\n        js(\"array[i] = value;\")\n    }\n    return array\n}\n\n@JsName(\"untypedCharArrayF\")\ninline fun untypedCharArrayWithFun(size: Int, init: (Int) -> Char): Array<Char> {\n    val array = Array<Char>(size)\n    for (i in 0..array.size - 1) {\n        val value = init(i)\n        js(\"array[i] = value;\")\n    }\n    return array\n}\n\n@JsName(\"longArray\")\nfun longArray(size: Int, init: dynamic): Array<Long> {\n    val result: dynamic = Array<Long>(size)\n    result.`$type$` = \"LongArray\"\n    return when (init) {\n        null, true -> fillArrayVal(result, 0L)\n        false -> result\n        else -> fillArrayFun<Long>(result, init)\n    }\n}\n\n@JsName(\"longArrayF\")\ninline fun longArrayWithFun(size: Int, init: (Int) -> Long): Array<Long> = fillArrayFun(longArray(size, false), init)\n\nprivate fun <T> fillArrayVal(array: Array<T>, initValue: T): Array<T> {\n    for (i in 0..array.size - 1) {\n        array[i] = initValue\n    }\n    return array\n}","/*\n * Copyright 2010-2016 JetBrains s.r.o.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage kotlin.collections\n\nimport kotlin.comparisons.naturalOrder\nimport kotlin.math.floor\n\n/** Returns the array if it's not `null`, or an empty array otherwise. */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Array<out T>?.orEmpty(): Array<out T> = this ?: emptyArray<T>()\n\n@kotlin.internal.InlineOnly\npublic inline fun <T> Collection<T>.toTypedArray(): Array<T> = copyToArray(this)\n\n@JsName(\"copyToArray\")\n@PublishedApi\ninternal fun <T> copyToArray(collection: Collection<T>): Array<T> {\n    return if (collection.asDynamic().toArray !== undefined)\n        collection.asDynamic().toArray().unsafeCast<Array<T>>()\n    else\n        copyToArrayImpl(collection).unsafeCast<Array<T>>()\n}\n\n@JsName(\"copyToArrayImpl\")\ninternal fun copyToArrayImpl(collection: Collection<*>): Array<Any?> {\n    val array = emptyArray<Any?>()\n    val iterator = collection.iterator()\n    while (iterator.hasNext())\n        array.asDynamic().push(iterator.next())\n    return array\n}\n\n@JsName(\"copyToExistingArrayImpl\")\ninternal fun <T> copyToArrayImpl(collection: Collection<*>, array: Array<T>): Array<T> {\n    if (array.size < collection.size)\n        return copyToArrayImpl(collection).unsafeCast<Array<T>>()\n\n    val iterator = collection.iterator()\n    var index = 0\n    while (iterator.hasNext()) {\n        array[index++] = iterator.next().unsafeCast<T>()\n    }\n    if (index < array.size) {\n        array[index] = null.unsafeCast<T>()\n    }\n    return array\n}\n\n@library(\"arrayToString\")\n@Suppress(\"UNUSED_PARAMETER\")\ninternal fun arrayToString(array: Array<*>): String = definedExternally\n\n/**\n * Returns an immutable list containing only the specified object [element].\n */\npublic fun <T> listOf(element: T): List<T> = arrayListOf(element)\n\n/**\n * Returns an immutable set containing only the specified object [element].\n */\npublic fun <T> setOf(element: T): Set<T> = hashSetOf(element)\n\n/**\n * Returns an immutable map, mapping only the specified key to the\n * specified value.\n */\npublic fun <K, V> mapOf(pair: Pair<K, V>): Map<K, V> = hashMapOf(pair)\n\n/**\n * Fills the list with the provided [value].\n *\n * Each element in the list gets replaced with the [value].\n */\n@SinceKotlin(\"1.2\")\npublic fun <T> MutableList<T>.fill(value: T): Unit {\n    for (index in 0..lastIndex) {\n        this[index] = value\n    }\n}\n\n/**\n * Randomly shuffles elements in this list.\n *\n * See: https://en.wikipedia.org/wiki/Fisher%E2%80%93Yates_shuffle#The_modern_algorithm\n */\n@SinceKotlin(\"1.2\")\npublic fun <T> MutableList<T>.shuffle(): Unit {\n    for (i in lastIndex downTo 1) {\n        val j = rand(i + 1)\n        val copy = this[i]\n        this[i] = this[j]\n        this[j] = copy\n    }\n}\nprivate fun rand(upperBound: Int) = floor(kotlin.js.Math.random() * upperBound).toInt()\n\n/**\n * Returns a new list with the elements of this list randomly shuffled.\n */\n@SinceKotlin(\"1.2\")\npublic fun <T> Iterable<T>.shuffled(): List<T> = toMutableList().apply { shuffle() }\n\n/**\n * Sorts elements in the list in-place according to their natural sort order.\n */\npublic fun <T : Comparable<T>> MutableList<T>.sort(): Unit {\n    collectionsSort(this, naturalOrder())\n}\n\n/**\n * Sorts elements in the list in-place according to the order specified with [comparator].\n */\npublic fun <T> MutableList<T>.sortWith(comparator: Comparator<in T>): Unit {\n    collectionsSort(this, comparator)\n}\n\nprivate fun <T> collectionsSort(list: MutableList<T>, comparator: Comparator<in T>) {\n    if (list.size <= 1) return\n\n    val array = copyToArray(list)\n\n    array.asDynamic().sort(comparator.asDynamic().compare.bind(comparator))\n\n    for (i in 0 until array.size) {\n        list[i] = array[i]\n    }\n}\n\ninternal fun <T> arrayOfNulls(reference: Array<out T>, size: Int): Array<T> {\n    return arrayOfNulls<Any>(size).unsafeCast<Array<T>>()\n}\n\n// no singleton map implementation in js, return map as is\ninternal inline fun <K, V> Map<K, V>.toSingletonMapOrSelf(): Map<K, V> = this\n\ninternal inline fun <K, V> Map<out K, V>.toSingletonMap(): Map<K, V> = this.toMutableMap()\n\ninternal inline fun <T> Array<out T>.copyToArrayOfAny(isVarargs: Boolean): Array<out Any?> =\n        if (isVarargs)\n        // no need to copy vararg array in JS\n            this\n        else\n            this.copyOf()\n","@file:kotlin.jvm.JvmMultifileClass\n@file:kotlin.jvm.JvmName(\"StringsKt\")\n\npackage kotlin.text\n\n/**\n * Converts the string into a regular expression [Regex] with the default options.\n */\n@kotlin.internal.InlineOnly\npublic inline fun String.toRegex(): Regex = Regex(this)\n\n/**\n * Converts the string into a regular expression [Regex] with the specified single [option].\n */\n@kotlin.internal.InlineOnly\npublic inline fun String.toRegex(option: RegexOption): Regex = Regex(this, option)\n\n/**\n * Converts the string into a regular expression [Regex] with the specified set of [options].\n */\n@kotlin.internal.InlineOnly\npublic inline fun String.toRegex(options: Set<RegexOption>): Regex = Regex(this, options)\n\n/* Not available on platform: JS */\n\n\n\n\n\n\n","/*\n * Copyright 2010-2016 JetBrains s.r.o.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n@file:kotlin.jvm.JvmMultifileClass\n@file:kotlin.jvm.JvmName(\"StringsKt\")\n\n\npackage kotlin.text\n\nimport kotlin.comparisons.*\nimport kotlin.internal.contracts.*\n\n\n/**\n * Returns a sub sequence of this char sequence having leading and trailing characters matching the [predicate] removed.\n */\npublic inline fun CharSequence.trim(predicate: (Char) -> Boolean): CharSequence {\n    var startIndex = 0\n    var endIndex = length - 1\n    var startFound = false\n\n    while (startIndex <= endIndex) {\n        val index = if (!startFound) startIndex else endIndex\n        val match = predicate(this[index])\n\n        if (!startFound) {\n            if (!match)\n                startFound = true\n            else\n                startIndex += 1\n        }\n        else {\n            if (!match)\n                break\n            else\n                endIndex -= 1\n        }\n    }\n\n    return subSequence(startIndex, endIndex + 1)\n}\n\n/**\n * Returns a string having leading and trailing characters matching the [predicate] removed.\n */\npublic inline fun String.trim(predicate: (Char) -> Boolean): String\n        = (this as CharSequence).trim(predicate).toString()\n\n/**\n * Returns a sub sequence of this char sequence having leading characters matching the [predicate] removed.\n */\npublic inline fun CharSequence.trimStart(predicate: (Char) -> Boolean): CharSequence {\n    for (index in this.indices)\n        if (!predicate(this[index]))\n            return subSequence(index, length)\n\n    return \"\"\n}\n\n/**\n * Returns a string having leading characters matching the [predicate] removed.\n */\npublic inline fun String.trimStart(predicate: (Char) -> Boolean): String\n        = (this as CharSequence).trimStart(predicate).toString()\n\n/**\n * Returns a sub sequence of this char sequence having trailing characters matching the [predicate] removed.\n */\npublic inline fun CharSequence.trimEnd(predicate: (Char) -> Boolean): CharSequence {\n    for (index in this.indices.reversed())\n        if (!predicate(this[index]))\n            return substring(0, index + 1)\n\n    return \"\"\n}\n\n/**\n * Returns a string having trailing characters matching the [predicate] removed.\n */\npublic inline fun String.trimEnd(predicate: (Char) -> Boolean): String\n        = (this as CharSequence).trimEnd(predicate).toString()\n\n/**\n * Returns a sub sequence of this char sequence having leading and trailing characters from the [chars] array removed.\n */\npublic fun CharSequence.trim(vararg chars: Char): CharSequence = trim { it in chars }\n\n/**\n * Returns a string having leading and trailing characters from the [chars] array removed.\n */\npublic fun String.trim(vararg chars: Char): String = trim { it in chars }\n\n/**\n * Returns a sub sequence of this char sequence having leading characters from the [chars] array removed.\n */\npublic fun CharSequence.trimStart(vararg chars: Char): CharSequence = trimStart { it in chars }\n\n/**\n * Returns a string having leading characters from the [chars] array removed.\n */\npublic fun String.trimStart(vararg chars: Char): String = trimStart { it in chars }\n\n/**\n * Returns a sub sequence of this char sequence having trailing characters from the [chars] array removed.\n */\npublic fun CharSequence.trimEnd(vararg chars: Char): CharSequence = trimEnd { it in chars }\n\n/**\n * Returns a string having trailing characters from the [chars] array removed.\n */\npublic fun String.trimEnd(vararg chars: Char): String = trimEnd { it in chars }\n\n/**\n * Returns a sub sequence of this char sequence having leading and trailing whitespace removed.\n */\npublic fun CharSequence.trim(): CharSequence = trim(Char::isWhitespace)\n\n/**\n * Returns a string having leading and trailing whitespace removed.\n */\n@kotlin.internal.InlineOnly\npublic inline fun String.trim(): String = (this as CharSequence).trim().toString()\n\n/**\n * Returns a sub sequence of this char sequence having leading whitespace removed.\n */\npublic fun CharSequence.trimStart(): CharSequence = trimStart(Char::isWhitespace)\n\n/**\n * Returns a string having leading whitespace removed.\n */\n@kotlin.internal.InlineOnly\npublic inline fun String.trimStart(): String = (this as CharSequence).trimStart().toString()\n\n/**\n * Returns a sub sequence of this char sequence having trailing whitespace removed.\n */\npublic fun CharSequence.trimEnd(): CharSequence = trimEnd(Char::isWhitespace)\n\n/**\n * Returns a string having trailing whitespace removed.\n */\n@kotlin.internal.InlineOnly\npublic inline fun String.trimEnd(): String = (this as CharSequence).trimEnd().toString()\n\n/**\n * Returns a char sequence with content of this char sequence padded at the beginning\n * to the specified [length] with the specified character or space.\n *\n * @param length the desired string length.\n * @param padChar the character to pad string with, if it has length less than the [length] specified. Space is used by default.\n * @returns Returns a string, of length at least [length], consisting of string prepended with [padChar] as many times.\n * as are necessary to reach that length.\n */\npublic fun CharSequence.padStart(length: Int, padChar: Char = ' '): CharSequence {\n    if (length < 0)\n        throw IllegalArgumentException(\"Desired length $length is less than zero.\")\n    if (length <= this.length)\n        return this.subSequence(0, this.length)\n\n    val sb = StringBuilder(length)\n    for (i in 1..(length - this.length))\n        sb.append(padChar)\n    sb.append(this)\n    return sb\n}\n\n/**\n * Pads the string to the specified [length] at the beginning with the specified character or space.\n *\n * @param length the desired string length.\n * @param padChar the character to pad string with, if it has length less than the [length] specified. Space is used by default.\n * @returns Returns a string, of length at least [length], consisting of string prepended with [padChar] as many times.\n * as are necessary to reach that length.\n */\npublic fun String.padStart(length: Int, padChar: Char = ' '): String\n        = (this as CharSequence).padStart(length, padChar).toString()\n\n/**\n * Returns a char sequence with content of this char sequence padded at the end\n * to the specified [length] with the specified character or space.\n *\n * @param length the desired string length.\n * @param padChar the character to pad string with, if it has length less than the [length] specified. Space is used by default.\n * @returns Returns a string, of length at least [length], consisting of string prepended with [padChar] as many times.\n * as are necessary to reach that length.\n */\npublic fun CharSequence.padEnd(length: Int, padChar: Char = ' '): CharSequence {\n    if (length < 0)\n        throw IllegalArgumentException(\"Desired length $length is less than zero.\")\n    if (length <= this.length)\n        return this.subSequence(0, this.length)\n\n    val sb = StringBuilder(length)\n    sb.append(this)\n    for (i in 1..(length - this.length))\n        sb.append(padChar)\n    return sb\n}\n\n/**\n * Pads the string to the specified [length] at the end with the specified character or space.\n *\n * @param length the desired string length.\n * @param padChar the character to pad string with, if it has length less than the [length] specified. Space is used by default.\n * @returns Returns a string, of length at least [length], consisting of string prepended with [padChar] as many times.\n * as are necessary to reach that length.\n */\npublic fun String.padEnd(length: Int, padChar: Char = ' '): String\n        = (this as CharSequence).padEnd(length, padChar).toString()\n\n/**\n * Returns `true` if this nullable char sequence is either `null` or empty.\n */\n@kotlin.internal.InlineOnly\npublic inline fun CharSequence?.isNullOrEmpty(): Boolean {\n    contract {\n        returns(false) implies (this@isNullOrEmpty != null)\n    }\n\n    return this == null || this.length == 0\n}\n\n/**\n * Returns `true` if this char sequence is empty (contains no characters).\n */\n@kotlin.internal.InlineOnly\npublic inline fun CharSequence.isEmpty(): Boolean = length == 0\n\n/**\n * Returns `true` if this char sequence is not empty.\n */\n@kotlin.internal.InlineOnly\npublic inline fun CharSequence.isNotEmpty(): Boolean = length > 0\n\n// implemented differently in JVM and JS\n//public fun String.isBlank(): Boolean = length() == 0 || all { it.isWhitespace() }\n\n\n/**\n * Returns `true` if this char sequence is not empty and contains some characters except of whitespace characters.\n */\n@kotlin.internal.InlineOnly\npublic inline fun CharSequence.isNotBlank(): Boolean = !isBlank()\n\n/**\n * Returns `true` if this nullable char sequence is either `null` or empty or consists solely of whitespace characters.\n */\n@kotlin.internal.InlineOnly\npublic inline fun CharSequence?.isNullOrBlank(): Boolean {\n    contract {\n        returns(false) implies (this@isNullOrBlank != null)\n    }\n\n    return this == null || this.isBlank()\n}\n\n/**\n * Iterator for characters of the given char sequence.\n */\npublic operator fun CharSequence.iterator(): CharIterator = object : CharIterator() {\n    private var index = 0\n\n    public override fun nextChar(): Char = get(index++)\n\n    public override fun hasNext(): Boolean = index < length\n}\n\n/** Returns the string if it is not `null`, or the empty string otherwise. */\n@kotlin.internal.InlineOnly\npublic inline fun String?.orEmpty(): String = this ?: \"\"\n\n/**\n * Returns the range of valid character indices for this char sequence.\n */\npublic val CharSequence.indices: IntRange\n    get() = 0..length - 1\n\n/**\n * Returns the index of the last character in the char sequence or -1 if it is empty.\n */\npublic val CharSequence.lastIndex: Int\n    get() = this.length - 1\n\n/**\n * Returns `true` if this CharSequence has Unicode surrogate pair at the specified [index].\n */\npublic fun CharSequence.hasSurrogatePairAt(index: Int): Boolean {\n    return index in 0..length - 2\n            && this[index].isHighSurrogate()\n            && this[index + 1].isLowSurrogate()\n}\n\n/**\n * Returns a substring specified by the given [range] of indices.\n */\npublic fun String.substring(range: IntRange): String = substring(range.start, range.endInclusive + 1)\n\n/**\n * Returns a subsequence of this char sequence specified by the given [range] of indices.\n */\npublic fun CharSequence.subSequence(range: IntRange): CharSequence = subSequence(range.start, range.endInclusive + 1)\n\n/**\n * Returns a subsequence of this char sequence.\n *\n * This extension is chosen only for invocation with old-named parameters.\n * Replace parameter names with the same as those of [CharSequence.subSequence].\n */\n@kotlin.internal.InlineOnly\n@Suppress(\"EXTENSION_SHADOWED_BY_MEMBER\") // false warning\n@Deprecated(\"Use parameters named startIndex and endIndex.\", ReplaceWith(\"subSequence(startIndex = start, endIndex = end)\"))\npublic inline fun String.subSequence(start: Int, end: Int): CharSequence = subSequence(start, end)\n\n/**\n * Returns a substring of chars from a range of this char sequence starting at the [startIndex] and ending right before the [endIndex].\n *\n * @param startIndex the start index (inclusive).\n * @param endIndex the end index (exclusive). If not specified, the length of the char sequence is used.\n */\n@kotlin.internal.InlineOnly\npublic inline fun CharSequence.substring(startIndex: Int, endIndex: Int = length): String = subSequence(startIndex, endIndex).toString()\n\n/**\n * Returns a substring of chars at indices from the specified [range] of this char sequence.\n */\npublic fun CharSequence.substring(range: IntRange): String = subSequence(range.start, range.endInclusive + 1).toString()\n\n/**\n * Returns a substring before the first occurrence of [delimiter].\n * If the string does not contain the delimiter, returns [missingDelimiterValue] which defaults to the original string.\n */\npublic fun String.substringBefore(delimiter: Char, missingDelimiterValue: String = this): String {\n    val index = indexOf(delimiter)\n    return if (index == -1) missingDelimiterValue else substring(0, index)\n}\n\n/**\n * Returns a substring before the first occurrence of [delimiter].\n * If the string does not contain the delimiter, returns [missingDelimiterValue] which defaults to the original string.\n */\npublic fun String.substringBefore(delimiter: String, missingDelimiterValue: String = this): String {\n    val index = indexOf(delimiter)\n    return if (index == -1) missingDelimiterValue else substring(0, index)\n}\n\n/**\n * Returns a substring after the first occurrence of [delimiter].\n * If the string does not contain the delimiter, returns [missingDelimiterValue] which defaults to the original string.\n */\npublic fun String.substringAfter(delimiter: Char, missingDelimiterValue: String = this): String {\n    val index = indexOf(delimiter)\n    return if (index == -1) missingDelimiterValue else substring(index + 1, length)\n}\n\n/**\n * Returns a substring after the first occurrence of [delimiter].\n * If the string does not contain the delimiter, returns [missingDelimiterValue] which defaults to the original string.\n */\npublic fun String.substringAfter(delimiter: String, missingDelimiterValue: String = this): String {\n    val index = indexOf(delimiter)\n    return if (index == -1) missingDelimiterValue else substring(index + delimiter.length, length)\n}\n\n/**\n * Returns a substring before the last occurrence of [delimiter].\n * If the string does not contain the delimiter, returns [missingDelimiterValue] which defaults to the original string.\n */\npublic fun String.substringBeforeLast(delimiter: Char, missingDelimiterValue: String = this): String {\n    val index = lastIndexOf(delimiter)\n    return if (index == -1) missingDelimiterValue else substring(0, index)\n}\n\n/**\n * Returns a substring before the last occurrence of [delimiter].\n * If the string does not contain the delimiter, returns [missingDelimiterValue] which defaults to the original string.\n */\npublic fun String.substringBeforeLast(delimiter: String, missingDelimiterValue: String = this): String {\n    val index = lastIndexOf(delimiter)\n    return if (index == -1) missingDelimiterValue else substring(0, index)\n}\n\n/**\n * Returns a substring after the last occurrence of [delimiter].\n * If the string does not contain the delimiter, returns [missingDelimiterValue] which defaults to the original string.\n */\npublic fun String.substringAfterLast(delimiter: Char, missingDelimiterValue: String = this): String {\n    val index = lastIndexOf(delimiter)\n    return if (index == -1) missingDelimiterValue else substring(index + 1, length)\n}\n\n/**\n * Returns a substring after the last occurrence of [delimiter].\n * If the string does not contain the delimiter, returns [missingDelimiterValue] which defaults to the original string.\n */\npublic fun String.substringAfterLast(delimiter: String, missingDelimiterValue: String = this): String {\n    val index = lastIndexOf(delimiter)\n    return if (index == -1) missingDelimiterValue else substring(index + delimiter.length, length)\n}\n\n/**\n * Returns a char sequence with content of this char sequence where its part at the given range\n * is replaced with the [replacement] char sequence.\n * @param startIndex the index of the first character to be replaced.\n * @param endIndex the index of the first character after the replacement to keep in the string.\n */\npublic fun CharSequence.replaceRange(startIndex: Int, endIndex: Int, replacement: CharSequence): CharSequence {\n    if (endIndex < startIndex)\n        throw IndexOutOfBoundsException(\"End index ($endIndex) is less than start index ($startIndex).\")\n    val sb = StringBuilder()\n    sb.append(this, 0, startIndex)\n    sb.append(replacement)\n    sb.append(this, endIndex, length)\n    return sb\n}\n\n/**\n * Replaces the part of the string at the given range with the [replacement] char sequence.\n * @param startIndex the index of the first character to be replaced.\n * @param endIndex the index of the first character after the replacement to keep in the string.\n */\n@kotlin.internal.InlineOnly\npublic inline fun String.replaceRange(startIndex: Int, endIndex: Int, replacement: CharSequence): String\n        = (this as CharSequence).replaceRange(startIndex, endIndex, replacement).toString()\n\n/**\n * Returns a char sequence with content of this char sequence where its part at the given [range]\n * is replaced with the [replacement] char sequence.\n *\n * The end index of the [range] is included in the part to be replaced.\n */\npublic fun CharSequence.replaceRange(range: IntRange, replacement: CharSequence): CharSequence\n        = replaceRange(range.start, range.endInclusive + 1, replacement)\n\n/**\n * Replace the part of string at the given [range] with the [replacement] string.\n *\n * The end index of the [range] is included in the part to be replaced.\n */\n@kotlin.internal.InlineOnly\npublic inline fun String.replaceRange(range: IntRange, replacement: CharSequence): String\n        = (this as CharSequence).replaceRange(range, replacement).toString()\n\n/**\n * Returns a char sequence with content of this char sequence where its part at the given range is removed.\n *\n * @param startIndex the index of the first character to be removed.\n * @param endIndex the index of the first character after the removed part to keep in the string.\n *\n * [endIndex] is not included in the removed part.\n */\npublic fun CharSequence.removeRange(startIndex: Int, endIndex: Int): CharSequence {\n    if (endIndex < startIndex)\n        throw IndexOutOfBoundsException(\"End index ($endIndex) is less than start index ($startIndex).\")\n\n    if (endIndex == startIndex)\n        return this.subSequence(0, length)\n\n    val sb = StringBuilder(length - (endIndex - startIndex))\n    sb.append(this, 0, startIndex)\n    sb.append(this, endIndex, length)\n    return sb\n}\n\n/**\n * Removes the part of a string at a given range.\n * @param startIndex the index of the first character to be removed.\n * @param endIndex the index of the first character after the removed part to keep in the string.\n *\n *  [endIndex] is not included in the removed part.\n */\n@kotlin.internal.InlineOnly\npublic inline fun String.removeRange(startIndex: Int, endIndex: Int): String\n        = (this as CharSequence).removeRange(startIndex, endIndex).toString()\n\n/**\n * Returns a char sequence with content of this char sequence where its part at the given [range] is removed.\n *\n * The end index of the [range] is included in the removed part.\n */\npublic fun CharSequence.removeRange(range: IntRange): CharSequence = removeRange(range.start, range.endInclusive + 1)\n\n/**\n * Removes the part of a string at the given [range].\n *\n * The end index of the [range] is included in the removed part.\n */\n@kotlin.internal.InlineOnly\npublic inline fun String.removeRange(range: IntRange): String\n        = (this as CharSequence).removeRange(range).toString()\n\n/**\n * If this char sequence starts with the given [prefix], returns a new char sequence\n * with the prefix removed. Otherwise, returns a new char sequence with the same characters.\n */\npublic fun CharSequence.removePrefix(prefix: CharSequence): CharSequence {\n    if (startsWith(prefix)) {\n        return subSequence(prefix.length, length)\n    }\n    return subSequence(0, length)\n}\n\n/**\n * If this string starts with the given [prefix], returns a copy of this string\n * with the prefix removed. Otherwise, returns this string.\n */\npublic fun String.removePrefix(prefix: CharSequence): String {\n    if (startsWith(prefix)) {\n        return substring(prefix.length)\n    }\n    return this\n}\n\n/**\n * If this char sequence ends with the given [suffix], returns a new char sequence\n * with the suffix removed. Otherwise, returns a new char sequence with the same characters.\n */\npublic fun CharSequence.removeSuffix(suffix: CharSequence): CharSequence {\n    if (endsWith(suffix)) {\n        return subSequence(0, length - suffix.length)\n    }\n    return subSequence(0, length)\n}\n\n/**\n * If this string ends with the given [suffix], returns a copy of this string\n * with the suffix removed. Otherwise, returns this string.\n */\npublic fun String.removeSuffix(suffix: CharSequence): String {\n    if (endsWith(suffix)) {\n        return substring(0, length - suffix.length)\n    }\n    return this\n}\n\n/**\n * When this char sequence starts with the given [prefix] and ends with the given [suffix],\n * returns a new char sequence having both the given [prefix] and [suffix] removed.\n * Otherwise returns a new char sequence with the same characters.\n */\npublic fun CharSequence.removeSurrounding(prefix: CharSequence, suffix: CharSequence): CharSequence {\n    if ((length >= prefix.length + suffix.length) && startsWith(prefix) && endsWith(suffix)) {\n        return subSequence(prefix.length, length - suffix.length)\n    }\n    return subSequence(0, length)\n}\n\n/**\n * Removes from a string both the given [prefix] and [suffix] if and only if\n * it starts with the [prefix] and ends with the [suffix].\n * Otherwise returns this string unchanged.\n */\npublic fun String.removeSurrounding(prefix: CharSequence, suffix: CharSequence): String {\n    if ((length >= prefix.length + suffix.length) && startsWith(prefix) && endsWith(suffix)) {\n        return substring(prefix.length, length - suffix.length)\n    }\n    return this\n}\n\n/**\n * When this char sequence starts with and ends with the given [delimiter],\n * returns a new char sequence having this [delimiter] removed both from the start and end.\n * Otherwise returns a new char sequence with the same characters.\n */\npublic fun CharSequence.removeSurrounding(delimiter: CharSequence): CharSequence = removeSurrounding(delimiter, delimiter)\n\n/**\n * Removes the given [delimiter] string from both the start and the end of this string\n * if and only if it starts with and ends with the [delimiter].\n * Otherwise returns this string unchanged.\n */\npublic fun String.removeSurrounding(delimiter: CharSequence): String = removeSurrounding(delimiter, delimiter)\n\n/**\n * Replace part of string before the first occurrence of given delimiter with the [replacement] string.\n * If the string does not contain the delimiter, returns [missingDelimiterValue] which defaults to the original string.\n */\npublic fun String.replaceBefore(delimiter: Char, replacement: String, missingDelimiterValue: String = this): String {\n    val index = indexOf(delimiter)\n    return if (index == -1) missingDelimiterValue else replaceRange(0, index, replacement)\n}\n\n/**\n * Replace part of string before the first occurrence of given delimiter with the [replacement] string.\n * If the string does not contain the delimiter, returns [missingDelimiterValue] which defaults to the original string.\n */\npublic fun String.replaceBefore(delimiter: String, replacement: String, missingDelimiterValue: String = this): String {\n    val index = indexOf(delimiter)\n    return if (index == -1) missingDelimiterValue else replaceRange(0, index, replacement)\n}\n\n/**\n * Replace part of string after the first occurrence of given delimiter with the [replacement] string.\n * If the string does not contain the delimiter, returns [missingDelimiterValue] which defaults to the original string.\n */\npublic fun String.replaceAfter(delimiter: Char, replacement: String, missingDelimiterValue: String = this): String {\n    val index = indexOf(delimiter)\n    return if (index == -1) missingDelimiterValue else replaceRange(index + 1, length, replacement)\n}\n\n/**\n * Replace part of string after the first occurrence of given delimiter with the [replacement] string.\n * If the string does not contain the delimiter, returns [missingDelimiterValue] which defaults to the original string.\n */\npublic fun String.replaceAfter(delimiter: String, replacement: String, missingDelimiterValue: String = this): String {\n    val index = indexOf(delimiter)\n    return if (index == -1) missingDelimiterValue else replaceRange(index + delimiter.length, length, replacement)\n}\n\n/**\n * Replace part of string after the last occurrence of given delimiter with the [replacement] string.\n * If the string does not contain the delimiter, returns [missingDelimiterValue] which defaults to the original string.\n */\npublic fun String.replaceAfterLast(delimiter: String, replacement: String, missingDelimiterValue: String = this): String {\n    val index = lastIndexOf(delimiter)\n    return if (index == -1) missingDelimiterValue else replaceRange(index + delimiter.length, length, replacement)\n}\n\n/**\n * Replace part of string after the last occurrence of given delimiter with the [replacement] string.\n * If the string does not contain the delimiter, returns [missingDelimiterValue] which defaults to the original string.\n */\npublic fun String.replaceAfterLast(delimiter: Char, replacement: String, missingDelimiterValue: String = this): String {\n    val index = lastIndexOf(delimiter)\n    return if (index == -1) missingDelimiterValue else replaceRange(index + 1, length, replacement)\n}\n\n/**\n * Replace part of string before the last occurrence of given delimiter with the [replacement] string.\n * If the string does not contain the delimiter, returns [missingDelimiterValue] which defaults to the original string.\n */\npublic fun String.replaceBeforeLast(delimiter: Char, replacement: String, missingDelimiterValue: String = this): String {\n    val index = lastIndexOf(delimiter)\n    return if (index == -1) missingDelimiterValue else replaceRange(0, index, replacement)\n}\n\n/**\n * Replace part of string before the last occurrence of given delimiter with the [replacement] string.\n * If the string does not contain the delimiter, returns [missingDelimiterValue] which defaults to the original string.\n */\npublic fun String.replaceBeforeLast(delimiter: String, replacement: String, missingDelimiterValue: String = this): String {\n    val index = lastIndexOf(delimiter)\n    return if (index == -1) missingDelimiterValue else replaceRange(0, index, replacement)\n}\n\n\n// public fun String.replace(oldChar: Char, newChar: Char, ignoreCase: Boolean): String // JVM- and JS-specific\n// public fun String.replace(oldValue: String, newValue: String, ignoreCase: Boolean): String // JVM- and JS-specific\n\n/**\n * Returns a new string obtained by replacing each substring of this char sequence that matches the given regular expression\n * with the given [replacement].\n *\n * The [replacement] can consist of any combination of literal text and $-substitutions. To treat the replacement string\n * literally escape it with the [kotlin.text.Regex.Companion.escapeReplacement] method.\n */\n@kotlin.internal.InlineOnly\npublic inline fun CharSequence.replace(regex: Regex, replacement: String): String = regex.replace(this, replacement)\n\n/**\n * Returns a new string obtained by replacing each substring of this char sequence that matches the given regular expression\n * with the result of the given function [transform] that takes [MatchResult] and returns a string to be used as a\n * replacement for that match.\n */\n@kotlin.internal.InlineOnly\npublic inline fun CharSequence.replace(regex: Regex, noinline transform: (MatchResult) -> CharSequence): String = regex.replace(this, transform)\n\n/**\n * Replaces the first occurrence of the given regular expression [regex] in this char sequence with specified [replacement] expression.\n *\n * @param replacement A replacement expression that can include substitutions. See [Regex.replaceFirst] for details.\n */\n@kotlin.internal.InlineOnly\npublic inline fun CharSequence.replaceFirst(regex: Regex, replacement: String): String = regex.replaceFirst(this, replacement)\n\n\n/**\n * Returns `true` if this char sequence matches the given regular expression.\n */\n@kotlin.internal.InlineOnly\npublic inline infix fun CharSequence.matches(regex: Regex): Boolean = regex.matches(this)\n\n/**\n * Implementation of [regionMatches] for CharSequences.\n * Invoked when it's already known that arguments are not Strings, so that no additional type checks are performed.\n */\ninternal fun CharSequence.regionMatchesImpl(thisOffset: Int, other: CharSequence, otherOffset: Int, length: Int, ignoreCase: Boolean): Boolean {\n    if ((otherOffset < 0) || (thisOffset < 0) || (thisOffset > this.length - length)\n            || (otherOffset > other.length - length)) {\n        return false\n    }\n\n    for (index in 0 until length) {\n        if (!this[thisOffset + index].equals(other[otherOffset + index], ignoreCase))\n            return false\n    }\n    return true\n}\n\n/**\n * Returns `true` if this char sequence starts with the specified character.\n */\npublic fun CharSequence.startsWith(char: Char, ignoreCase: Boolean = false): Boolean =\n        this.length > 0 && this[0].equals(char, ignoreCase)\n\n/**\n * Returns `true` if this char sequence ends with the specified character.\n */\npublic fun CharSequence.endsWith(char: Char, ignoreCase: Boolean = false): Boolean =\n        this.length > 0 && this[lastIndex].equals(char, ignoreCase)\n\n/**\n * Returns `true` if this char sequence starts with the specified prefix.\n */\npublic fun CharSequence.startsWith(prefix: CharSequence, ignoreCase: Boolean = false): Boolean {\n    if (!ignoreCase && this is String && prefix is String)\n        return this.startsWith(prefix)\n    else\n        return regionMatchesImpl(0, prefix, 0, prefix.length, ignoreCase)\n}\n\n/**\n * Returns `true` if a substring of this char sequence starting at the specified offset [startIndex] starts with the specified prefix.\n */\npublic fun CharSequence.startsWith(prefix: CharSequence, startIndex: Int, ignoreCase: Boolean = false): Boolean {\n    if (!ignoreCase && this is String && prefix is String)\n        return this.startsWith(prefix, startIndex)\n    else\n        return regionMatchesImpl(startIndex, prefix, 0, prefix.length, ignoreCase)\n}\n\n/**\n * Returns `true` if this char sequence ends with the specified suffix.\n */\npublic fun CharSequence.endsWith(suffix: CharSequence, ignoreCase: Boolean = false): Boolean {\n    if (!ignoreCase && this is String && suffix is String)\n        return this.endsWith(suffix)\n    else\n        return regionMatchesImpl(length - suffix.length, suffix, 0, suffix.length, ignoreCase)\n}\n\n\n// common prefix and suffix\n\n/**\n * Returns the longest string `prefix` such that this char sequence and [other] char sequence both start with this prefix,\n * taking care not to split surrogate pairs.\n * If this and [other] have no common prefix, returns the empty string.\n\n * @param ignoreCase `true` to ignore character case when matching a character. By default `false`.\n */\npublic fun CharSequence.commonPrefixWith(other: CharSequence, ignoreCase: Boolean = false): String {\n    val shortestLength = minOf(this.length, other.length)\n\n    var i = 0\n    while (i < shortestLength && this[i].equals(other[i], ignoreCase = ignoreCase)) {\n        i++\n    }\n    if (this.hasSurrogatePairAt(i - 1) || other.hasSurrogatePairAt(i - 1)) {\n        i--\n    }\n    return subSequence(0, i).toString()\n}\n\n/**\n * Returns the longest string `suffix` such that this char sequence and [other] char sequence both end with this suffix,\n * taking care not to split surrogate pairs.\n * If this and [other] have no common suffix, returns the empty string.\n\n * @param ignoreCase `true` to ignore character case when matching a character. By default `false`.\n */\npublic fun CharSequence.commonSuffixWith(other: CharSequence, ignoreCase: Boolean = false): String {\n    val thisLength = this.length\n    val otherLength = other.length\n    val shortestLength = minOf(thisLength, otherLength)\n\n    var i = 0\n    while (i < shortestLength && this[thisLength - i - 1].equals(other[otherLength - i - 1], ignoreCase = ignoreCase)) {\n        i++\n    }\n    if (this.hasSurrogatePairAt(thisLength - i - 1) || other.hasSurrogatePairAt(otherLength - i - 1)) {\n        i--\n    }\n    return subSequence(thisLength - i, thisLength).toString()\n}\n\n\n// indexOfAny()\n\n/**\n * Finds the index of the first occurrence of any of the specified [chars] in this char sequence,\n * starting from the specified [startIndex] and optionally ignoring the case.\n *\n * @param ignoreCase `true` to ignore character case when matching a character. By default `false`.\n * @returns An index of the first occurrence of matched character from [chars] or -1 if none of [chars] are found.\n *\n */\npublic fun CharSequence.indexOfAny(chars: CharArray, startIndex: Int = 0, ignoreCase: Boolean = false): Int {\n    if (!ignoreCase && chars.size == 1 && this is String) {\n        val char = chars.single()\n        return nativeIndexOf(char, startIndex)\n    }\n\n    for (index in startIndex.coerceAtLeast(0)..lastIndex) {\n        val charAtIndex = get(index)\n        if (chars.any { it.equals(charAtIndex, ignoreCase) })\n            return index\n    }\n    return -1\n}\n\n/**\n * Finds the index of the last occurrence of any of the specified [chars] in this char sequence,\n * starting from the specified [startIndex] and optionally ignoring the case.\n *\n * @param startIndex The index of character to start searching at. The search proceeds backward toward the beginning of the string.\n * @param ignoreCase `true` to ignore character case when matching a character. By default `false`.\n * @returns An index of the last occurrence of matched character from [chars] or -1 if none of [chars] are found.\n *\n */\npublic fun CharSequence.lastIndexOfAny(chars: CharArray, startIndex: Int = lastIndex, ignoreCase: Boolean = false): Int {\n    if (!ignoreCase && chars.size == 1 && this is String) {\n        val char = chars.single()\n        return nativeLastIndexOf(char, startIndex)\n    }\n\n\n    for (index in startIndex.coerceAtMost(lastIndex) downTo 0) {\n        val charAtIndex = get(index)\n        if (chars.any { it.equals(charAtIndex, ignoreCase) })\n            return index\n    }\n\n    return -1\n}\n\n\nprivate fun CharSequence.indexOf(other: CharSequence, startIndex: Int, endIndex: Int, ignoreCase: Boolean, last: Boolean = false): Int {\n    val indices = if (!last)\n        startIndex.coerceAtLeast(0)..endIndex.coerceAtMost(length)\n    else\n        startIndex.coerceAtMost(lastIndex) downTo endIndex.coerceAtLeast(0)\n\n    if (this is String && other is String) { // smart cast\n        for (index in indices) {\n            if (other.regionMatches(0, this, index, other.length, ignoreCase))\n                return index\n        }\n    } else {\n        for (index in indices) {\n            if (other.regionMatchesImpl(0, this, index, other.length, ignoreCase))\n                return index\n        }\n    }\n    return -1\n}\n\nprivate fun CharSequence.findAnyOf(strings: Collection<String>, startIndex: Int, ignoreCase: Boolean, last: Boolean): Pair<Int, String>? {\n    if (!ignoreCase && strings.size == 1) {\n        val string = strings.single()\n        val index = if (!last) indexOf(string, startIndex) else lastIndexOf(string, startIndex)\n        return if (index < 0) null else index to string\n    }\n\n    val indices = if (!last) startIndex.coerceAtLeast(0)..length else startIndex.coerceAtMost(lastIndex) downTo 0\n\n    if (this is String) {\n        for (index in indices) {\n            val matchingString = strings.firstOrNull { it.regionMatches(0, this, index, it.length, ignoreCase) }\n            if (matchingString != null)\n                return index to matchingString\n        }\n    } else {\n        for (index in indices) {\n            val matchingString = strings.firstOrNull { it.regionMatchesImpl(0, this, index, it.length, ignoreCase) }\n            if (matchingString != null)\n                return index to matchingString\n        }\n    }\n\n    return null\n}\n\n/**\n * Finds the first occurrence of any of the specified [strings] in this char sequence,\n * starting from the specified [startIndex] and optionally ignoring the case.\n *\n * @param ignoreCase `true` to ignore character case when matching a string. By default `false`.\n * @returns A pair of an index of the first occurrence of matched string from [strings] and the string matched\n * or `null` if none of [strings] are found.\n *\n * To avoid ambiguous results when strings in [strings] have characters in common, this method proceeds from\n * the beginning to the end of this string, and finds at each position the first element in [strings]\n * that matches this string at that position.\n */\npublic fun CharSequence.findAnyOf(strings: Collection<String>, startIndex: Int = 0, ignoreCase: Boolean = false): Pair<Int, String>? =\n    findAnyOf(strings, startIndex, ignoreCase, last = false)\n\n/**\n * Finds the last occurrence of any of the specified [strings] in this char sequence,\n * starting from the specified [startIndex] and optionally ignoring the case.\n *\n * @param startIndex The index of character to start searching at. The search proceeds backward toward the beginning of the string.\n * @param ignoreCase `true` to ignore character case when matching a string. By default `false`.\n * @returns A pair of an index of the last occurrence of matched string from [strings] and the string matched or `null` if none of [strings] are found.\n *\n * To avoid ambiguous results when strings in [strings] have characters in common, this method proceeds from\n * the end toward the beginning of this string, and finds at each position the first element in [strings]\n * that matches this string at that position.\n */\npublic fun CharSequence.findLastAnyOf(strings: Collection<String>, startIndex: Int = lastIndex, ignoreCase: Boolean = false): Pair<Int, String>? =\n    findAnyOf(strings, startIndex, ignoreCase, last = true)\n\n/**\n * Finds the index of the first occurrence of any of the specified [strings] in this char sequence,\n * starting from the specified [startIndex] and optionally ignoring the case.\n *\n * @param ignoreCase `true` to ignore character case when matching a string. By default `false`.\n * @returns An index of the first occurrence of matched string from [strings] or -1 if none of [strings] are found.\n *\n * To avoid ambiguous results when strings in [strings] have characters in common, this method proceeds from\n * the beginning to the end of this string, and finds at each position the first element in [strings]\n * that matches this string at that position.\n */\npublic fun CharSequence.indexOfAny(strings: Collection<String>, startIndex: Int = 0, ignoreCase: Boolean = false): Int =\n    findAnyOf(strings, startIndex, ignoreCase, last = false)?.first ?: -1\n\n/**\n * Finds the index of the last occurrence of any of the specified [strings] in this char sequence,\n * starting from the specified [startIndex] and optionally ignoring the case.\n *\n * @param startIndex The index of character to start searching at. The search proceeds backward toward the beginning of the string.\n * @param ignoreCase `true` to ignore character case when matching a string. By default `false`.\n * @returns An index of the last occurrence of matched string from [strings] or -1 if none of [strings] are found.\n *\n * To avoid ambiguous results when strings in [strings] have characters in common, this method proceeds from\n * the end toward the beginning of this string, and finds at each position the first element in [strings]\n * that matches this string at that position.\n */\npublic fun CharSequence.lastIndexOfAny(strings: Collection<String>, startIndex: Int = lastIndex, ignoreCase: Boolean = false): Int =\n    findAnyOf(strings, startIndex, ignoreCase, last = true)?.first ?: -1\n\n\n// indexOf\n\n/**\n * Returns the index within this string of the first occurrence of the specified character, starting from the specified [startIndex].\n *\n * @param ignoreCase `true` to ignore character case when matching a character. By default `false`.\n * @returns An index of the first occurrence of [char] or -1 if none is found.\n */\npublic fun CharSequence.indexOf(char: Char, startIndex: Int = 0, ignoreCase: Boolean = false): Int {\n    return if (ignoreCase || this !is String)\n        indexOfAny(charArrayOf(char), startIndex, ignoreCase)\n    else\n        nativeIndexOf(char, startIndex)\n}\n\n/**\n * Returns the index within this char sequence of the first occurrence of the specified [string],\n * starting from the specified [startIndex].\n *\n * @param ignoreCase `true` to ignore character case when matching a string. By default `false`.\n * @returns An index of the first occurrence of [string] or `-1` if none is found.\n */\npublic fun CharSequence.indexOf(string: String, startIndex: Int = 0, ignoreCase: Boolean = false): Int {\n    return if (ignoreCase || this !is String)\n        indexOf(string, startIndex, length, ignoreCase)\n    else\n        nativeIndexOf(string, startIndex)\n}\n\n/**\n * Returns the index within this char sequence of the last occurrence of the specified character,\n * starting from the specified [startIndex].\n *\n * @param startIndex The index of character to start searching at. The search proceeds backward toward the beginning of the string.\n * @param ignoreCase `true` to ignore character case when matching a character. By default `false`.\n * @returns An index of the first occurrence of [char] or -1 if none is found.\n */\npublic fun CharSequence.lastIndexOf(char: Char, startIndex: Int = lastIndex, ignoreCase: Boolean = false): Int {\n    return if (ignoreCase || this !is String)\n        lastIndexOfAny(charArrayOf(char), startIndex, ignoreCase)\n    else\n        nativeLastIndexOf(char, startIndex)\n}\n\n/**\n * Returns the index within this char sequence of the last occurrence of the specified [string],\n * starting from the specified [startIndex].\n *\n * @param startIndex The index of character to start searching at. The search proceeds backward toward the beginning of the string.\n * @param ignoreCase `true` to ignore character case when matching a string. By default `false`.\n * @returns An index of the first occurrence of [string] or -1 if none is found.\n */\npublic fun CharSequence.lastIndexOf(string: String, startIndex: Int = lastIndex, ignoreCase: Boolean = false): Int {\n    return if (ignoreCase || this !is String)\n        indexOf(string, startIndex, 0, ignoreCase, last = true)\n    else\n        nativeLastIndexOf(string, startIndex)\n}\n\n/**\n * Returns `true` if this char sequence contains the specified [other] sequence of characters as a substring.\n *\n * @param ignoreCase `true` to ignore character case when comparing strings. By default `false`.\n */\n@Suppress(\"INAPPLICABLE_OPERATOR_MODIFIER\")\npublic operator fun CharSequence.contains(other: CharSequence, ignoreCase: Boolean = false): Boolean =\n    if (other is String)\n        indexOf(other, ignoreCase = ignoreCase) >= 0\n    else\n        indexOf(other, 0, length, ignoreCase) >= 0\n\n\n\n/**\n * Returns `true` if this char sequence contains the specified character [char].\n *\n * @param ignoreCase `true` to ignore character case when comparing characters. By default `false`.\n */\n@Suppress(\"INAPPLICABLE_OPERATOR_MODIFIER\")\npublic operator fun CharSequence.contains(char: Char, ignoreCase: Boolean = false): Boolean =\n        indexOf(char, ignoreCase = ignoreCase) >= 0\n\n/**\n * Returns `true` if this char sequence contains at least one match of the specified regular expression [regex].\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun CharSequence.contains(regex: Regex): Boolean = regex.containsMatchIn(this)\n\n\n// rangesDelimitedBy\n\n\nprivate class DelimitedRangesSequence(private val input: CharSequence, private val startIndex: Int, private val limit: Int, private val getNextMatch: CharSequence.(Int) -> Pair<Int, Int>?): Sequence<IntRange> {\n\n    override fun iterator(): Iterator<IntRange> = object : Iterator<IntRange> {\n        var nextState: Int = -1 // -1 for unknown, 0 for done, 1 for continue\n        var currentStartIndex: Int = startIndex.coerceIn(0, input.length)\n        var nextSearchIndex: Int = currentStartIndex\n        var nextItem: IntRange? = null\n        var counter: Int = 0\n\n        private fun calcNext() {\n            if (nextSearchIndex < 0) {\n                nextState = 0\n                nextItem = null\n            }\n            else {\n                if (limit > 0 && ++counter >= limit || nextSearchIndex > input.length) {\n                    nextItem = currentStartIndex..input.lastIndex\n                    nextSearchIndex = -1\n                }\n                else {\n                    val match = input.getNextMatch(nextSearchIndex)\n                    if (match == null) {\n                        nextItem = currentStartIndex..input.lastIndex\n                        nextSearchIndex = -1\n                    }\n                    else {\n                        val (index,length) = match\n                        nextItem = currentStartIndex until index\n                        currentStartIndex = index + length\n                        nextSearchIndex = currentStartIndex + if (length == 0) 1 else 0\n                    }\n                }\n                nextState = 1\n            }\n        }\n\n        override fun next(): IntRange {\n            if (nextState == -1)\n                calcNext()\n            if (nextState == 0)\n                throw NoSuchElementException()\n            val result = nextItem as IntRange\n            // Clean next to avoid keeping reference on yielded instance\n            nextItem = null\n            nextState = -1\n            return result\n        }\n\n        override fun hasNext(): Boolean {\n            if (nextState == -1)\n                calcNext()\n            return nextState == 1\n        }\n    }\n}\n\n/**\n * Returns a sequence of index ranges of substrings in this char sequence around occurrences of the specified [delimiters].\n *\n * @param delimiters One or more characters to be used as delimiters.\n * @param startIndex The index to start searching delimiters from.\n *  No range having its start value less than [startIndex] is returned.\n *  [startIndex] is coerced to be non-negative and not greater than length of this string.\n * @param ignoreCase `true` to ignore character case when matching a delimiter. By default `false`.\n * @param limit The maximum number of substrings to return. Zero by default means no limit is set.\n */\nprivate fun CharSequence.rangesDelimitedBy(delimiters: CharArray, startIndex: Int = 0, ignoreCase: Boolean = false, limit: Int = 0): Sequence<IntRange> {\n    require(limit >= 0, { \"Limit must be non-negative, but was $limit.\" })\n\n    return DelimitedRangesSequence(this, startIndex, limit, { startIndex ->\n        indexOfAny(delimiters, startIndex, ignoreCase = ignoreCase).let { if (it < 0) null else it to 1 } })\n}\n\n\n/**\n * Returns a sequence of index ranges of substrings in this char sequence around occurrences of the specified [delimiters].\n *\n * @param delimiters One or more strings to be used as delimiters.\n * @param startIndex The index to start searching delimiters from.\n *  No range having its start value less than [startIndex] is returned.\n *  [startIndex] is coerced to be non-negative and not greater than length of this string.\n * @param ignoreCase `true` to ignore character case when matching a delimiter. By default `false`.\n * @param limit The maximum number of substrings to return. Zero by default means no limit is set.\n *\n * To avoid ambiguous results when strings in [delimiters] have characters in common, this method proceeds from\n * the beginning to the end of this string, and finds at each position the first element in [delimiters]\n * that matches this string at that position.\n */\nprivate fun CharSequence.rangesDelimitedBy(delimiters: Array<out String>, startIndex: Int = 0, ignoreCase: Boolean = false, limit: Int = 0): Sequence<IntRange> {\n    require(limit >= 0, { \"Limit must be non-negative, but was $limit.\" } )\n    val delimitersList = delimiters.asList()\n\n    return DelimitedRangesSequence(this, startIndex, limit, { startIndex -> findAnyOf(delimitersList, startIndex, ignoreCase = ignoreCase, last = false)?.let { it.first to it.second.length } })\n\n}\n\n\n// split\n\n/**\n * Splits this char sequence to a sequence of strings around occurrences of the specified [delimiters].\n *\n * @param delimiters One or more strings to be used as delimiters.\n * @param ignoreCase `true` to ignore character case when matching a delimiter. By default `false`.\n * @param limit The maximum number of substrings to return. Zero by default means no limit is set.\n *\n * To avoid ambiguous results when strings in [delimiters] have characters in common, this method proceeds from\n * the beginning to the end of this string, and finds at each position the first element in [delimiters]\n * that matches this string at that position.\n */\npublic fun CharSequence.splitToSequence(vararg delimiters: String, ignoreCase: Boolean = false, limit: Int = 0): Sequence<String> =\n        rangesDelimitedBy(delimiters, ignoreCase = ignoreCase, limit = limit).map { substring(it) }\n\n/**\n * Splits this char sequence to a list of strings around occurrences of the specified [delimiters].\n *\n * @param delimiters One or more strings to be used as delimiters.\n * @param ignoreCase `true` to ignore character case when matching a delimiter. By default `false`.\n * @param limit The maximum number of substrings to return. Zero by default means no limit is set.\n *\n * To avoid ambiguous results when strings in [delimiters] have characters in common, this method proceeds from\n * the beginning to the end of this string, and matches at each position the first element in [delimiters]\n * that is equal to a delimiter in this instance at that position.\n */\npublic fun CharSequence.split(vararg delimiters: String, ignoreCase: Boolean = false, limit: Int = 0): List<String> {\n    if (delimiters.size == 1) {\n        val delimiter = delimiters[0]\n        if (!delimiter.isEmpty()) {\n            return split(delimiter, ignoreCase, limit)\n        }\n    }\n\n    return rangesDelimitedBy(delimiters, ignoreCase = ignoreCase, limit = limit).asIterable().map { substring(it) }\n}\n\n/**\n * Splits this char sequence to a sequence of strings around occurrences of the specified [delimiters].\n *\n * @param delimiters One or more characters to be used as delimiters.\n * @param ignoreCase `true` to ignore character case when matching a delimiter. By default `false`.\n * @param limit The maximum number of substrings to return.\n */\npublic fun CharSequence.splitToSequence(vararg delimiters: Char, ignoreCase: Boolean = false, limit: Int = 0): Sequence<String> =\n        rangesDelimitedBy(delimiters, ignoreCase = ignoreCase, limit = limit).map { substring(it) }\n\n/**\n * Splits this char sequence to a list of strings around occurrences of the specified [delimiters].\n *\n * @param delimiters One or more characters to be used as delimiters.\n * @param ignoreCase `true` to ignore character case when matching a delimiter. By default `false`.\n * @param limit The maximum number of substrings to return.\n */\npublic fun CharSequence.split(vararg delimiters: Char, ignoreCase: Boolean = false, limit: Int = 0): List<String> {\n    if (delimiters.size == 1) {\n        return split(delimiters[0].toString(), ignoreCase, limit)\n    }\n\n    return rangesDelimitedBy(delimiters, ignoreCase = ignoreCase, limit = limit).asIterable().map { substring(it) }\n}\n\n/**\n * Splits this char sequence to a list of strings around occurrences of the specified [delimiter].\n * This is specialized version of split which receives single non-empty delimiter and offers better performance\n *\n * @param delimiter String used as delimiter\n * @param ignoreCase `true` to ignore character case when matching a delimiter. By default `false`.\n * @param limit The maximum number of substrings to return.\n */\nprivate fun CharSequence.split(delimiter: String, ignoreCase: Boolean, limit: Int): List<String> {\n    require(limit >= 0, { \"Limit must be non-negative, but was $limit.\" })\n\n    var currentOffset = 0\n    var nextIndex = indexOf(delimiter, currentOffset, ignoreCase)\n    if (nextIndex == -1 || limit == 1) {\n        return listOf(this.toString())\n    }\n\n    val isLimited = limit > 0\n    val result = ArrayList<String>(if (isLimited) limit.coerceAtMost(10) else 10)\n    do {\n        result.add(substring(currentOffset, nextIndex))\n        currentOffset = nextIndex + delimiter.length\n        // Do not search for next occurrence if we're reaching limit\n        if (isLimited && result.size == limit - 1) break\n        nextIndex = indexOf(delimiter, currentOffset, ignoreCase)\n    } while (nextIndex != -1)\n\n    result.add(substring(currentOffset, length))\n    return result\n}\n\n/**\n * Splits this char sequence around matches of the given regular expression.\n *\n * @param limit Non-negative value specifying the maximum number of substrings to return.\n * Zero by default means no limit is set.\n */\n@kotlin.internal.InlineOnly\npublic inline fun CharSequence.split(regex: Regex, limit: Int = 0): List<String> = regex.split(this, limit)\n\n/**\n * Splits this char sequence to a sequence of lines delimited by any of the following character sequences: CRLF, LF or CR.\n */\npublic fun CharSequence.lineSequence(): Sequence<String> = splitToSequence(\"\\r\\n\", \"\\n\", \"\\r\")\n\n/**\n * * Splits this char sequence to a list of lines delimited by any of the following character sequences: CRLF, LF or CR.\n */\npublic fun CharSequence.lines(): List<String> = lineSequence().toList()\n","/*\n * Copyright 2010-2016 JetBrains s.r.o.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage kotlin.text\n\n/**\n * Represents a collection of captured groups in a single match of a regular expression.\n *\n * This collection has size of `groupCount + 1` where `groupCount` is the count of groups in the regular expression.\n * Groups are indexed from 1 to `groupCount` and group with the index 0 corresponds to the entire match.\n *\n * An element of the collection at the particular index can be `null`,\n * if the corresponding group in the regular expression is optional and\n * there was no match captured by that group.\n */\npublic interface MatchGroupCollection : Collection<MatchGroup?> {\n\n    /** Returns a group with the specified [index].\n     *\n     * @return An instance of [MatchGroup] if the group with the specified [index] was matched or `null` otherwise.\n     *\n     * Groups are indexed from 1 to the count of groups in the regular expression. A group with the index 0\n     * corresponds to the entire match.\n     */\n    public operator fun get(index: Int): MatchGroup?\n}\n\n/**\n * Extends [MatchGroupCollection] by introducing a way to get matched groups by name, when regex supports it.\n */\n@SinceKotlin(\"1.1\")\npublic interface MatchNamedGroupCollection : MatchGroupCollection {\n    /**\n     * Returns a named group with the specified [name].\n     * @return An instance of [MatchGroup] if the group with the specified [name] was matched or `null` otherwise.\n     */\n    public operator fun get(name: String): MatchGroup?\n}\n\n/**\n * Represents the results from a single regular expression match.\n */\npublic interface MatchResult {\n    /** The range of indices in the original string where match was captured. */\n    public val range: IntRange\n    /** The substring from the input string captured by this match. */\n    public val value: String\n    /**\n     * A collection of groups matched by the regular expression.\n     *\n     * This collection has size of `groupCount + 1` where `groupCount` is the count of groups in the regular expression.\n     * Groups are indexed from 1 to `groupCount` and group with the index 0 corresponds to the entire match.\n     */\n    public val groups: MatchGroupCollection\n    /**\n     * A list of matched indexed group values.\n     *\n     * This list has size of `groupCount + 1` where `groupCount` is the count of groups in the regular expression.\n     * Groups are indexed from 1 to `groupCount` and group with the index 0 corresponds to the entire match.\n     *\n     * If the group in the regular expression is optional and there were no match captured by that group,\n     * corresponding item in [groupValues] is an empty string.\n     *\n     * @sample: samples.text.Regexps.matchDestructuringToGroupValues\n     */\n    public val groupValues: List<String>\n\n    /**\n     * An instance of [MatchResult.Destructured] wrapper providing components for destructuring assignment of group values.\n     *\n     * component1 corresponds to the value of the first group, component2 \u2014 of the second, and so on.\n     *\n     * @sample: samples.text.Regexps.matchDestructuring\n     */\n    public val destructured: Destructured get() = Destructured(this)\n\n    /** Returns a new [MatchResult] with the results for the next match, starting at the position\n     *  at which the last match ended (at the character after the last matched character).\n     */\n    public fun next(): MatchResult?\n\n    /**\n     * Provides components for destructuring assignment of group values.\n     *\n     * [component1] corresponds to the value of the first group, [component2] \u2014 of the second, and so on.\n     *\n     * If the group in the regular expression is optional and there were no match captured by that group,\n     * corresponding component value is an empty string.\n     *\n     * @sample: samples.text.Regexps.matchDestructuringToGroupValues\n     */\n    public class Destructured internal constructor(public val match: MatchResult) {\n        @kotlin.internal.InlineOnly\n        public operator inline fun component1():  String = match.groupValues[1]\n        @kotlin.internal.InlineOnly\n        public operator inline fun component2():  String = match.groupValues[2]\n        @kotlin.internal.InlineOnly\n        public operator inline fun component3():  String = match.groupValues[3]\n        @kotlin.internal.InlineOnly\n        public operator inline fun component4():  String = match.groupValues[4]\n        @kotlin.internal.InlineOnly\n        public operator inline fun component5():  String = match.groupValues[5]\n        @kotlin.internal.InlineOnly\n        public operator inline fun component6():  String = match.groupValues[6]\n        @kotlin.internal.InlineOnly\n        public operator inline fun component7():  String = match.groupValues[7]\n        @kotlin.internal.InlineOnly\n        public operator inline fun component8():  String = match.groupValues[8]\n        @kotlin.internal.InlineOnly\n        public operator inline fun component9():  String = match.groupValues[9]\n        @kotlin.internal.InlineOnly\n        public operator inline fun component10(): String = match.groupValues[10]\n        /**\n         *  Returns destructured group values as a list of strings.\n         *  First value in the returned list corresponds to the value of the first group, and so on.\n         *\n         * @sample: samples.text.Regexps.matchDestructuringToGroupValues\n         */\n        public fun toList(): List<String> = match.groupValues.subList(1, match.groupValues.size)\n    }\n}","@file:kotlin.jvm.JvmMultifileClass\n@file:kotlin.jvm.JvmName(\"StringsKt\")\n\npackage kotlin.text\n\n/**\n * Builds new string by populating newly created [StringBuilder] using provided [builderAction]\n * and then converting it to [String].\n */\n@kotlin.internal.InlineOnly\npublic inline fun buildString(builderAction: StringBuilder.() -> Unit): String =\n        StringBuilder().apply(builderAction).toString()\n\n/**\n * Builds new string by populating newly created [StringBuilder] initialized with the given [capacity]\n * using provided [builderAction] and then converting it to [String].\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic inline fun buildString(capacity: Int, builderAction: StringBuilder.() -> Unit): String =\n        StringBuilder(capacity).apply(builderAction).toString()\n\n/**\n * Appends all arguments to the given [Appendable].\n */\npublic fun <T : Appendable> T.append(vararg value: CharSequence?): T {\n    for (item in value)\n        append(item)\n    return this\n}\n\n/**\n * Appends all arguments to the given StringBuilder.\n */\npublic fun StringBuilder.append(vararg value: String?): StringBuilder {\n    for (item in value)\n        append(item)\n    return this\n}\n\n/**\n * Appends all arguments to the given StringBuilder.\n */\npublic fun StringBuilder.append(vararg value: Any?): StringBuilder {\n    for (item in value)\n        append(item)\n    return this\n}\n\n/* Not available on platform: JS */\n\n\n\n\n\n\n\ninternal fun <T> Appendable.appendElement(element: T, transform: ((T) -> CharSequence)?) {\n    when {\n        transform != null -> append(transform(element))\n        element is CharSequence? -> append(element)\n        element is Char -> append(element)\n        else -> append(element.toString())\n    }\n}\n","package kotlin.text\n\nimport kotlin.js.RegExp\n\n@kotlin.internal.InlineOnly\npublic inline fun String.toUpperCase(): String = asDynamic().toUpperCase()\n\n@kotlin.internal.InlineOnly\npublic inline fun String.toLowerCase(): String = asDynamic().toLowerCase()\n\n@kotlin.internal.InlineOnly\ninternal inline fun String.nativeIndexOf(str: String, fromIndex: Int): Int = asDynamic().indexOf(str, fromIndex)\n\n@kotlin.internal.InlineOnly\ninternal inline fun String.nativeLastIndexOf(str: String, fromIndex: Int): Int = asDynamic().lastIndexOf(str, fromIndex)\n\n@kotlin.internal.InlineOnly\ninternal inline fun String.nativeStartsWith(s: String, position: Int): Boolean = asDynamic().startsWith(s, position)\n\n@kotlin.internal.InlineOnly\ninternal inline fun String.nativeEndsWith(s: String): Boolean = asDynamic().endsWith(s)\n\n@kotlin.internal.InlineOnly\npublic inline fun String.substring(startIndex: Int): String = asDynamic().substring(startIndex)\n\n@kotlin.internal.InlineOnly\npublic inline fun String.substring(startIndex: Int, endIndex: Int): String = asDynamic().substring(startIndex, endIndex)\n\n@kotlin.internal.InlineOnly\npublic inline fun String.concat(str: String): String = asDynamic().concat(str)\n\n@kotlin.internal.InlineOnly\npublic inline fun String.match(regex: String): Array<String>? = asDynamic().match(regex)\n\n//native public fun String.trim(): String\n//TODO: String.replace to implement effective trimLeading and trimTrailing\n\n@Deprecated(\"Use length property instead.\", ReplaceWith(\"length\"), level = DeprecationLevel.ERROR)\n@kotlin.internal.InlineOnly\npublic inline val CharSequence.size: Int get() = length\n\n@kotlin.internal.InlineOnly\ninternal inline fun String.nativeReplace(pattern: RegExp, replacement: String): String = asDynamic().replace(pattern, replacement)\n","@file:kotlin.jvm.JvmMultifileClass\n@file:kotlin.jvm.JvmName(\"StringsKt\")\n\npackage kotlin.text\n\n//\n// NOTE THIS FILE IS AUTO-GENERATED by the GenerateStandardLib.kt\n// See: https://github.com/JetBrains/kotlin/tree/master/libraries/stdlib\n//\n\nimport kotlin.js.*\nimport kotlin.comparisons.*\n\n/**\n * Returns a character at the given [index] or throws an [IndexOutOfBoundsException] if the [index] is out of bounds of this char sequence.\n */\n@kotlin.internal.InlineOnly\npublic inline fun CharSequence.elementAt(index: Int): Char {\n    return get(index)\n}\n\n/**\n * Returns a character at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this char sequence.\n */\n@kotlin.internal.InlineOnly\npublic inline fun CharSequence.elementAtOrElse(index: Int, defaultValue: (Int) -> Char): Char {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns a character at the given [index] or `null` if the [index] is out of bounds of this char sequence.\n */\n@kotlin.internal.InlineOnly\npublic inline fun CharSequence.elementAtOrNull(index: Int): Char? {\n    return this.getOrNull(index)\n}\n\n/**\n * Returns the first character matching the given [predicate], or `null` if no such character was found.\n */\n@kotlin.internal.InlineOnly\npublic inline fun CharSequence.find(predicate: (Char) -> Boolean): Char? {\n    return firstOrNull(predicate)\n}\n\n/**\n * Returns the last character matching the given [predicate], or `null` if no such character was found.\n */\n@kotlin.internal.InlineOnly\npublic inline fun CharSequence.findLast(predicate: (Char) -> Boolean): Char? {\n    return lastOrNull(predicate)\n}\n\n/**\n * Returns first character.\n * @throws [NoSuchElementException] if the char sequence is empty.\n */\npublic fun CharSequence.first(): Char {\n    if (isEmpty())\n        throw NoSuchElementException(\"Char sequence is empty.\")\n    return this[0]\n}\n\n/**\n * Returns the first character matching the given [predicate].\n * @throws [NoSuchElementException] if no such character is found.\n */\npublic inline fun CharSequence.first(predicate: (Char) -> Boolean): Char {\n    for (element in this) if (predicate(element)) return element\n    throw NoSuchElementException(\"Char sequence contains no character matching the predicate.\")\n}\n\n/**\n * Returns the first character, or `null` if the char sequence is empty.\n */\npublic fun CharSequence.firstOrNull(): Char? {\n    return if (isEmpty()) null else this[0]\n}\n\n/**\n * Returns the first character matching the given [predicate], or `null` if character was not found.\n */\npublic inline fun CharSequence.firstOrNull(predicate: (Char) -> Boolean): Char? {\n    for (element in this) if (predicate(element)) return element\n    return null\n}\n\n/**\n * Returns a character at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this char sequence.\n */\n@kotlin.internal.InlineOnly\npublic inline fun CharSequence.getOrElse(index: Int, defaultValue: (Int) -> Char): Char {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns a character at the given [index] or `null` if the [index] is out of bounds of this char sequence.\n */\npublic fun CharSequence.getOrNull(index: Int): Char? {\n    return if (index >= 0 && index <= lastIndex) get(index) else null\n}\n\n/**\n * Returns index of the first character matching the given [predicate], or -1 if the char sequence does not contain such character.\n */\npublic inline fun CharSequence.indexOfFirst(predicate: (Char) -> Boolean): Int {\n    for (index in indices) {\n        if (predicate(this[index])) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns index of the last character matching the given [predicate], or -1 if the char sequence does not contain such character.\n */\npublic inline fun CharSequence.indexOfLast(predicate: (Char) -> Boolean): Int {\n    for (index in indices.reversed()) {\n        if (predicate(this[index])) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns the last character.\n * @throws [NoSuchElementException] if the char sequence is empty.\n */\npublic fun CharSequence.last(): Char {\n    if (isEmpty())\n        throw NoSuchElementException(\"Char sequence is empty.\")\n    return this[lastIndex]\n}\n\n/**\n * Returns the last character matching the given [predicate].\n * @throws [NoSuchElementException] if no such character is found.\n */\npublic inline fun CharSequence.last(predicate: (Char) -> Boolean): Char {\n    for (index in this.indices.reversed()) {\n        val element = this[index]\n        if (predicate(element)) return element\n    }\n    throw NoSuchElementException(\"Char sequence contains no character matching the predicate.\")\n}\n\n/**\n * Returns the last character, or `null` if the char sequence is empty.\n */\npublic fun CharSequence.lastOrNull(): Char? {\n    return if (isEmpty()) null else this[length - 1]\n}\n\n/**\n * Returns the last character matching the given [predicate], or `null` if no such character was found.\n */\npublic inline fun CharSequence.lastOrNull(predicate: (Char) -> Boolean): Char? {\n    for (index in this.indices.reversed()) {\n        val element = this[index]\n        if (predicate(element)) return element\n    }\n    return null\n}\n\n/**\n * Returns the single character, or throws an exception if the char sequence is empty or has more than one character.\n */\npublic fun CharSequence.single(): Char {\n    return when (length) {\n        0 -> throw NoSuchElementException(\"Char sequence is empty.\")\n        1 -> this[0]\n        else -> throw IllegalArgumentException(\"Char sequence has more than one element.\")\n    }\n}\n\n/**\n * Returns the single character matching the given [predicate], or throws exception if there is no or more than one matching character.\n */\npublic inline fun CharSequence.single(predicate: (Char) -> Boolean): Char {\n    var single: Char? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) throw IllegalArgumentException(\"Char sequence contains more than one matching element.\")\n            single = element\n            found = true\n        }\n    }\n    if (!found) throw NoSuchElementException(\"Char sequence contains no character matching the predicate.\")\n    @Suppress(\"UNCHECKED_CAST\")\n    return single as Char\n}\n\n/**\n * Returns single character, or `null` if the char sequence is empty or has more than one character.\n */\npublic fun CharSequence.singleOrNull(): Char? {\n    return if (length == 1) this[0] else null\n}\n\n/**\n * Returns the single character matching the given [predicate], or `null` if character was not found or more than one character was found.\n */\npublic inline fun CharSequence.singleOrNull(predicate: (Char) -> Boolean): Char? {\n    var single: Char? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) return null\n            single = element\n            found = true\n        }\n    }\n    if (!found) return null\n    return single\n}\n\n/**\n * Returns a subsequence of this char sequence with the first [n] characters removed.\n */\npublic fun CharSequence.drop(n: Int): CharSequence {\n    require(n >= 0) { \"Requested character count $n is less than zero.\" }\n    return subSequence(n.coerceAtMost(length), length)\n}\n\n/**\n * Returns a string with the first [n] characters removed.\n */\npublic fun String.drop(n: Int): String {\n    require(n >= 0) { \"Requested character count $n is less than zero.\" }\n    return substring(n.coerceAtMost(length))\n}\n\n/**\n * Returns a subsequence of this char sequence with the last [n] characters removed.\n */\npublic fun CharSequence.dropLast(n: Int): CharSequence {\n    require(n >= 0) { \"Requested character count $n is less than zero.\" }\n    return take((length - n).coerceAtLeast(0))\n}\n\n/**\n * Returns a string with the last [n] characters removed.\n */\npublic fun String.dropLast(n: Int): String {\n    require(n >= 0) { \"Requested character count $n is less than zero.\" }\n    return take((length - n).coerceAtLeast(0))\n}\n\n/**\n * Returns a subsequence of this char sequence containing all characters except last characters that satisfy the given [predicate].\n */\npublic inline fun CharSequence.dropLastWhile(predicate: (Char) -> Boolean): CharSequence {\n    for (index in lastIndex downTo 0)\n        if (!predicate(this[index]))\n            return subSequence(0, index + 1)\n    return \"\"\n}\n\n/**\n * Returns a string containing all characters except last characters that satisfy the given [predicate].\n */\npublic inline fun String.dropLastWhile(predicate: (Char) -> Boolean): String {\n    for (index in lastIndex downTo 0)\n        if (!predicate(this[index]))\n            return substring(0, index + 1)\n    return \"\"\n}\n\n/**\n * Returns a subsequence of this char sequence containing all characters except first characters that satisfy the given [predicate].\n */\npublic inline fun CharSequence.dropWhile(predicate: (Char) -> Boolean): CharSequence {\n    for (index in this.indices)\n        if (!predicate(this[index]))\n            return subSequence(index, length)\n    return \"\"\n}\n\n/**\n * Returns a string containing all characters except first characters that satisfy the given [predicate].\n */\npublic inline fun String.dropWhile(predicate: (Char) -> Boolean): String {\n    for (index in this.indices)\n        if (!predicate(this[index]))\n            return substring(index)\n    return \"\"\n}\n\n/**\n * Returns a char sequence containing only those characters from the original char sequence that match the given [predicate].\n */\npublic inline fun CharSequence.filter(predicate: (Char) -> Boolean): CharSequence {\n    return filterTo(StringBuilder(), predicate)\n}\n\n/**\n * Returns a string containing only those characters from the original string that match the given [predicate].\n */\npublic inline fun String.filter(predicate: (Char) -> Boolean): String {\n    return filterTo(StringBuilder(), predicate).toString()\n}\n\n/**\n * Returns a char sequence containing only those characters from the original char sequence that match the given [predicate].\n * @param [predicate] function that takes the index of a character and the character itself\n * and returns the result of predicate evaluation on the character.\n */\npublic inline fun CharSequence.filterIndexed(predicate: (index: Int, Char) -> Boolean): CharSequence {\n    return filterIndexedTo(StringBuilder(), predicate)\n}\n\n/**\n * Returns a string containing only those characters from the original string that match the given [predicate].\n * @param [predicate] function that takes the index of a character and the character itself\n * and returns the result of predicate evaluation on the character.\n */\npublic inline fun String.filterIndexed(predicate: (index: Int, Char) -> Boolean): String {\n    return filterIndexedTo(StringBuilder(), predicate).toString()\n}\n\n/**\n * Appends all characters matching the given [predicate] to the given [destination].\n * @param [predicate] function that takes the index of a character and the character itself\n * and returns the result of predicate evaluation on the character.\n */\npublic inline fun <C : Appendable> CharSequence.filterIndexedTo(destination: C, predicate: (index: Int, Char) -> Boolean): C {\n    forEachIndexed { index, element ->\n        if (predicate(index, element)) destination.append(element)\n    }\n    return destination\n}\n\n/**\n * Returns a char sequence containing only those characters from the original char sequence that do not match the given [predicate].\n */\npublic inline fun CharSequence.filterNot(predicate: (Char) -> Boolean): CharSequence {\n    return filterNotTo(StringBuilder(), predicate)\n}\n\n/**\n * Returns a string containing only those characters from the original string that do not match the given [predicate].\n */\npublic inline fun String.filterNot(predicate: (Char) -> Boolean): String {\n    return filterNotTo(StringBuilder(), predicate).toString()\n}\n\n/**\n * Appends all characters not matching the given [predicate] to the given [destination].\n */\npublic inline fun <C : Appendable> CharSequence.filterNotTo(destination: C, predicate: (Char) -> Boolean): C {\n    for (element in this) if (!predicate(element)) destination.append(element)\n    return destination\n}\n\n/**\n * Appends all characters matching the given [predicate] to the given [destination].\n */\npublic inline fun <C : Appendable> CharSequence.filterTo(destination: C, predicate: (Char) -> Boolean): C {\n    for (index in 0 until length) {\n        val element = get(index)\n        if (predicate(element)) destination.append(element)\n    }\n    return destination\n}\n\n/**\n * Returns a char sequence containing characters of the original char sequence at the specified range of [indices].\n */\npublic fun CharSequence.slice(indices: IntRange): CharSequence {\n    if (indices.isEmpty()) return \"\"\n    return subSequence(indices)\n}\n\n/**\n * Returns a string containing characters of the original string at the specified range of [indices].\n */\npublic fun String.slice(indices: IntRange): String {\n    if (indices.isEmpty()) return \"\"\n    return substring(indices)\n}\n\n/**\n * Returns a char sequence containing characters of the original char sequence at specified [indices].\n */\npublic fun CharSequence.slice(indices: Iterable<Int>): CharSequence {\n    val size = indices.collectionSizeOrDefault(10)\n    if (size == 0) return \"\"\n    val result = StringBuilder(size)\n    for (i in indices) {\n        result.append(get(i))\n    }\n    return result\n}\n\n/**\n * Returns a string containing characters of the original string at specified [indices].\n */\n@kotlin.internal.InlineOnly\npublic inline fun String.slice(indices: Iterable<Int>): String {\n    return (this as CharSequence).slice(indices).toString()\n}\n\n/**\n * Returns a subsequence of this char sequence containing the first [n] characters from this char sequence, or the entire char sequence if this char sequence is shorter.\n */\npublic fun CharSequence.take(n: Int): CharSequence {\n    require(n >= 0) { \"Requested character count $n is less than zero.\" }\n    return subSequence(0, n.coerceAtMost(length))\n}\n\n/**\n * Returns a string containing the first [n] characters from this string, or the entire string if this string is shorter.\n */\npublic fun String.take(n: Int): String {\n    require(n >= 0) { \"Requested character count $n is less than zero.\" }\n    return substring(0, n.coerceAtMost(length))\n}\n\n/**\n * Returns a subsequence of this char sequence containing the last [n] characters from this char sequence, or the entire char sequence if this char sequence is shorter.\n */\npublic fun CharSequence.takeLast(n: Int): CharSequence {\n    require(n >= 0) { \"Requested character count $n is less than zero.\" }\n    val length = length\n    return subSequence(length - n.coerceAtMost(length), length)\n}\n\n/**\n * Returns a string containing the last [n] characters from this string, or the entire string if this string is shorter.\n */\npublic fun String.takeLast(n: Int): String {\n    require(n >= 0) { \"Requested character count $n is less than zero.\" }\n    val length = length\n    return substring(length - n.coerceAtMost(length))\n}\n\n/**\n * Returns a subsequence of this char sequence containing last characters that satisfy the given [predicate].\n */\npublic inline fun CharSequence.takeLastWhile(predicate: (Char) -> Boolean): CharSequence {\n    for (index in lastIndex downTo 0) {\n        if (!predicate(this[index])) {\n            return subSequence(index + 1, length)\n        }\n    }\n    return subSequence(0, length)\n}\n\n/**\n * Returns a string containing last characters that satisfy the given [predicate].\n */\npublic inline fun String.takeLastWhile(predicate: (Char) -> Boolean): String {\n    for (index in lastIndex downTo 0) {\n        if (!predicate(this[index])) {\n            return substring(index + 1)\n        }\n    }\n    return this\n}\n\n/**\n * Returns a subsequence of this char sequence containing the first characters that satisfy the given [predicate].\n */\npublic inline fun CharSequence.takeWhile(predicate: (Char) -> Boolean): CharSequence {\n    for (index in 0 until length)\n        if (!predicate(get(index))) {\n            return subSequence(0, index)\n        }\n    return subSequence(0, length)\n}\n\n/**\n * Returns a string containing the first characters that satisfy the given [predicate].\n */\npublic inline fun String.takeWhile(predicate: (Char) -> Boolean): String {\n    for (index in 0 until length)\n        if (!predicate(get(index))) {\n            return substring(0, index)\n        }\n    return this\n}\n\n/**\n * Returns a char sequence with characters in reversed order.\n */\npublic fun CharSequence.reversed(): CharSequence {\n    return StringBuilder(this).reverse()\n}\n\n/**\n * Returns a string with characters in reversed order.\n */\n@kotlin.internal.InlineOnly\npublic inline fun String.reversed(): String {\n    return (this as CharSequence).reversed().toString()\n}\n\n/**\n * Returns a [Map] containing key-value pairs provided by [transform] function\n * applied to characters of the given char sequence.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original char sequence.\n */\npublic inline fun <K, V> CharSequence.associate(transform: (Char) -> Pair<K, V>): Map<K, V> {\n    val capacity = mapCapacity(length).coerceAtLeast(16)\n    return associateTo(LinkedHashMap<K, V>(capacity), transform)\n}\n\n/**\n * Returns a [Map] containing the characters from the given char sequence indexed by the key\n * returned from [keySelector] function applied to each character.\n * \n * If any two characters would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original char sequence.\n */\npublic inline fun <K> CharSequence.associateBy(keySelector: (Char) -> K): Map<K, Char> {\n    val capacity = mapCapacity(length).coerceAtLeast(16)\n    return associateByTo(LinkedHashMap<K, Char>(capacity), keySelector)\n}\n\n/**\n * Returns a [Map] containing the values provided by [valueTransform] and indexed by [keySelector] functions applied to characters of the given char sequence.\n * \n * If any two characters would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original char sequence.\n */\npublic inline fun <K, V> CharSequence.associateBy(keySelector: (Char) -> K, valueTransform: (Char) -> V): Map<K, V> {\n    val capacity = mapCapacity(length).coerceAtLeast(16)\n    return associateByTo(LinkedHashMap<K, V>(capacity), keySelector, valueTransform)\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function applied to each character of the given char sequence\n * and value is the character itself.\n * \n * If any two characters would have the same key returned by [keySelector] the last one gets added to the map.\n */\npublic inline fun <K, M : MutableMap<in K, in Char>> CharSequence.associateByTo(destination: M, keySelector: (Char) -> K): M {\n    for (element in this) {\n        destination.put(keySelector(element), element)\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function and\n * and value is provided by the [valueTransform] function applied to characters of the given char sequence.\n * \n * If any two characters would have the same key returned by [keySelector] the last one gets added to the map.\n */\npublic inline fun <K, V, M : MutableMap<in K, in V>> CharSequence.associateByTo(destination: M, keySelector: (Char) -> K, valueTransform: (Char) -> V): M {\n    for (element in this) {\n        destination.put(keySelector(element), valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs\n * provided by [transform] function applied to each character of the given char sequence.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n */\npublic inline fun <K, V, M : MutableMap<in K, in V>> CharSequence.associateTo(destination: M, transform: (Char) -> Pair<K, V>): M {\n    for (element in this) {\n        destination += transform(element)\n    }\n    return destination\n}\n\n/**\n * Appends all characters to the given [destination] collection.\n */\npublic fun <C : MutableCollection<in Char>> CharSequence.toCollection(destination: C): C {\n    for (item in this) {\n        destination.add(item)\n    }\n    return destination\n}\n\n/**\n * Returns a [HashSet] of all characters.\n */\npublic fun CharSequence.toHashSet(): HashSet<Char> {\n    return toCollection(HashSet<Char>(mapCapacity(length)))\n}\n\n/**\n * Returns a [List] containing all characters.\n */\npublic fun CharSequence.toList(): List<Char> {\n    return when (length) {\n        0 -> emptyList()\n        1 -> listOf(this[0])\n        else -> this.toMutableList()\n    }\n}\n\n/**\n * Returns a [MutableList] filled with all characters of this char sequence.\n */\npublic fun CharSequence.toMutableList(): MutableList<Char> {\n    return toCollection(ArrayList<Char>(length))\n}\n\n/**\n * Returns a [Set] of all characters.\n * \n * The returned set preserves the element iteration order of the original char sequence.\n */\npublic fun CharSequence.toSet(): Set<Char> {\n    return when (length) {\n        0 -> emptySet()\n        1 -> setOf(this[0])\n        else -> toCollection(LinkedHashSet<Char>(mapCapacity(length)))\n    }\n}\n\n/**\n * Returns a single list of all elements yielded from results of [transform] function being invoked on each character of original char sequence.\n */\npublic inline fun <R> CharSequence.flatMap(transform: (Char) -> Iterable<R>): List<R> {\n    return flatMapTo(ArrayList<R>(), transform)\n}\n\n/**\n * Appends all elements yielded from results of [transform] function being invoked on each character of original char sequence, to the given [destination].\n */\npublic inline fun <R, C : MutableCollection<in R>> CharSequence.flatMapTo(destination: C, transform: (Char) -> Iterable<R>): C {\n    for (element in this) {\n        val list = transform(element)\n        destination.addAll(list)\n    }\n    return destination\n}\n\n/**\n * Groups characters of the original char sequence by the key returned by the given [keySelector] function\n * applied to each character and returns a map where each group key is associated with a list of corresponding characters.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original char sequence.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\npublic inline fun <K> CharSequence.groupBy(keySelector: (Char) -> K): Map<K, List<Char>> {\n    return groupByTo(LinkedHashMap<K, MutableList<Char>>(), keySelector)\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each character of the original char sequence\n * by the key returned by the given [keySelector] function applied to the character\n * and returns a map where each group key is associated with a list of corresponding values.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original char sequence.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\npublic inline fun <K, V> CharSequence.groupBy(keySelector: (Char) -> K, valueTransform: (Char) -> V): Map<K, List<V>> {\n    return groupByTo(LinkedHashMap<K, MutableList<V>>(), keySelector, valueTransform)\n}\n\n/**\n * Groups characters of the original char sequence by the key returned by the given [keySelector] function\n * applied to each character and puts to the [destination] map each group key associated with a list of corresponding characters.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\npublic inline fun <K, M : MutableMap<in K, MutableList<Char>>> CharSequence.groupByTo(destination: M, keySelector: (Char) -> K): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<Char>() }\n        list.add(element)\n    }\n    return destination\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each character of the original char sequence\n * by the key returned by the given [keySelector] function applied to the character\n * and puts to the [destination] map each group key associated with a list of corresponding values.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\npublic inline fun <K, V, M : MutableMap<in K, MutableList<V>>> CharSequence.groupByTo(destination: M, keySelector: (Char) -> K, valueTransform: (Char) -> V): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<V>() }\n        list.add(valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Creates a [Grouping] source from a char sequence to be used later with one of group-and-fold operations\n * using the specified [keySelector] function to extract a key from each character.\n * \n * @sample samples.collections.Collections.Transformations.groupingByEachCount\n */\n@SinceKotlin(\"1.1\")\npublic inline fun <K> CharSequence.groupingBy(crossinline keySelector: (Char) -> K): Grouping<Char, K> {\n    return object : Grouping<Char, K> {\n        override fun sourceIterator(): Iterator<Char> = this@groupingBy.iterator()\n        override fun keyOf(element: Char): K = keySelector(element)\n    }\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each character in the original char sequence.\n */\npublic inline fun <R> CharSequence.map(transform: (Char) -> R): List<R> {\n    return mapTo(ArrayList<R>(length), transform)\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each character and its index in the original char sequence.\n * @param [transform] function that takes the index of a character and the character itself\n * and returns the result of the transform applied to the character.\n */\npublic inline fun <R> CharSequence.mapIndexed(transform: (index: Int, Char) -> R): List<R> {\n    return mapIndexedTo(ArrayList<R>(length), transform)\n}\n\n/**\n * Returns a list containing only the non-null results of applying the given [transform] function\n * to each character and its index in the original char sequence.\n * @param [transform] function that takes the index of a character and the character itself\n * and returns the result of the transform applied to the character.\n */\npublic inline fun <R : Any> CharSequence.mapIndexedNotNull(transform: (index: Int, Char) -> R?): List<R> {\n    return mapIndexedNotNullTo(ArrayList<R>(), transform)\n}\n\n/**\n * Applies the given [transform] function to each character and its index in the original char sequence\n * and appends only the non-null results to the given [destination].\n * @param [transform] function that takes the index of a character and the character itself\n * and returns the result of the transform applied to the character.\n */\npublic inline fun <R : Any, C : MutableCollection<in R>> CharSequence.mapIndexedNotNullTo(destination: C, transform: (index: Int, Char) -> R?): C {\n    forEachIndexed { index, element -> transform(index, element)?.let { destination.add(it) } }\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each character and its index in the original char sequence\n * and appends the results to the given [destination].\n * @param [transform] function that takes the index of a character and the character itself\n * and returns the result of the transform applied to the character.\n */\npublic inline fun <R, C : MutableCollection<in R>> CharSequence.mapIndexedTo(destination: C, transform: (index: Int, Char) -> R): C {\n    var index = 0\n    for (item in this)\n        destination.add(transform(index++, item))\n    return destination\n}\n\n/**\n * Returns a list containing only the non-null results of applying the given [transform] function\n * to each character in the original char sequence.\n */\npublic inline fun <R : Any> CharSequence.mapNotNull(transform: (Char) -> R?): List<R> {\n    return mapNotNullTo(ArrayList<R>(), transform)\n}\n\n/**\n * Applies the given [transform] function to each character in the original char sequence\n * and appends only the non-null results to the given [destination].\n */\npublic inline fun <R : Any, C : MutableCollection<in R>> CharSequence.mapNotNullTo(destination: C, transform: (Char) -> R?): C {\n    forEach { element -> transform(element)?.let { destination.add(it) } }\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each character of the original char sequence\n * and appends the results to the given [destination].\n */\npublic inline fun <R, C : MutableCollection<in R>> CharSequence.mapTo(destination: C, transform: (Char) -> R): C {\n    for (item in this)\n        destination.add(transform(item))\n    return destination\n}\n\n/**\n * Returns a lazy [Iterable] of [IndexedValue] for each character of the original char sequence.\n */\npublic fun CharSequence.withIndex(): Iterable<IndexedValue<Char>> {\n    return IndexingIterable { iterator() }\n}\n\n/**\n * Returns `true` if all characters match the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.all\n */\npublic inline fun CharSequence.all(predicate: (Char) -> Boolean): Boolean {\n    for (element in this) if (!predicate(element)) return false\n    return true\n}\n\n/**\n * Returns `true` if char sequence has at least one character.\n * \n * @sample samples.collections.Collections.Aggregates.any\n */\npublic fun CharSequence.any(): Boolean {\n    return !isEmpty()\n}\n\n/**\n * Returns `true` if at least one character matches the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.anyWithPredicate\n */\npublic inline fun CharSequence.any(predicate: (Char) -> Boolean): Boolean {\n    for (element in this) if (predicate(element)) return true\n    return false\n}\n\n/**\n * Returns the length of this char sequence.\n */\n@kotlin.internal.InlineOnly\npublic inline fun CharSequence.count(): Int {\n    return length\n}\n\n/**\n * Returns the number of characters matching the given [predicate].\n */\npublic inline fun CharSequence.count(predicate: (Char) -> Boolean): Int {\n    var count = 0\n    for (element in this) if (predicate(element)) count++\n    return count\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right to current accumulator value and each character.\n */\npublic inline fun <R> CharSequence.fold(initial: R, operation: (acc: R, Char) -> R): R {\n    var accumulator = initial\n    for (element in this) accumulator = operation(accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right\n * to current accumulator value and each character with its index in the original char sequence.\n * @param [operation] function that takes the index of a character, current accumulator value\n * and the character itself, and calculates the next accumulator value.\n */\npublic inline fun <R> CharSequence.foldIndexed(initial: R, operation: (index: Int, acc: R, Char) -> R): R {\n    var index = 0\n    var accumulator = initial\n    for (element in this) accumulator = operation(index++, accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left to each character and current accumulator value.\n */\npublic inline fun <R> CharSequence.foldRight(initial: R, operation: (Char, acc: R) -> R): R {\n    var index = lastIndex\n    var accumulator = initial\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left\n * to each character with its index in the original char sequence and current accumulator value.\n * @param [operation] function that takes the index of a character, the character itself\n * and current accumulator value, and calculates the next accumulator value.\n */\npublic inline fun <R> CharSequence.foldRightIndexed(initial: R, operation: (index: Int, Char, acc: R) -> R): R {\n    var index = lastIndex\n    var accumulator = initial\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Performs the given [action] on each character.\n */\npublic inline fun CharSequence.forEach(action: (Char) -> Unit): Unit {\n    for (element in this) action(element)\n}\n\n/**\n * Performs the given [action] on each character, providing sequential index with the character.\n * @param [action] function that takes the index of a character and the character itself\n * and performs the desired action on the character.\n */\npublic inline fun CharSequence.forEachIndexed(action: (index: Int, Char) -> Unit): Unit {\n    var index = 0\n    for (item in this) action(index++, item)\n}\n\n/**\n * Returns the largest character or `null` if there are no characters.\n */\npublic fun CharSequence.max(): Char? {\n    if (isEmpty()) return null\n    var max = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (max < e) max = e\n    }\n    return max\n}\n\n/**\n * Returns the first character yielding the largest value of the given function or `null` if there are no characters.\n */\npublic inline fun <R : Comparable<R>> CharSequence.maxBy(selector: (Char) -> R): Char? {\n    if (isEmpty()) return null\n    var maxElem = this[0]\n    var maxValue = selector(maxElem)\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        val v = selector(e)\n        if (maxValue < v) {\n            maxElem = e\n            maxValue = v\n        }\n    }\n    return maxElem\n}\n\n/**\n * Returns the first character having the largest value according to the provided [comparator] or `null` if there are no characters.\n */\npublic fun CharSequence.maxWith(comparator: Comparator<in Char>): Char? {\n    if (isEmpty()) return null\n    var max = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (comparator.compare(max, e) < 0) max = e\n    }\n    return max\n}\n\n/**\n * Returns the smallest character or `null` if there are no characters.\n */\npublic fun CharSequence.min(): Char? {\n    if (isEmpty()) return null\n    var min = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (min > e) min = e\n    }\n    return min\n}\n\n/**\n * Returns the first character yielding the smallest value of the given function or `null` if there are no characters.\n */\npublic inline fun <R : Comparable<R>> CharSequence.minBy(selector: (Char) -> R): Char? {\n    if (isEmpty()) return null\n    var minElem = this[0]\n    var minValue = selector(minElem)\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        val v = selector(e)\n        if (minValue > v) {\n            minElem = e\n            minValue = v\n        }\n    }\n    return minElem\n}\n\n/**\n * Returns the first character having the smallest value according to the provided [comparator] or `null` if there are no characters.\n */\npublic fun CharSequence.minWith(comparator: Comparator<in Char>): Char? {\n    if (isEmpty()) return null\n    var min = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (comparator.compare(min, e) > 0) min = e\n    }\n    return min\n}\n\n/**\n * Returns `true` if the char sequence has no characters.\n * \n * @sample samples.collections.Collections.Aggregates.none\n */\npublic fun CharSequence.none(): Boolean {\n    return isEmpty()\n}\n\n/**\n * Returns `true` if no characters match the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.noneWithPredicate\n */\npublic inline fun CharSequence.none(predicate: (Char) -> Boolean): Boolean {\n    for (element in this) if (predicate(element)) return false\n    return true\n}\n\n/**\n * Performs the given [action] on each character and returns the char sequence itself afterwards.\n */\n@SinceKotlin(\"1.1\")\npublic inline fun <S : CharSequence> S.onEach(action: (Char) -> Unit): S {\n    return apply { for (element in this) action(element) }\n}\n\n/**\n * Accumulates value starting with the first character and applying [operation] from left to right to current accumulator value and each character.\n */\npublic inline fun CharSequence.reduce(operation: (acc: Char, Char) -> Char): Char {\n    if (isEmpty())\n        throw UnsupportedOperationException(\"Empty char sequence can't be reduced.\")\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first character and applying [operation] from left to right\n * to current accumulator value and each character with its index in the original char sequence.\n * @param [operation] function that takes the index of a character, current accumulator value\n * and the character itself and calculates the next accumulator value.\n */\npublic inline fun CharSequence.reduceIndexed(operation: (index: Int, acc: Char, Char) -> Char): Char {\n    if (isEmpty())\n        throw UnsupportedOperationException(\"Empty char sequence can't be reduced.\")\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(index, accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with last character and applying [operation] from right to left to each character and current accumulator value.\n */\npublic inline fun CharSequence.reduceRight(operation: (Char, acc: Char) -> Char): Char {\n    var index = lastIndex\n    if (index < 0) throw UnsupportedOperationException(\"Empty char sequence can't be reduced.\")\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with last character and applying [operation] from right to left\n * to each character with its index in the original char sequence and current accumulator value.\n * @param [operation] function that takes the index of a character, the character itself\n * and current accumulator value, and calculates the next accumulator value.\n */\npublic inline fun CharSequence.reduceRightIndexed(operation: (index: Int, Char, acc: Char) -> Char): Char {\n    var index = lastIndex\n    if (index < 0) throw UnsupportedOperationException(\"Empty char sequence can't be reduced.\")\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each character in the char sequence.\n */\npublic inline fun CharSequence.sumBy(selector: (Char) -> Int): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each character in the char sequence.\n */\npublic inline fun CharSequence.sumByDouble(selector: (Char) -> Double): Double {\n    var sum: Double = 0.0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Splits this char sequence into a list of strings each not exceeding the given [size].\n * \n * The last string in the resulting list may have less characters than the given [size].\n * \n * @param size the number of elements to take in each string, must be positive and can be greater than the number of elements in this char sequence.\n * \n * @sample samples.collections.Collections.Transformations.chunked\n */\n@SinceKotlin(\"1.2\")\npublic fun CharSequence.chunked(size: Int): List<String> {\n    return windowed(size, size, partialWindows = true)\n}\n\n/**\n * Splits this char sequence into several char sequences each not exceeding the given [size]\n * and applies the given [transform] function to an each.\n * \n * @return list of results of the [transform] applied to an each char sequence.\n * \n * Note that the char sequence passed to the [transform] function is ephemeral and is valid only inside that function.\n * You should not store it or allow it to escape in some way, unless you made a snapshot of it.\n * The last char sequence may have less characters than the given [size].\n * \n * @param size the number of elements to take in each char sequence, must be positive and can be greater than the number of elements in this char sequence.\n * \n * @sample samples.text.Strings.chunkedTransform\n */\n@SinceKotlin(\"1.2\")\npublic fun <R> CharSequence.chunked(size: Int, transform: (CharSequence) -> R): List<R> {\n    return windowed(size, size, partialWindows = true, transform = transform)\n}\n\n/**\n * Splits this char sequence into a sequence of strings each not exceeding the given [size].\n * \n * The last string in the resulting sequence may have less characters than the given [size].\n * \n * @param size the number of elements to take in each string, must be positive and can be greater than the number of elements in this char sequence.\n * \n * @sample samples.collections.Collections.Transformations.chunked\n */\n@SinceKotlin(\"1.2\")\npublic fun CharSequence.chunkedSequence(size: Int): Sequence<String> {\n    return chunkedSequence(size) { it.toString() }\n}\n\n/**\n * Splits this char sequence into several char sequences each not exceeding the given [size]\n * and applies the given [transform] function to an each.\n * \n * @return sequence of results of the [transform] applied to an each char sequence.\n * \n * Note that the char sequence passed to the [transform] function is ephemeral and is valid only inside that function.\n * You should not store it or allow it to escape in some way, unless you made a snapshot of it.\n * The last char sequence may have less characters than the given [size].\n * \n * @param size the number of elements to take in each char sequence, must be positive and can be greater than the number of elements in this char sequence.\n * \n * @sample samples.text.Strings.chunkedTransformToSequence\n */\n@SinceKotlin(\"1.2\")\npublic fun <R> CharSequence.chunkedSequence(size: Int, transform: (CharSequence) -> R): Sequence<R> {\n    return windowedSequence(size, size, partialWindows = true, transform = transform)\n}\n\n/**\n * Splits the original char sequence into pair of char sequences,\n * where *first* char sequence contains characters for which [predicate] yielded `true`,\n * while *second* char sequence contains characters for which [predicate] yielded `false`.\n */\npublic inline fun CharSequence.partition(predicate: (Char) -> Boolean): Pair<CharSequence, CharSequence> {\n    val first = StringBuilder()\n    val second = StringBuilder()\n    for (element in this) {\n        if (predicate(element)) {\n            first.append(element)\n        } else {\n            second.append(element)\n        }\n    }\n    return Pair(first, second)\n}\n\n/**\n * Splits the original string into pair of strings,\n * where *first* string contains characters for which [predicate] yielded `true`,\n * while *second* string contains characters for which [predicate] yielded `false`.\n */\npublic inline fun String.partition(predicate: (Char) -> Boolean): Pair<String, String> {\n    val first = StringBuilder()\n    val second = StringBuilder()\n    for (element in this) {\n        if (predicate(element)) {\n            first.append(element)\n        } else {\n            second.append(element)\n        }\n    }\n    return Pair(first.toString(), second.toString())\n}\n\n/**\n * Returns a list of snapshots of the window of the given [size]\n * sliding along this char sequence with the given [step], where each\n * snapshot is a string.\n * \n * Several last strings may have less characters than the given [size].\n * \n * Both [size] and [step] must be positive and can be greater than the number of elements in this char sequence.\n * @param size the number of elements to take in each window\n * @param step the number of elements to move the window forward by on an each step, by default 1\n * @param partialWindows controls whether or not to keep partial windows in the end if any,\n * by default `false` which means partial windows won't be preserved\n * \n * @sample samples.collections.Sequences.Transformations.takeWindows\n */\n@SinceKotlin(\"1.2\")\npublic fun CharSequence.windowed(size: Int, step: Int = 1, partialWindows: Boolean = false): List<String> {\n    return windowed(size, step, partialWindows) { it.toString() }\n}\n\n/**\n * Returns a list of results of applying the given [transform] function to\n * an each char sequence representing a view over the window of the given [size]\n * sliding along this char sequence with the given [step].\n * \n * Note that the char sequence passed to the [transform] function is ephemeral and is valid only inside that function.\n * You should not store it or allow it to escape in some way, unless you made a snapshot of it.\n * Several last char sequences may have less characters than the given [size].\n * \n * Both [size] and [step] must be positive and can be greater than the number of elements in this char sequence.\n * @param size the number of elements to take in each window\n * @param step the number of elements to move the window forward by on an each step, by default 1\n * @param partialWindows controls whether or not to keep partial windows in the end if any,\n * by default `false` which means partial windows won't be preserved\n * \n * @sample samples.collections.Sequences.Transformations.averageWindows\n */\n@SinceKotlin(\"1.2\")\npublic fun <R> CharSequence.windowed(size: Int, step: Int = 1, partialWindows: Boolean = false, transform: (CharSequence) -> R): List<R> {\n    checkWindowSizeStep(size, step)\n    val thisSize = this.length\n    val result = ArrayList<R>((thisSize + step - 1) / step)\n    var index = 0\n    while (index < thisSize) {\n        val end = index + size\n        val coercedEnd = if (end > thisSize) { if (partialWindows) thisSize else break } else end\n        result.add(transform(subSequence(index, coercedEnd)))\n        index += step\n    }\n    return result\n}\n\n/**\n * Returns a sequence of snapshots of the window of the given [size]\n * sliding along this char sequence with the given [step], where each\n * snapshot is a string.\n * \n * Several last strings may have less characters than the given [size].\n * \n * Both [size] and [step] must be positive and can be greater than the number of elements in this char sequence.\n * @param size the number of elements to take in each window\n * @param step the number of elements to move the window forward by on an each step, by default 1\n * @param partialWindows controls whether or not to keep partial windows in the end if any,\n * by default `false` which means partial windows won't be preserved\n * \n * @sample samples.collections.Sequences.Transformations.takeWindows\n */\n@SinceKotlin(\"1.2\")\npublic fun CharSequence.windowedSequence(size: Int, step: Int = 1, partialWindows: Boolean = false): Sequence<String> {\n    return windowedSequence(size, step, partialWindows) { it.toString() }\n}\n\n/**\n * Returns a sequence of results of applying the given [transform] function to\n * an each char sequence representing a view over the window of the given [size]\n * sliding along this char sequence with the given [step].\n * \n * Note that the char sequence passed to the [transform] function is ephemeral and is valid only inside that function.\n * You should not store it or allow it to escape in some way, unless you made a snapshot of it.\n * Several last char sequences may have less characters than the given [size].\n * \n * Both [size] and [step] must be positive and can be greater than the number of elements in this char sequence.\n * @param size the number of elements to take in each window\n * @param step the number of elements to move the window forward by on an each step, by default 1\n * @param partialWindows controls whether or not to keep partial windows in the end if any,\n * by default `false` which means partial windows won't be preserved\n * \n * @sample samples.collections.Sequences.Transformations.averageWindows\n */\n@SinceKotlin(\"1.2\")\npublic fun <R> CharSequence.windowedSequence(size: Int, step: Int = 1, partialWindows: Boolean = false, transform: (CharSequence) -> R): Sequence<R> {\n    checkWindowSizeStep(size, step)\n    val windows = (if (partialWindows) indices else 0 until length - size + 1) step step\n    return windows.asSequence().map { index -> transform(subSequence(index, (index + size).coerceAtMost(length))) }\n}\n\n/**\n * Returns a list of pairs built from characters of both char sequences with same indexes. List has length of shortest char sequence.\n */\npublic infix fun CharSequence.zip(other: CharSequence): List<Pair<Char, Char>> {\n    return zip(other) { c1, c2 -> c1 to c2 }\n}\n\n/**\n * Returns a list of values built from characters of both char sequences with same indexes using provided [transform]. List has length of shortest char sequence.\n */\npublic inline fun <V> CharSequence.zip(other: CharSequence, transform: (a: Char, b: Char) -> V): List<V> {\n    val length = minOf(this.length, other.length)\n    val list = ArrayList<V>(length)\n    for (i in 0 until length) {\n        list.add(transform(this[i], other[i]))\n    }\n    return list\n}\n\n/**\n * Returns a list of pairs of each two adjacent characters in this char sequence.\n * \n * The returned list is empty if this char sequence contains less than two characters.\n * \n * @sample samples.collections.Collections.Transformations.zipWithNext\n */\n@SinceKotlin(\"1.2\")\npublic fun CharSequence.zipWithNext(): List<Pair<Char, Char>> {\n    return zipWithNext { a, b -> a to b }\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to an each pair of two adjacent characters in this char sequence.\n * \n * The returned list is empty if this char sequence contains less than two characters.\n * \n * @sample samples.collections.Collections.Transformations.zipWithNextToFindDeltas\n */\n@SinceKotlin(\"1.2\")\npublic inline fun <R> CharSequence.zipWithNext(transform: (a: Char, b: Char) -> R): List<R> {\n    val size = length - 1\n    if (size < 1) return emptyList()\n    val result = ArrayList<R>(size)\n    for (index in 0 until size) {\n        result.add(transform(this[index], this[index + 1]))\n    }\n    return result\n}\n\n/**\n * Creates an [Iterable] instance that wraps the original char sequence returning its characters when being iterated.\n */\npublic fun CharSequence.asIterable(): Iterable<Char> {\n    if (this is String && isEmpty()) return emptyList()\n    return Iterable { this.iterator() }\n}\n\n/**\n * Creates a [Sequence] instance that wraps the original char sequence returning its characters when being iterated.\n */\npublic fun CharSequence.asSequence(): Sequence<Char> {\n    if (this is String && isEmpty()) return emptySequence()\n    return Sequence { this.iterator() }\n}\n\n",null,null,"/*\n * Copyright 2010-2017 JetBrains s.r.o.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n@file:Suppress(\"DEPRECATION\")\npackage kotlin.math\n\n\nimport kotlin.internal.InlineOnly\nimport kotlin.js.Math as nativeMath\n\n// constants, can't use them from nativeMath as they are not constants there\n\n/** Ratio of the circumference of a circle to its diameter, approximately 3.14159. */\n@SinceKotlin(\"1.2\")\npublic const val PI: Double = 3.141592653589793\n/** Base of the natural logarithms, approximately 2.71828. */\n@SinceKotlin(\"1.2\")\npublic const val E: Double = 2.718281828459045\n\n// ================ Double Math ========================================\n\n/** Computes the sine of the angle [x] given in radians.\n *\n *  Special cases:\n *   - `sin(NaN|+Inf|-Inf)` is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic inline fun sin(x: Double): Double = nativeMath.sin(x)\n\n/** Computes the cosine of the angle [x] given in radians.\n *\n *  Special cases:\n *   - `cos(NaN|+Inf|-Inf)` is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic inline fun cos(x: Double): Double = nativeMath.cos(x)\n\n/** Computes the tangent of the angle [x] given in radians.\n *\n *  Special cases:\n *   - `tan(NaN|+Inf|-Inf)` is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic inline fun tan(x: Double): Double = nativeMath.tan(x)\n\n/**\n * Computes the arc sine of the value [x];\n * the returned value is an angle in the range from `-PI/2` to `PI/2` radians.\n *\n * Special cases:\n *    - `asin(x)` is `NaN`, when `abs(x) > 1` or x is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic inline fun asin(x: Double): Double = nativeMath.asin(x)\n\n/**\n * Computes the arc cosine of the value [x];\n * the returned value is an angle in the range from `0.0` to `PI` radians.\n *\n * Special cases:\n *    - `acos(x)` is `NaN`, when `abs(x) > 1` or x is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic inline fun acos(x: Double): Double = nativeMath.acos(x)\n\n/**\n * Computes the arc tangent of the value [x];\n * the returned value is an angle in the range from `-PI/2` to `PI/2` radians.\n *\n * Special cases:\n *   - `atan(NaN)` is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic inline fun atan(x: Double): Double = nativeMath.atan(x)\n\n/**\n * Returns the angle `theta` of the polar coordinates `(r, theta)` that correspond\n * to the rectangular coordinates `(x, y)` by computing the arc tangent of the value [y] / [x];\n * the returned value is an angle in the range from `-PI` to `PI` radians.\n *\n * Special cases:\n *   - `atan2(0.0, 0.0)` is `0.0`\n *   - `atan2(0.0, x)` is  `0.0` for `x > 0` and `PI` for `x < 0`\n *   - `atan2(-0.0, x)` is `-0.0` for 'x > 0` and `-PI` for `x < 0`\n *   - `atan2(y, +Inf)` is `0.0` for `0 < y < +Inf` and `-0.0` for '-Inf < y < 0`\n *   - `atan2(y, -Inf)` is `PI` for `0 < y < +Inf` and `-PI` for `-Inf < y < 0`\n *   - `atan2(y, 0.0)` is `PI/2` for `y > 0` and `-PI/2` for `y < 0`\n *   - `atan2(+Inf, x)` is `PI/2` for finite `x`y\n *   - `atan2(-Inf, x)` is `-PI/2` for finite `x`\n *   - `atan2(NaN, x)` and `atan2(y, NaN)` is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic inline fun atan2(y: Double, x: Double): Double = nativeMath.atan2(y, x)\n\n/**\n * Computes the hyperbolic sine of the value [x].\n *\n * Special cases:\n *   - `sinh(NaN)` is `NaN`\n *   - `sinh(+Inf)` is `+Inf`\n *   - `sinh(-Inf)` is `-Inf`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic inline fun sinh(x: Double): Double = nativeMath.sinh(x)\n\n/**\n * Computes the hyperbolic cosine of the value [x].\n *\n * Special cases:\n *   - `cosh(NaN)` is `NaN`\n *   - `cosh(+Inf|-Inf)` is `+Inf`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic inline fun cosh(x: Double): Double = nativeMath.cosh(x)\n\n/**\n * Computes the hyperbolic tangent of the value [x].\n *\n * Special cases:\n *   - `tanh(NaN)` is `NaN`\n *   - `tanh(+Inf)` is `1.0`\n *   - `tanh(-Inf)` is `-1.0`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic inline fun tanh(x: Double): Double = nativeMath.tanh(x)\n\n/**\n * Computes the inverse hyperbolic sine of the value [x].\n *\n * The returned value is `y` such that `sinh(y) == x`.\n *\n * Special cases:\n *   - `asinh(NaN)` is `NaN`\n *   - `asinh(+Inf)` is `+Inf`\n *   - `asinh(-Inf)` is `-Inf`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic inline fun asinh(x: Double): Double = nativeMath.asinh(x)\n\n/**\n * Computes the inverse hyperbolic cosine of the value [x].\n *\n * The returned value is positive `y` such that `cosh(y) == x`.\n *\n * Special cases:\n *   - `acosh(NaN)` is `NaN`\n *   - `acosh(x)` is `NaN` when `x < 1`\n *   - `acosh(+Inf)` is `+Inf`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic inline fun acosh(x: Double): Double = nativeMath.acosh(x)\n\n/**\n * Computes the inverse hyperbolic tangent of the value [x].\n *\n * The returned value is `y` such that `tanh(y) == x`.\n *\n * Special cases:\n *   - `tanh(NaN)` is `NaN`\n *   - `tanh(x)` is `NaN` when `x > 1` or `x < -1`\n *   - `tanh(1.0)` is `+Inf`\n *   - `tanh(-1.0)` is `-Inf`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic inline fun atanh(x: Double): Double = nativeMath.atanh(x)\n\n/**\n * Computes `sqrt(x^2 + y^2)` without intermediate overflow or underflow.\n *\n * Special cases:\n *   - returns `+Inf` if any of arguments is infinite\n *   - returns `NaN` if any of arguments is `NaN` and the other is not infinite\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic inline fun hypot(x: Double, y: Double): Double = nativeMath.hypot(x, y)\n\n/**\n * Computes the positive square root of the value [x].\n *\n * Special cases:\n *   - `sqrt(x)` is `NaN` when `x < 0` or `x` is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic inline fun sqrt(x: Double): Double = nativeMath.sqrt(x)\n\n/**\n * Computes Euler's number `e` raised to the power of the value [x].\n *\n * Special cases:\n *   - `exp(NaN)` is `NaN`\n *   - `exp(+Inf)` is `+Inf`\n *   - `exp(-Inf)` is `0.0`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic inline fun exp(x: Double): Double = nativeMath.exp(x)\n\n/**\n * Computes `exp(x) - 1`.\n *\n * This function can be implemented to produce more precise result for [x] near zero.\n *\n * Special cases:\n *   - `expm1(NaN)` is `NaN`\n *   - `expm1(+Inf)` is `+Inf`\n *   - `expm1(-Inf)` is `-1.0`\n *\n * @see [exp] function.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic inline fun expm1(x: Double): Double = nativeMath.expm1(x)\n\n/**\n * Computes the logarithm of the value [x] to the given [base].\n *\n * Special cases:\n *   - `log(x, b)` is `NaN` if either `x` or `b` are `NaN`\n *   - `log(x, b)` is `NaN` when `x < 0` or `b <= 0` or `b == 1.0`\n *   - `log(+Inf, +Inf)` is `NaN`\n *   - `log(+Inf, b)` is `+Inf` for `b > 1` and `-Inf` for `b < 1`\n *   - `log(0.0, b)` is `-Inf` for `b > 1` and `+Inf` for `b > 1`\n *\n * See also logarithm functions for common fixed bases: [ln], [log10] and [log2].\n */\n@SinceKotlin(\"1.2\")\npublic fun log(x: Double, base: Double): Double {\n    if (base <= 0.0 || base == 1.0) return Double.NaN\n    return nativeMath.log(x) / nativeMath.log(base)\n}\n\n/**\n * Computes the natural logarithm (base `E`) of the value [x].\n *\n * Special cases:\n *   - `ln(NaN)` is `NaN`\n *   - `ln(x)` is `NaN` when `x < 0.0`\n *   - `ln(+Inf)` is `+Inf`\n *   - `ln(0.0)` is `-Inf`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic inline fun ln(x: Double): Double = nativeMath.log(x)\n\n/**\n * Computes the common logarithm (base 10) of the value [x].\n *\n * @see [ln] function for special cases.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic inline fun log10(x: Double): Double = nativeMath.log10(x)\n\n/**\n * Computes the binary logarithm (base 2) of the value [x].\n *\n * @see [ln] function for special cases.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic inline fun log2(x: Double): Double = nativeMath.log2(x)\n\n/**\n * Computes `ln(x + 1)`.\n *\n * This function can be implemented to produce more precise result for [x] near zero.\n *\n * Special cases:\n *   - `ln1p(NaN)` is `NaN`\n *   - `ln1p(x)` is `NaN` where `x < -1.0`\n *   - `ln1p(-1.0)` is `-Inf`\n *   - `ln1p(+Inf)` is `+Inf`\n *\n * @see [ln] function\n * @see [expm1] function\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic inline fun ln1p(x: Double): Double = nativeMath.log1p(x)\n\n/**\n * Rounds the given value [x] to an integer towards positive infinity.\n\n * @return the smallest double value that is greater than the given value [x] and is a mathematical integer.\n *\n * Special cases:\n *   - `ceil(x)` is `x` where `x` is `NaN` or `+Inf` or `-Inf` or already a mathematical integer.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic inline fun ceil(x: Double): Double = nativeMath.ceil(x).unsafeCast<Double>() // TODO: Remove unsafe cast after removing public js.math\n\n/**\n * Rounds the given value [x] to an integer towards negative infinity.\n\n * @return the largest double value that is smaller than the given value [x] and is a mathematical integer.\n *\n * Special cases:\n *   - `floor(x)` is `x` where `x` is `NaN` or `+Inf` or `-Inf` or already a mathematical integer.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic inline fun floor(x: Double): Double = nativeMath.floor(x).unsafeCast<Double>()\n\n/**\n * Rounds the given value [x] to an integer towards zero.\n *\n * @return the value [x] having its fractional part truncated.\n *\n * Special cases:\n *   - `truncate(x)` is `x` where `x` is `NaN` or `+Inf` or `-Inf` or already a mathematical integer.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic inline fun truncate(x: Double): Double = nativeMath.trunc(x)\n\n/**\n * Rounds the given value [x] towards the closest integer with ties rounded towards even integer.\n *\n * Special cases:\n *   - `round(x)` is `x` where `x` is `NaN` or `+Inf` or `-Inf` or already a mathematical integer.\n */\n@SinceKotlin(\"1.2\")\npublic fun round(x: Double): Double {\n    if (x % 0.5 != 0.0) {\n        return nativeMath.round(x).unsafeCast<Double>()\n    }\n    val floor = floor(x)\n    return if (floor % 2 == 0.0) floor else ceil(x)\n}\n\n/**\n * Returns the absolute value of the given value [x].\n *\n * Special cases:\n *   - `abs(NaN)` is `NaN`\n *\n * @see absoluteValue extension property for [Double]\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic inline fun abs(x: Double): Double = nativeMath.abs(x)\n\n/**\n * Returns the sign of the given value [x]:\n *   - `-1.0` if the value is negative,\n *   - zero if the value is zero,\n *   - `1.0` if the value is positive\n *\n * Special case:\n *   - `sign(NaN)` is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic inline fun sign(x: Double): Double = nativeMath.sign(x)\n\n\n/**\n * Returns the smaller of two values.\n *\n * If either value is `NaN`, then the result is `NaN`.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic inline fun min(a: Double, b: Double): Double = nativeMath.min(a, b)\n/**\n * Returns the greater of two values.\n *\n * If either value is `NaN`, then the result is `NaN`.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic inline fun max(a: Double, b: Double): Double = nativeMath.max(a, b)\n\n// extensions\n\n/**\n * Raises this value to the power [x].\n *\n * Special cases:\n *   - `b.pow(0.0)` is `1.0`\n *   - `b.pow(1.0) == b`\n *   - `b.pow(NaN)` is `NaN`\n *   - `NaN.pow(x)` is `NaN` for `x != 0.0`\n *   - `b.pow(Inf)` is `NaN` for `abs(b) == 1.0`\n *   - `b.pow(x)` is `NaN` for `b < 0` and `x` is finite and not an integer\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic inline fun Double.pow(x: Double): Double = nativeMath.pow(this, x)\n\n/**\n * Raises this value to the integer power [n].\n *\n * See the other overload of [pow] for details.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic inline fun Double.pow(n: Int): Double = nativeMath.pow(this, n.toDouble())\n\n/**\n * Returns the absolute value of this value.\n *\n * Special cases:\n *   - `NaN.absoluteValue` is `NaN`\n *\n * @see abs function\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic inline val Double.absoluteValue: Double get() = nativeMath.abs(this)\n\n/**\n * Returns the sign of this value:\n *   - `-1.0` if the value is negative,\n *   - zero if the value is zero,\n *   - `1.0` if the value is positive\n *\n * Special case:\n *   - `NaN.sign` is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic inline val Double.sign: Double get() = nativeMath.sign(this)\n\n/**\n * Returns this value with the sign bit same as of the [sign] value.\n *\n * If [sign] is `NaN` the sign of the result is undefined.\n */\n@SinceKotlin(\"1.2\")\npublic fun Double.withSign(sign: Double): Double {\n    val thisSignBit = js(\"Kotlin\").doubleSignBit(this).unsafeCast<Int>()\n    val newSignBit = js(\"Kotlin\").doubleSignBit(sign).unsafeCast<Int>()\n    return if (thisSignBit == newSignBit) this else -this\n}\n\n/**\n * Returns this value with the sign bit same as of the [sign] value.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic inline fun Double.withSign(sign: Int): Double = this.withSign(sign.toDouble())\n\n/**\n * Returns the ulp (unit in the last place) of this value.\n *\n * An ulp is a positive distance between this value and the next nearest [Double] value larger in magnitude.\n *\n * Special Cases:\n *   - `NaN.ulp` is `NaN`\n *   - `x.ulp` is `+Inf` when `x` is `+Inf` or `-Inf`\n *   - `0.0.ulp` is `Double.MIN_VALUE`\n */\n@SinceKotlin(\"1.2\")\npublic val Double.ulp: Double get() = when {\n    this < 0 -> (-this).ulp\n    this.isNaN() || this == Double.POSITIVE_INFINITY -> this\n    this == Double.MAX_VALUE -> this - this.nextDown()\n    else -> this.nextUp() - this\n}\n\n/**\n * Returns the [Double] value nearest to this value in direction of positive infinity.\n */\n@SinceKotlin(\"1.2\")\npublic fun Double.nextUp(): Double = when {\n    this.isNaN() || this == Double.POSITIVE_INFINITY -> this\n    this == 0.0 -> Double.MIN_VALUE\n    else -> Double.fromBits(this.toRawBits() + if (this > 0) 1 else -1)\n}\n\n/**\n * Returns the [Double] value nearest to this value in direction of negative infinity.\n */\n@SinceKotlin(\"1.2\")\npublic fun Double.nextDown(): Double = when {\n    this.isNaN() || this == Double.NEGATIVE_INFINITY -> this\n    this == 0.0 -> -Double.MIN_VALUE\n    else -> Double.fromBits(this.toRawBits() + if (this > 0) -1 else 1)\n}\n\n\n/**\n * Returns the [Double] value nearest to this value in direction from this value towards the value [to].\n *\n * Special cases:\n *   - `x.nextTowards(y)` is `NaN` if either `x` or `y` are `NaN`\n *   - `x.nextTowards(x) == x`\n *\n */\n@SinceKotlin(\"1.2\")\npublic fun Double.nextTowards(to: Double): Double = when {\n    this.isNaN() || to.isNaN() -> Double.NaN\n    to == this -> to\n    to > this -> this.nextUp()\n    else /* to < this */-> this.nextDown()\n}\n\n\n/**\n * Rounds this [Double] value to the nearest integer and converts the result to [Int].\n * Ties are rounded towards positive infinity.\n *\n * Special cases:\n *   - `x.roundToInt() == Int.MAX_VALUE` when `x > Int.MAX_VALUE`\n *   - `x.roundToInt() == Int.MIN_VALUE` when `x < Int.MIN_VALUE`\n *\n * @throws IllegalArgumentException when this value is `NaN`\n */\n@SinceKotlin(\"1.2\")\npublic fun Double.roundToInt(): Int = when {\n    isNaN() -> throw IllegalArgumentException(\"Cannot round NaN value.\")\n    this > Int.MAX_VALUE -> Int.MAX_VALUE\n    this < Int.MIN_VALUE -> Int.MIN_VALUE\n    else -> nativeMath.round(this).unsafeCast<Double>().toInt()\n}\n\n/**\n * Rounds this [Double] value to the nearest integer and converts the result to [Long].\n * Ties are rounded towards positive infinity.\n *\n * Special cases:\n *   - `x.roundToLong() == Long.MAX_VALUE` when `x > Long.MAX_VALUE`\n *   - `x.roundToLong() == Long.MIN_VALUE` when `x < Long.MIN_VALUE`\n *\n * @throws IllegalArgumentException when this value is `NaN`\n */\n@SinceKotlin(\"1.2\")\npublic fun Double.roundToLong(): Long = when {\n    isNaN() -> throw IllegalArgumentException(\"Cannot round NaN value.\")\n    this > Long.MAX_VALUE -> Long.MAX_VALUE\n    this < Long.MIN_VALUE -> Long.MIN_VALUE\n    else -> nativeMath.round(this).unsafeCast<Double>().toLong()\n}\n\n\n\n\n// ================ Float Math ========================================\n\n/** Computes the sine of the angle [x] given in radians.\n *\n *  Special cases:\n *   - `sin(NaN|+Inf|-Inf)` is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic inline fun sin(x: Float): Float = nativeMath.sin(x.toDouble()).toFloat()\n\n/** Computes the cosine of the angle [x] given in radians.\n *\n *  Special cases:\n *   - `cos(NaN|+Inf|-Inf)` is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic inline fun cos(x: Float): Float = nativeMath.cos(x.toDouble()).toFloat()\n\n/** Computes the tangent of the angle [x] given in radians.\n *\n *  Special cases:\n *   - `tan(NaN|+Inf|-Inf)` is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic inline fun tan(x: Float): Float = nativeMath.tan(x.toDouble()).toFloat()\n\n/**\n * Computes the arc sine of the value [x];\n * the returned value is an angle in the range from `-PI/2` to `PI/2` radians.\n *\n * Special cases:\n *    - `asin(x)` is `NaN`, when `abs(x) > 1` or x is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic inline fun asin(x: Float): Float = nativeMath.asin(x.toDouble()).toFloat()\n\n/**\n * Computes the arc cosine of the value [x];\n * the returned value is an angle in the range from `0.0` to `PI` radians.\n *\n * Special cases:\n *    - `acos(x)` is `NaN`, when `abs(x) > 1` or x is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic inline fun acos(x: Float): Float = nativeMath.acos(x.toDouble()).toFloat()\n\n/**\n * Computes the arc tangent of the value [x];\n * the returned value is an angle in the range from `-PI/2` to `PI/2` radians.\n *\n * Special cases:\n *   - `atan(NaN)` is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic inline fun atan(x: Float): Float = nativeMath.atan(x.toDouble()).toFloat()\n\n/**\n * Returns the angle `theta` of the polar coordinates `(r, theta)` that correspond\n * to the rectangular coordinates `(x, y)` by computing the arc tangent of the value [y] / [x];\n * the returned value is an angle in the range from `-PI` to `PI` radians.\n *\n * Special cases:\n *   - `atan2(0.0, 0.0)` is `0.0`\n *   - `atan2(0.0, x)` is  `0.0` for `x > 0` and `PI` for `x < 0`\n *   - `atan2(-0.0, x)` is `-0.0` for 'x > 0` and `-PI` for `x < 0`\n *   - `atan2(y, +Inf)` is `0.0` for `0 < y < +Inf` and `-0.0` for '-Inf < y < 0`\n *   - `atan2(y, -Inf)` is `PI` for `0 < y < +Inf` and `-PI` for `-Inf < y < 0`\n *   - `atan2(y, 0.0)` is `PI/2` for `y > 0` and `-PI/2` for `y < 0`\n *   - `atan2(+Inf, x)` is `PI/2` for finite `x`y\n *   - `atan2(-Inf, x)` is `-PI/2` for finite `x`\n *   - `atan2(NaN, x)` and `atan2(y, NaN)` is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic inline fun atan2(y: Float, x: Float): Float = nativeMath.atan2(y.toDouble(), x.toDouble()).toFloat()\n\n/**\n * Computes the hyperbolic sine of the value [x].\n *\n * Special cases:\n *   - `sinh(NaN)` is `NaN`\n *   - `sinh(+Inf)` is `+Inf`\n *   - `sinh(-Inf)` is `-Inf`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic inline fun sinh(x: Float): Float = nativeMath.sinh(x.toDouble()).toFloat()\n\n/**\n * Computes the hyperbolic cosine of the value [x].\n *\n * Special cases:\n *   - `cosh(NaN)` is `NaN`\n *   - `cosh(+Inf|-Inf)` is `+Inf`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic inline fun cosh(x: Float): Float = nativeMath.cosh(x.toDouble()).toFloat()\n\n/**\n * Computes the hyperbolic tangent of the value [x].\n *\n * Special cases:\n *   - `tanh(NaN)` is `NaN`\n *   - `tanh(+Inf)` is `1.0`\n *   - `tanh(-Inf)` is `-1.0`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic inline fun tanh(x: Float): Float = nativeMath.tanh(x.toDouble()).toFloat()\n\n/**\n * Computes the inverse hyperbolic sine of the value [x].\n *\n * The returned value is `y` such that `sinh(y) == x`.\n *\n * Special cases:\n *   - `asinh(NaN)` is `NaN`\n *   - `asinh(+Inf)` is `+Inf`\n *   - `asinh(-Inf)` is `-Inf`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic inline fun asinh(x: Float): Float = nativeMath.asinh(x.toDouble()).toFloat()\n\n/**\n * Computes the inverse hyperbolic cosine of the value [x].\n *\n * The returned value is positive `y` such that `cosh(y) == x`.\n *\n * Special cases:\n *   - `acosh(NaN)` is `NaN`\n *   - `acosh(x)` is `NaN` when `x < 1`\n *   - `acosh(+Inf)` is `+Inf`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic inline fun acosh(x: Float): Float = nativeMath.acosh(x.toDouble()).toFloat()\n\n/**\n * Computes the inverse hyperbolic tangent of the value [x].\n *\n * The returned value is `y` such that `tanh(y) == x`.\n *\n * Special cases:\n *   - `tanh(NaN)` is `NaN`\n *   - `tanh(x)` is `NaN` when `x > 1` or `x < -1`\n *   - `tanh(1.0)` is `+Inf`\n *   - `tanh(-1.0)` is `-Inf`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic inline fun atanh(x: Float): Float = nativeMath.atanh(x.toDouble()).toFloat()\n\n/**\n * Computes `sqrt(x^2 + y^2)` without intermediate overflow or underflow.\n *\n * Special cases:\n *   - returns `+Inf` if any of arguments is infinite\n *   - returns `NaN` if any of arguments is `NaN` and the other is not infinite\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic inline fun hypot(x: Float, y: Float): Float = nativeMath.hypot(x.toDouble(), y.toDouble()).toFloat()\n\n/**\n * Computes the positive square root of the value [x].\n *\n * Special cases:\n *   - `sqrt(x)` is `NaN` when `x < 0` or `x` is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic inline fun sqrt(x: Float): Float = nativeMath.sqrt(x.toDouble()).toFloat()\n\n/**\n * Computes Euler's number `e` raised to the power of the value [x].\n *\n * Special cases:\n *   - `exp(NaN)` is `NaN`\n *   - `exp(+Inf)` is `+Inf`\n *   - `exp(-Inf)` is `0.0`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic inline fun exp(x: Float): Float = nativeMath.exp(x.toDouble()).toFloat()\n\n/**\n * Computes `exp(x) - 1`.\n *\n * This function can be implemented to produce more precise result for [x] near zero.\n *\n * Special cases:\n *   - `expm1(NaN)` is `NaN`\n *   - `expm1(+Inf)` is `+Inf`\n *   - `expm1(-Inf)` is `-1.0`\n *\n * @see [exp] function.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic inline fun expm1(x: Float): Float = nativeMath.expm1(x.toDouble()).toFloat()\n\n/**\n * Computes the logarithm of the value [x] to the given [base].\n *\n * Special cases:\n *   - `log(x, b)` is `NaN` if either `x` or `b` are `NaN`\n *   - `log(x, b)` is `NaN` when `x < 0` or `b <= 0` or `b == 1.0`\n *   - `log(+Inf, +Inf)` is `NaN`\n *   - `log(+Inf, b)` is `+Inf` for `b > 1` and `-Inf` for `b < 1`\n *   - `log(0.0, b)` is `-Inf` for `b > 1` and `+Inf` for `b > 1`\n *\n * See also logarithm functions for common fixed bases: [ln], [log10] and [log2].\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic inline fun log(x: Float, base: Float): Float = log(x.toDouble(), base.toDouble()).toFloat()\n\n/**\n * Computes the natural logarithm (base `E`) of the value [x].\n *\n * Special cases:\n *   - `ln(NaN)` is `NaN`\n *   - `ln(x)` is `NaN` when `x < 0.0`\n *   - `ln(+Inf)` is `+Inf`\n *   - `ln(0.0)` is `-Inf`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic inline fun ln(x: Float): Float = nativeMath.log(x.toDouble()).toFloat()\n\n/**\n * Computes the common logarithm (base 10) of the value [x].\n *\n * @see [ln] function for special cases.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic inline fun log10(x: Float): Float = nativeMath.log10(x.toDouble()).toFloat()\n\n/**\n * Computes the binary logarithm (base 2) of the value [x].\n *\n * @see [ln] function for special cases.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic inline fun log2(x: Float): Float = nativeMath.log2(x.toDouble()).toFloat()\n\n/**\n * Computes `ln(a + 1)`.\n *\n * This function can be implemented to produce more precise result for [x] near zero.\n *\n * Special cases:\n *   - `ln1p(NaN)` is `NaN`\n *   - `ln1p(x)` is `NaN` where `x < -1.0`\n *   - `ln1p(-1.0)` is `-Inf`\n *   - `ln1p(+Inf)` is `+Inf`\n *\n * @see [ln] function\n * @see [expm1] function\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic inline fun ln1p(x: Float): Float = nativeMath.log1p(x.toDouble()).toFloat()\n\n/**\n * Rounds the given value [x] to an integer towards positive infinity.\n\n * @return the smallest Float value that is greater than the given value [x] and is a mathematical integer.\n *\n * Special cases:\n *   - `ceil(x)` is `x` where `x` is `NaN` or `+Inf` or `-Inf` or already a mathematical integer.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic inline fun ceil(x: Float): Float = nativeMath.ceil(x.toDouble()).toFloat()\n\n/**\n * Rounds the given value [x] to an integer towards negative infinity.\n\n * @return the largest Float value that is smaller than the given value [x] and is a mathematical integer.\n *\n * Special cases:\n *   - `floor(x)` is `x` where `x` is `NaN` or `+Inf` or `-Inf` or already a mathematical integer.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic inline fun floor(x: Float): Float = nativeMath.floor(x.toDouble()).toFloat()\n\n/**\n * Rounds the given value [x] to an integer towards zero.\n *\n * @return the value [x] having its fractional part truncated.\n *\n * Special cases:\n *   - `truncate(x)` is `x` where `x` is `NaN` or `+Inf` or `-Inf` or already a mathematical integer.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic inline fun truncate(x: Float): Float = truncate(x.toDouble()).toFloat()\n\n/**\n * Rounds the given value [x] towards the closest integer with ties rounded towards even integer.\n *\n * Special cases:\n *   - `round(x)` is `x` where `x` is `NaN` or `+Inf` or `-Inf` or already a mathematical integer.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic inline fun round(x: Float): Float = round(x.toDouble()).toFloat()\n\n\n/**\n * Returns the absolute value of the given value [x].\n *\n * Special cases:\n *   - `abs(NaN)` is `NaN`\n *\n * @see absoluteValue extension property for [Float]\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic inline fun abs(x: Float): Float = nativeMath.abs(x.toDouble()).toFloat()\n\n/**\n * Returns the sign of the given value [x]:\n *   - `-1.0` if the value is negative,\n *   - zero if the value is zero,\n *   - `1.0` if the value is positive\n *\n * Special case:\n *   - `sign(NaN)` is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic inline fun sign(x: Float): Float = nativeMath.sign(x.toDouble()).toFloat()\n\n\n\n/**\n * Returns the smaller of two values.\n *\n * If either value is `NaN`, then the result is `NaN`.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic inline fun min(a: Float, b: Float): Float = nativeMath.min(a, b)\n/**\n * Returns the greater of two values.\n *\n * If either value is `NaN`, then the result is `NaN`.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic inline fun max(a: Float, b: Float): Float = nativeMath.max(a, b)\n\n// extensions\n\n\n/**\n * Raises this value to the power [x].\n *\n * Special cases:\n *   - `b.pow(0.0)` is `1.0`\n *   - `b.pow(1.0) == b`\n *   - `b.pow(NaN)` is `NaN`\n *   - `NaN.pow(x)` is `NaN` for `x != 0.0`\n *   - `b.pow(Inf)` is `NaN` for `abs(b) == 1.0`\n *   - `b.pow(x)` is `NaN` for `b < 0` and `x` is finite and not an integer\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic inline fun Float.pow(x: Float): Float = nativeMath.pow(this.toDouble(), x.toDouble()).toFloat()\n\n/**\n * Raises this value to the integer power [n].\n *\n * See the other overload of [pow] for details.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic inline fun Float.pow(n: Int): Float = nativeMath.pow(this.toDouble(), n.toDouble()).toFloat()\n\n/**\n * Returns the absolute value of this value.\n *\n * Special cases:\n *   - `NaN.absoluteValue` is `NaN`\n *\n * @see abs function\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic inline val Float.absoluteValue: Float get() = nativeMath.abs(this.toDouble()).toFloat()\n\n/**\n * Returns the sign of this value:\n *   - `-1.0` if the value is negative,\n *   - zero if the value is zero,\n *   - `1.0` if the value is positive\n *\n * Special case:\n *   - `NaN.sign` is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic inline val Float.sign: Float get() = nativeMath.sign(this.toDouble()).toFloat()\n\n/**\n * Returns this value with the sign bit same as of the [sign] value.\n *\n * If [sign] is `NaN` the sign of the result is undefined.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic inline fun Float.withSign(sign: Float): Float = this.toDouble().withSign(sign.toDouble()).toFloat()\n/**\n * Returns this value with the sign bit same as of the [sign] value.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic inline fun Float.withSign(sign: Int): Float = this.toDouble().withSign(sign.toDouble()).toFloat()\n\n\n/**\n * Rounds this [Float] value to the nearest integer and converts the result to [Int].\n * Ties are rounded towards positive infinity.\n *\n * Special cases:\n *   - `x.roundToInt() == Int.MAX_VALUE` when `x > Int.MAX_VALUE`\n *   - `x.roundToInt() == Int.MIN_VALUE` when `x < Int.MIN_VALUE`\n *\n * @throws IllegalArgumentException when this value is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic inline fun Float.roundToInt(): Int = toDouble().roundToInt()\n\n/**\n * Rounds this [Float] value to the nearest integer and converts the result to [Long].\n * Ties are rounded towards positive infinity.\n *\n * Special cases:\n *   - `x.roundToLong() == Long.MAX_VALUE` when `x > Long.MAX_VALUE`\n *   - `x.roundToLong() == Long.MIN_VALUE` when `x < Long.MIN_VALUE`\n *\n * @throws IllegalArgumentException when this value is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic inline fun Float.roundToLong(): Long = toDouble().roundToLong()\n\n\n\n\n/**\n * Returns the absolute value of the given value [n].\n *\n * Special cases:\n *   - `abs(Int.MIN_VALUE)` is `Int.MIN_VALUE` due to an overflow\n *\n * @see absoluteValue extension property for [Int]\n */\n// TODO: remove manual 'or' when KT-19290 is fixed\n@SinceKotlin(\"1.2\")\npublic fun abs(n: Int): Int = if (n < 0) (-n or 0) else n\n\n/**\n * Returns the smaller of two values.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic inline fun min(a: Int, b: Int): Int = nativeMath.min(a, b)\n\n/**\n * Returns the greater of two values.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic inline fun max(a: Int, b: Int): Int = nativeMath.max(a, b)\n\n/**\n * Returns the absolute value of this value.\n *\n * Special cases:\n *   - `Int.MIN_VALUE.absoluteValue` is `Int.MIN_VALUE` due to an overflow\n *\n * @see abs function\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic inline val Int.absoluteValue: Int get() = abs(this)\n\n/**\n * Returns the sign of this value:\n *   - `-1` if the value is negative,\n *   - `0` if the value is zero,\n *   - `1` if the value is positive\n */\n@SinceKotlin(\"1.2\")\npublic val Int.sign: Int get() = when {\n    this < 0 -> -1\n    this > 0 -> 1\n    else -> 0\n}\n\n\n\n/**\n * Returns the absolute value of the given value [n].\n *\n * Special cases:\n *   - `abs(Long.MIN_VALUE)` is `Long.MIN_VALUE` due to an overflow\n *\n * @see absoluteValue extension property for [Long]\n */\n@SinceKotlin(\"1.2\")\npublic fun abs(n: Long): Long = if (n < 0) -n else n\n\n/**\n * Returns the smaller of two values.\n */\n@SinceKotlin(\"1.2\")\n@Suppress(\"NOTHING_TO_INLINE\")\npublic inline fun min(a: Long, b: Long): Long = if (a <= b) a else b\n\n/**\n * Returns the greater of two values.\n */\n@SinceKotlin(\"1.2\")\n@Suppress(\"NOTHING_TO_INLINE\")\npublic inline fun max(a: Long, b: Long): Long = if (a >= b) a else b\n\n/**\n * Returns the absolute value of this value.\n *\n * Special cases:\n *   - `Long.MIN_VALUE.absoluteValue` is `Long.MIN_VALUE` due to an overflow\n *\n * @see abs function\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic inline val Long.absoluteValue: Long get() = abs(this)\n\n/**\n * Returns the sign of this value:\n *   - `-1` if the value is negative,\n *   - `0` if the value is zero,\n *   - `1` if the value is positive\n */\n@SinceKotlin(\"1.2\")\npublic val Long.sign: Int get() = when {\n    this < 0 -> -1\n    this > 0 -> 1\n    else -> 0\n}\n\n\n",null,null,null,null,null,null,null,null,null,null,null,"/*\n * Generated file\n * DO NOT EDIT\n * \n * See libraries/tools/idl2k for details\n */\n\n@file:Suppress(\"NESTED_CLASS_IN_EXTERNAL_INTERFACE\")\npackage org.khronos.webgl\n\nimport kotlin.js.*\nimport org.w3c.dom.*\nimport org.w3c.dom.css.*\nimport org.w3c.dom.events.*\nimport org.w3c.dom.parsing.*\nimport org.w3c.dom.svg.*\nimport org.w3c.dom.url.*\nimport org.w3c.fetch.*\nimport org.w3c.files.*\nimport org.w3c.notifications.*\nimport org.w3c.performance.*\nimport org.w3c.workers.*\nimport org.w3c.xhr.*\n\npublic external interface WebGLContextAttributes {\n    var alpha: Boolean? /* = true */\n        get() = definedExternally\n        set(value) = definedExternally\n    var depth: Boolean? /* = true */\n        get() = definedExternally\n        set(value) = definedExternally\n    var stencil: Boolean? /* = false */\n        get() = definedExternally\n        set(value) = definedExternally\n    var antialias: Boolean? /* = true */\n        get() = definedExternally\n        set(value) = definedExternally\n    var premultipliedAlpha: Boolean? /* = true */\n        get() = definedExternally\n        set(value) = definedExternally\n    var preserveDrawingBuffer: Boolean? /* = false */\n        get() = definedExternally\n        set(value) = definedExternally\n    var preferLowPowerToHighPerformance: Boolean? /* = false */\n        get() = definedExternally\n        set(value) = definedExternally\n    var failIfMajorPerformanceCaveat: Boolean? /* = false */\n        get() = definedExternally\n        set(value) = definedExternally\n}\n\n@kotlin.internal.InlineOnly\npublic inline fun WebGLContextAttributes(alpha: Boolean? = true, depth: Boolean? = true, stencil: Boolean? = false, antialias: Boolean? = true, premultipliedAlpha: Boolean? = true, preserveDrawingBuffer: Boolean? = false, preferLowPowerToHighPerformance: Boolean? = false, failIfMajorPerformanceCaveat: Boolean? = false): WebGLContextAttributes {\n    val o = js(\"({})\")\n\n    o[\"alpha\"] = alpha\n    o[\"depth\"] = depth\n    o[\"stencil\"] = stencil\n    o[\"antialias\"] = antialias\n    o[\"premultipliedAlpha\"] = premultipliedAlpha\n    o[\"preserveDrawingBuffer\"] = preserveDrawingBuffer\n    o[\"preferLowPowerToHighPerformance\"] = preferLowPowerToHighPerformance\n    o[\"failIfMajorPerformanceCaveat\"] = failIfMajorPerformanceCaveat\n\n    return o\n}\n\npublic external abstract class WebGLObject {\n}\n\n/**\n * Exposes the JavaScript [WebGLBuffer](https://developer.mozilla.org/en/docs/Web/API/WebGLBuffer) to Kotlin\n */\npublic external abstract class WebGLBuffer : WebGLObject {\n}\n\n/**\n * Exposes the JavaScript [WebGLFramebuffer](https://developer.mozilla.org/en/docs/Web/API/WebGLFramebuffer) to Kotlin\n */\npublic external abstract class WebGLFramebuffer : WebGLObject {\n}\n\n/**\n * Exposes the JavaScript [WebGLProgram](https://developer.mozilla.org/en/docs/Web/API/WebGLProgram) to Kotlin\n */\npublic external abstract class WebGLProgram : WebGLObject {\n}\n\n/**\n * Exposes the JavaScript [WebGLRenderbuffer](https://developer.mozilla.org/en/docs/Web/API/WebGLRenderbuffer) to Kotlin\n */\npublic external abstract class WebGLRenderbuffer : WebGLObject {\n}\n\n/**\n * Exposes the JavaScript [WebGLShader](https://developer.mozilla.org/en/docs/Web/API/WebGLShader) to Kotlin\n */\npublic external abstract class WebGLShader : WebGLObject {\n}\n\n/**\n * Exposes the JavaScript [WebGLTexture](https://developer.mozilla.org/en/docs/Web/API/WebGLTexture) to Kotlin\n */\npublic external abstract class WebGLTexture : WebGLObject {\n}\n\n/**\n * Exposes the JavaScript [WebGLUniformLocation](https://developer.mozilla.org/en/docs/Web/API/WebGLUniformLocation) to Kotlin\n */\npublic external abstract class WebGLUniformLocation {\n}\n\n/**\n * Exposes the JavaScript [WebGLActiveInfo](https://developer.mozilla.org/en/docs/Web/API/WebGLActiveInfo) to Kotlin\n */\npublic external abstract class WebGLActiveInfo {\n    open val size: Int\n    open val type: Int\n    open val name: String\n}\n\n/**\n * Exposes the JavaScript [WebGLShaderPrecisionFormat](https://developer.mozilla.org/en/docs/Web/API/WebGLShaderPrecisionFormat) to Kotlin\n */\npublic external abstract class WebGLShaderPrecisionFormat {\n    open val rangeMin: Int\n    open val rangeMax: Int\n    open val precision: Int\n}\n\npublic external interface WebGLRenderingContextBase {\n    val canvas: HTMLCanvasElement\n    val drawingBufferWidth: Int\n    val drawingBufferHeight: Int\n    fun getContextAttributes(): WebGLContextAttributes?\n    fun isContextLost(): Boolean\n    fun getSupportedExtensions(): Array<String>?\n    fun getExtension(name: String): dynamic\n    fun activeTexture(texture: Int): Unit\n    fun attachShader(program: WebGLProgram?, shader: WebGLShader?): Unit\n    fun bindAttribLocation(program: WebGLProgram?, index: Int, name: String): Unit\n    fun bindBuffer(target: Int, buffer: WebGLBuffer?): Unit\n    fun bindFramebuffer(target: Int, framebuffer: WebGLFramebuffer?): Unit\n    fun bindRenderbuffer(target: Int, renderbuffer: WebGLRenderbuffer?): Unit\n    fun bindTexture(target: Int, texture: WebGLTexture?): Unit\n    fun blendColor(red: Float, green: Float, blue: Float, alpha: Float): Unit\n    fun blendEquation(mode: Int): Unit\n    fun blendEquationSeparate(modeRGB: Int, modeAlpha: Int): Unit\n    fun blendFunc(sfactor: Int, dfactor: Int): Unit\n    fun blendFuncSeparate(srcRGB: Int, dstRGB: Int, srcAlpha: Int, dstAlpha: Int): Unit\n    fun bufferData(target: Int, size: Int, usage: Int): Unit\n    fun bufferData(target: Int, data: BufferDataSource?, usage: Int): Unit\n    fun bufferSubData(target: Int, offset: Int, data: BufferDataSource?): Unit\n    fun checkFramebufferStatus(target: Int): Int\n    fun clear(mask: Int): Unit\n    fun clearColor(red: Float, green: Float, blue: Float, alpha: Float): Unit\n    fun clearDepth(depth: Float): Unit\n    fun clearStencil(s: Int): Unit\n    fun colorMask(red: Boolean, green: Boolean, blue: Boolean, alpha: Boolean): Unit\n    fun compileShader(shader: WebGLShader?): Unit\n    fun compressedTexImage2D(target: Int, level: Int, internalformat: Int, width: Int, height: Int, border: Int, data: ArrayBufferView): Unit\n    fun compressedTexSubImage2D(target: Int, level: Int, xoffset: Int, yoffset: Int, width: Int, height: Int, format: Int, data: ArrayBufferView): Unit\n    fun copyTexImage2D(target: Int, level: Int, internalformat: Int, x: Int, y: Int, width: Int, height: Int, border: Int): Unit\n    fun copyTexSubImage2D(target: Int, level: Int, xoffset: Int, yoffset: Int, x: Int, y: Int, width: Int, height: Int): Unit\n    fun createBuffer(): WebGLBuffer?\n    fun createFramebuffer(): WebGLFramebuffer?\n    fun createProgram(): WebGLProgram?\n    fun createRenderbuffer(): WebGLRenderbuffer?\n    fun createShader(type: Int): WebGLShader?\n    fun createTexture(): WebGLTexture?\n    fun cullFace(mode: Int): Unit\n    fun deleteBuffer(buffer: WebGLBuffer?): Unit\n    fun deleteFramebuffer(framebuffer: WebGLFramebuffer?): Unit\n    fun deleteProgram(program: WebGLProgram?): Unit\n    fun deleteRenderbuffer(renderbuffer: WebGLRenderbuffer?): Unit\n    fun deleteShader(shader: WebGLShader?): Unit\n    fun deleteTexture(texture: WebGLTexture?): Unit\n    fun depthFunc(func: Int): Unit\n    fun depthMask(flag: Boolean): Unit\n    fun depthRange(zNear: Float, zFar: Float): Unit\n    fun detachShader(program: WebGLProgram?, shader: WebGLShader?): Unit\n    fun disable(cap: Int): Unit\n    fun disableVertexAttribArray(index: Int): Unit\n    fun drawArrays(mode: Int, first: Int, count: Int): Unit\n    fun drawElements(mode: Int, count: Int, type: Int, offset: Int): Unit\n    fun enable(cap: Int): Unit\n    fun enableVertexAttribArray(index: Int): Unit\n    fun finish(): Unit\n    fun flush(): Unit\n    fun framebufferRenderbuffer(target: Int, attachment: Int, renderbuffertarget: Int, renderbuffer: WebGLRenderbuffer?): Unit\n    fun framebufferTexture2D(target: Int, attachment: Int, textarget: Int, texture: WebGLTexture?, level: Int): Unit\n    fun frontFace(mode: Int): Unit\n    fun generateMipmap(target: Int): Unit\n    fun getActiveAttrib(program: WebGLProgram?, index: Int): WebGLActiveInfo?\n    fun getActiveUniform(program: WebGLProgram?, index: Int): WebGLActiveInfo?\n    fun getAttachedShaders(program: WebGLProgram?): Array<WebGLShader>?\n    fun getAttribLocation(program: WebGLProgram?, name: String): Int\n    fun getBufferParameter(target: Int, pname: Int): Any?\n    fun getParameter(pname: Int): Any?\n    fun getError(): Int\n    fun getFramebufferAttachmentParameter(target: Int, attachment: Int, pname: Int): Any?\n    fun getProgramParameter(program: WebGLProgram?, pname: Int): Any?\n    fun getProgramInfoLog(program: WebGLProgram?): String?\n    fun getRenderbufferParameter(target: Int, pname: Int): Any?\n    fun getShaderParameter(shader: WebGLShader?, pname: Int): Any?\n    fun getShaderPrecisionFormat(shadertype: Int, precisiontype: Int): WebGLShaderPrecisionFormat?\n    fun getShaderInfoLog(shader: WebGLShader?): String?\n    fun getShaderSource(shader: WebGLShader?): String?\n    fun getTexParameter(target: Int, pname: Int): Any?\n    fun getUniform(program: WebGLProgram?, location: WebGLUniformLocation?): Any?\n    fun getUniformLocation(program: WebGLProgram?, name: String): WebGLUniformLocation?\n    fun getVertexAttrib(index: Int, pname: Int): Any?\n    fun getVertexAttribOffset(index: Int, pname: Int): Int\n    fun hint(target: Int, mode: Int): Unit\n    fun isBuffer(buffer: WebGLBuffer?): Boolean\n    fun isEnabled(cap: Int): Boolean\n    fun isFramebuffer(framebuffer: WebGLFramebuffer?): Boolean\n    fun isProgram(program: WebGLProgram?): Boolean\n    fun isRenderbuffer(renderbuffer: WebGLRenderbuffer?): Boolean\n    fun isShader(shader: WebGLShader?): Boolean\n    fun isTexture(texture: WebGLTexture?): Boolean\n    fun lineWidth(width: Float): Unit\n    fun linkProgram(program: WebGLProgram?): Unit\n    fun pixelStorei(pname: Int, param: Int): Unit\n    fun polygonOffset(factor: Float, units: Float): Unit\n    fun readPixels(x: Int, y: Int, width: Int, height: Int, format: Int, type: Int, pixels: ArrayBufferView?): Unit\n    fun renderbufferStorage(target: Int, internalformat: Int, width: Int, height: Int): Unit\n    fun sampleCoverage(value: Float, invert: Boolean): Unit\n    fun scissor(x: Int, y: Int, width: Int, height: Int): Unit\n    fun shaderSource(shader: WebGLShader?, source: String): Unit\n    fun stencilFunc(func: Int, ref: Int, mask: Int): Unit\n    fun stencilFuncSeparate(face: Int, func: Int, ref: Int, mask: Int): Unit\n    fun stencilMask(mask: Int): Unit\n    fun stencilMaskSeparate(face: Int, mask: Int): Unit\n    fun stencilOp(fail: Int, zfail: Int, zpass: Int): Unit\n    fun stencilOpSeparate(face: Int, fail: Int, zfail: Int, zpass: Int): Unit\n    fun texImage2D(target: Int, level: Int, internalformat: Int, width: Int, height: Int, border: Int, format: Int, type: Int, pixels: ArrayBufferView?): Unit\n    fun texImage2D(target: Int, level: Int, internalformat: Int, format: Int, type: Int, source: TexImageSource?): Unit\n    fun texParameterf(target: Int, pname: Int, param: Float): Unit\n    fun texParameteri(target: Int, pname: Int, param: Int): Unit\n    fun texSubImage2D(target: Int, level: Int, xoffset: Int, yoffset: Int, width: Int, height: Int, format: Int, type: Int, pixels: ArrayBufferView?): Unit\n    fun texSubImage2D(target: Int, level: Int, xoffset: Int, yoffset: Int, format: Int, type: Int, source: TexImageSource?): Unit\n    fun uniform1f(location: WebGLUniformLocation?, x: Float): Unit\n    fun uniform1fv(location: WebGLUniformLocation?, v: Float32Array): Unit\n    fun uniform1fv(location: WebGLUniformLocation?, v: Array<Float>): Unit\n    fun uniform1i(location: WebGLUniformLocation?, x: Int): Unit\n    fun uniform1iv(location: WebGLUniformLocation?, v: Int32Array): Unit\n    fun uniform1iv(location: WebGLUniformLocation?, v: Array<Int>): Unit\n    fun uniform2f(location: WebGLUniformLocation?, x: Float, y: Float): Unit\n    fun uniform2fv(location: WebGLUniformLocation?, v: Float32Array): Unit\n    fun uniform2fv(location: WebGLUniformLocation?, v: Array<Float>): Unit\n    fun uniform2i(location: WebGLUniformLocation?, x: Int, y: Int): Unit\n    fun uniform2iv(location: WebGLUniformLocation?, v: Int32Array): Unit\n    fun uniform2iv(location: WebGLUniformLocation?, v: Array<Int>): Unit\n    fun uniform3f(location: WebGLUniformLocation?, x: Float, y: Float, z: Float): Unit\n    fun uniform3fv(location: WebGLUniformLocation?, v: Float32Array): Unit\n    fun uniform3fv(location: WebGLUniformLocation?, v: Array<Float>): Unit\n    fun uniform3i(location: WebGLUniformLocation?, x: Int, y: Int, z: Int): Unit\n    fun uniform3iv(location: WebGLUniformLocation?, v: Int32Array): Unit\n    fun uniform3iv(location: WebGLUniformLocation?, v: Array<Int>): Unit\n    fun uniform4f(location: WebGLUniformLocation?, x: Float, y: Float, z: Float, w: Float): Unit\n    fun uniform4fv(location: WebGLUniformLocation?, v: Float32Array): Unit\n    fun uniform4fv(location: WebGLUniformLocation?, v: Array<Float>): Unit\n    fun uniform4i(location: WebGLUniformLocation?, x: Int, y: Int, z: Int, w: Int): Unit\n    fun uniform4iv(location: WebGLUniformLocation?, v: Int32Array): Unit\n    fun uniform4iv(location: WebGLUniformLocation?, v: Array<Int>): Unit\n    fun uniformMatrix2fv(location: WebGLUniformLocation?, transpose: Boolean, value: Float32Array): Unit\n    fun uniformMatrix2fv(location: WebGLUniformLocation?, transpose: Boolean, value: Array<Float>): Unit\n    fun uniformMatrix3fv(location: WebGLUniformLocation?, transpose: Boolean, value: Float32Array): Unit\n    fun uniformMatrix3fv(location: WebGLUniformLocation?, transpose: Boolean, value: Array<Float>): Unit\n    fun uniformMatrix4fv(location: WebGLUniformLocation?, transpose: Boolean, value: Float32Array): Unit\n    fun uniformMatrix4fv(location: WebGLUniformLocation?, transpose: Boolean, value: Array<Float>): Unit\n    fun useProgram(program: WebGLProgram?): Unit\n    fun validateProgram(program: WebGLProgram?): Unit\n    fun vertexAttrib1f(index: Int, x: Float): Unit\n    fun vertexAttrib1fv(index: Int, values: dynamic): Unit\n    fun vertexAttrib2f(index: Int, x: Float, y: Float): Unit\n    fun vertexAttrib2fv(index: Int, values: dynamic): Unit\n    fun vertexAttrib3f(index: Int, x: Float, y: Float, z: Float): Unit\n    fun vertexAttrib3fv(index: Int, values: dynamic): Unit\n    fun vertexAttrib4f(index: Int, x: Float, y: Float, z: Float, w: Float): Unit\n    fun vertexAttrib4fv(index: Int, values: dynamic): Unit\n    fun vertexAttribPointer(index: Int, size: Int, type: Int, normalized: Boolean, stride: Int, offset: Int): Unit\n    fun viewport(x: Int, y: Int, width: Int, height: Int): Unit\n\n    companion object {\n        val DEPTH_BUFFER_BIT: Int\n        val STENCIL_BUFFER_BIT: Int\n        val COLOR_BUFFER_BIT: Int\n        val POINTS: Int\n        val LINES: Int\n        val LINE_LOOP: Int\n        val LINE_STRIP: Int\n        val TRIANGLES: Int\n        val TRIANGLE_STRIP: Int\n        val TRIANGLE_FAN: Int\n        val ZERO: Int\n        val ONE: Int\n        val SRC_COLOR: Int\n        val ONE_MINUS_SRC_COLOR: Int\n        val SRC_ALPHA: Int\n        val ONE_MINUS_SRC_ALPHA: Int\n        val DST_ALPHA: Int\n        val ONE_MINUS_DST_ALPHA: Int\n        val DST_COLOR: Int\n        val ONE_MINUS_DST_COLOR: Int\n        val SRC_ALPHA_SATURATE: Int\n        val FUNC_ADD: Int\n        val BLEND_EQUATION: Int\n        val BLEND_EQUATION_RGB: Int\n        val BLEND_EQUATION_ALPHA: Int\n        val FUNC_SUBTRACT: Int\n        val FUNC_REVERSE_SUBTRACT: Int\n        val BLEND_DST_RGB: Int\n        val BLEND_SRC_RGB: Int\n        val BLEND_DST_ALPHA: Int\n        val BLEND_SRC_ALPHA: Int\n        val CONSTANT_COLOR: Int\n        val ONE_MINUS_CONSTANT_COLOR: Int\n        val CONSTANT_ALPHA: Int\n        val ONE_MINUS_CONSTANT_ALPHA: Int\n        val BLEND_COLOR: Int\n        val ARRAY_BUFFER: Int\n        val ELEMENT_ARRAY_BUFFER: Int\n        val ARRAY_BUFFER_BINDING: Int\n        val ELEMENT_ARRAY_BUFFER_BINDING: Int\n        val STREAM_DRAW: Int\n        val STATIC_DRAW: Int\n        val DYNAMIC_DRAW: Int\n        val BUFFER_SIZE: Int\n        val BUFFER_USAGE: Int\n        val CURRENT_VERTEX_ATTRIB: Int\n        val FRONT: Int\n        val BACK: Int\n        val FRONT_AND_BACK: Int\n        val CULL_FACE: Int\n        val BLEND: Int\n        val DITHER: Int\n        val STENCIL_TEST: Int\n        val DEPTH_TEST: Int\n        val SCISSOR_TEST: Int\n        val POLYGON_OFFSET_FILL: Int\n        val SAMPLE_ALPHA_TO_COVERAGE: Int\n        val SAMPLE_COVERAGE: Int\n        val NO_ERROR: Int\n        val INVALID_ENUM: Int\n        val INVALID_VALUE: Int\n        val INVALID_OPERATION: Int\n        val OUT_OF_MEMORY: Int\n        val CW: Int\n        val CCW: Int\n        val LINE_WIDTH: Int\n        val ALIASED_POINT_SIZE_RANGE: Int\n        val ALIASED_LINE_WIDTH_RANGE: Int\n        val CULL_FACE_MODE: Int\n        val FRONT_FACE: Int\n        val DEPTH_RANGE: Int\n        val DEPTH_WRITEMASK: Int\n        val DEPTH_CLEAR_VALUE: Int\n        val DEPTH_FUNC: Int\n        val STENCIL_CLEAR_VALUE: Int\n        val STENCIL_FUNC: Int\n        val STENCIL_FAIL: Int\n        val STENCIL_PASS_DEPTH_FAIL: Int\n        val STENCIL_PASS_DEPTH_PASS: Int\n        val STENCIL_REF: Int\n        val STENCIL_VALUE_MASK: Int\n        val STENCIL_WRITEMASK: Int\n        val STENCIL_BACK_FUNC: Int\n        val STENCIL_BACK_FAIL: Int\n        val STENCIL_BACK_PASS_DEPTH_FAIL: Int\n        val STENCIL_BACK_PASS_DEPTH_PASS: Int\n        val STENCIL_BACK_REF: Int\n        val STENCIL_BACK_VALUE_MASK: Int\n        val STENCIL_BACK_WRITEMASK: Int\n        val VIEWPORT: Int\n        val SCISSOR_BOX: Int\n        val COLOR_CLEAR_VALUE: Int\n        val COLOR_WRITEMASK: Int\n        val UNPACK_ALIGNMENT: Int\n        val PACK_ALIGNMENT: Int\n        val MAX_TEXTURE_SIZE: Int\n        val MAX_VIEWPORT_DIMS: Int\n        val SUBPIXEL_BITS: Int\n        val RED_BITS: Int\n        val GREEN_BITS: Int\n        val BLUE_BITS: Int\n        val ALPHA_BITS: Int\n        val DEPTH_BITS: Int\n        val STENCIL_BITS: Int\n        val POLYGON_OFFSET_UNITS: Int\n        val POLYGON_OFFSET_FACTOR: Int\n        val TEXTURE_BINDING_2D: Int\n        val SAMPLE_BUFFERS: Int\n        val SAMPLES: Int\n        val SAMPLE_COVERAGE_VALUE: Int\n        val SAMPLE_COVERAGE_INVERT: Int\n        val COMPRESSED_TEXTURE_FORMATS: Int\n        val DONT_CARE: Int\n        val FASTEST: Int\n        val NICEST: Int\n        val GENERATE_MIPMAP_HINT: Int\n        val BYTE: Int\n        val UNSIGNED_BYTE: Int\n        val SHORT: Int\n        val UNSIGNED_SHORT: Int\n        val INT: Int\n        val UNSIGNED_INT: Int\n        val FLOAT: Int\n        val DEPTH_COMPONENT: Int\n        val ALPHA: Int\n        val RGB: Int\n        val RGBA: Int\n        val LUMINANCE: Int\n        val LUMINANCE_ALPHA: Int\n        val UNSIGNED_SHORT_4_4_4_4: Int\n        val UNSIGNED_SHORT_5_5_5_1: Int\n        val UNSIGNED_SHORT_5_6_5: Int\n        val FRAGMENT_SHADER: Int\n        val VERTEX_SHADER: Int\n        val MAX_VERTEX_ATTRIBS: Int\n        val MAX_VERTEX_UNIFORM_VECTORS: Int\n        val MAX_VARYING_VECTORS: Int\n        val MAX_COMBINED_TEXTURE_IMAGE_UNITS: Int\n        val MAX_VERTEX_TEXTURE_IMAGE_UNITS: Int\n        val MAX_TEXTURE_IMAGE_UNITS: Int\n        val MAX_FRAGMENT_UNIFORM_VECTORS: Int\n        val SHADER_TYPE: Int\n        val DELETE_STATUS: Int\n        val LINK_STATUS: Int\n        val VALIDATE_STATUS: Int\n        val ATTACHED_SHADERS: Int\n        val ACTIVE_UNIFORMS: Int\n        val ACTIVE_ATTRIBUTES: Int\n        val SHADING_LANGUAGE_VERSION: Int\n        val CURRENT_PROGRAM: Int\n        val NEVER: Int\n        val LESS: Int\n        val EQUAL: Int\n        val LEQUAL: Int\n        val GREATER: Int\n        val NOTEQUAL: Int\n        val GEQUAL: Int\n        val ALWAYS: Int\n        val KEEP: Int\n        val REPLACE: Int\n        val INCR: Int\n        val DECR: Int\n        val INVERT: Int\n        val INCR_WRAP: Int\n        val DECR_WRAP: Int\n        val VENDOR: Int\n        val RENDERER: Int\n        val VERSION: Int\n        val NEAREST: Int\n        val LINEAR: Int\n        val NEAREST_MIPMAP_NEAREST: Int\n        val LINEAR_MIPMAP_NEAREST: Int\n        val NEAREST_MIPMAP_LINEAR: Int\n        val LINEAR_MIPMAP_LINEAR: Int\n        val TEXTURE_MAG_FILTER: Int\n        val TEXTURE_MIN_FILTER: Int\n        val TEXTURE_WRAP_S: Int\n        val TEXTURE_WRAP_T: Int\n        val TEXTURE_2D: Int\n        val TEXTURE: Int\n        val TEXTURE_CUBE_MAP: Int\n        val TEXTURE_BINDING_CUBE_MAP: Int\n        val TEXTURE_CUBE_MAP_POSITIVE_X: Int\n        val TEXTURE_CUBE_MAP_NEGATIVE_X: Int\n        val TEXTURE_CUBE_MAP_POSITIVE_Y: Int\n        val TEXTURE_CUBE_MAP_NEGATIVE_Y: Int\n        val TEXTURE_CUBE_MAP_POSITIVE_Z: Int\n        val TEXTURE_CUBE_MAP_NEGATIVE_Z: Int\n        val MAX_CUBE_MAP_TEXTURE_SIZE: Int\n        val TEXTURE0: Int\n        val TEXTURE1: Int\n        val TEXTURE2: Int\n        val TEXTURE3: Int\n        val TEXTURE4: Int\n        val TEXTURE5: Int\n        val TEXTURE6: Int\n        val TEXTURE7: Int\n        val TEXTURE8: Int\n        val TEXTURE9: Int\n        val TEXTURE10: Int\n        val TEXTURE11: Int\n        val TEXTURE12: Int\n        val TEXTURE13: Int\n        val TEXTURE14: Int\n        val TEXTURE15: Int\n        val TEXTURE16: Int\n        val TEXTURE17: Int\n        val TEXTURE18: Int\n        val TEXTURE19: Int\n        val TEXTURE20: Int\n        val TEXTURE21: Int\n        val TEXTURE22: Int\n        val TEXTURE23: Int\n        val TEXTURE24: Int\n        val TEXTURE25: Int\n        val TEXTURE26: Int\n        val TEXTURE27: Int\n        val TEXTURE28: Int\n        val TEXTURE29: Int\n        val TEXTURE30: Int\n        val TEXTURE31: Int\n        val ACTIVE_TEXTURE: Int\n        val REPEAT: Int\n        val CLAMP_TO_EDGE: Int\n        val MIRRORED_REPEAT: Int\n        val FLOAT_VEC2: Int\n        val FLOAT_VEC3: Int\n        val FLOAT_VEC4: Int\n        val INT_VEC2: Int\n        val INT_VEC3: Int\n        val INT_VEC4: Int\n        val BOOL: Int\n        val BOOL_VEC2: Int\n        val BOOL_VEC3: Int\n        val BOOL_VEC4: Int\n        val FLOAT_MAT2: Int\n        val FLOAT_MAT3: Int\n        val FLOAT_MAT4: Int\n        val SAMPLER_2D: Int\n        val SAMPLER_CUBE: Int\n        val VERTEX_ATTRIB_ARRAY_ENABLED: Int\n        val VERTEX_ATTRIB_ARRAY_SIZE: Int\n        val VERTEX_ATTRIB_ARRAY_STRIDE: Int\n        val VERTEX_ATTRIB_ARRAY_TYPE: Int\n        val VERTEX_ATTRIB_ARRAY_NORMALIZED: Int\n        val VERTEX_ATTRIB_ARRAY_POINTER: Int\n        val VERTEX_ATTRIB_ARRAY_BUFFER_BINDING: Int\n        val IMPLEMENTATION_COLOR_READ_TYPE: Int\n        val IMPLEMENTATION_COLOR_READ_FORMAT: Int\n        val COMPILE_STATUS: Int\n        val LOW_FLOAT: Int\n        val MEDIUM_FLOAT: Int\n        val HIGH_FLOAT: Int\n        val LOW_INT: Int\n        val MEDIUM_INT: Int\n        val HIGH_INT: Int\n        val FRAMEBUFFER: Int\n        val RENDERBUFFER: Int\n        val RGBA4: Int\n        val RGB5_A1: Int\n        val RGB565: Int\n        val DEPTH_COMPONENT16: Int\n        val STENCIL_INDEX: Int\n        val STENCIL_INDEX8: Int\n        val DEPTH_STENCIL: Int\n        val RENDERBUFFER_WIDTH: Int\n        val RENDERBUFFER_HEIGHT: Int\n        val RENDERBUFFER_INTERNAL_FORMAT: Int\n        val RENDERBUFFER_RED_SIZE: Int\n        val RENDERBUFFER_GREEN_SIZE: Int\n        val RENDERBUFFER_BLUE_SIZE: Int\n        val RENDERBUFFER_ALPHA_SIZE: Int\n        val RENDERBUFFER_DEPTH_SIZE: Int\n        val RENDERBUFFER_STENCIL_SIZE: Int\n        val FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE: Int\n        val FRAMEBUFFER_ATTACHMENT_OBJECT_NAME: Int\n        val FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL: Int\n        val FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE: Int\n        val COLOR_ATTACHMENT0: Int\n        val DEPTH_ATTACHMENT: Int\n        val STENCIL_ATTACHMENT: Int\n        val DEPTH_STENCIL_ATTACHMENT: Int\n        val NONE: Int\n        val FRAMEBUFFER_COMPLETE: Int\n        val FRAMEBUFFER_INCOMPLETE_ATTACHMENT: Int\n        val FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT: Int\n        val FRAMEBUFFER_INCOMPLETE_DIMENSIONS: Int\n        val FRAMEBUFFER_UNSUPPORTED: Int\n        val FRAMEBUFFER_BINDING: Int\n        val RENDERBUFFER_BINDING: Int\n        val MAX_RENDERBUFFER_SIZE: Int\n        val INVALID_FRAMEBUFFER_OPERATION: Int\n        val UNPACK_FLIP_Y_WEBGL: Int\n        val UNPACK_PREMULTIPLY_ALPHA_WEBGL: Int\n        val CONTEXT_LOST_WEBGL: Int\n        val UNPACK_COLORSPACE_CONVERSION_WEBGL: Int\n        val BROWSER_DEFAULT_WEBGL: Int\n    }\n}\n\n/**\n * Exposes the JavaScript [WebGLRenderingContext](https://developer.mozilla.org/en/docs/Web/API/WebGLRenderingContext) to Kotlin\n */\npublic external abstract class WebGLRenderingContext : WebGLRenderingContextBase, RenderingContext {\n\n    companion object {\n        val DEPTH_BUFFER_BIT: Int\n        val STENCIL_BUFFER_BIT: Int\n        val COLOR_BUFFER_BIT: Int\n        val POINTS: Int\n        val LINES: Int\n        val LINE_LOOP: Int\n        val LINE_STRIP: Int\n        val TRIANGLES: Int\n        val TRIANGLE_STRIP: Int\n        val TRIANGLE_FAN: Int\n        val ZERO: Int\n        val ONE: Int\n        val SRC_COLOR: Int\n        val ONE_MINUS_SRC_COLOR: Int\n        val SRC_ALPHA: Int\n        val ONE_MINUS_SRC_ALPHA: Int\n        val DST_ALPHA: Int\n        val ONE_MINUS_DST_ALPHA: Int\n        val DST_COLOR: Int\n        val ONE_MINUS_DST_COLOR: Int\n        val SRC_ALPHA_SATURATE: Int\n        val FUNC_ADD: Int\n        val BLEND_EQUATION: Int\n        val BLEND_EQUATION_RGB: Int\n        val BLEND_EQUATION_ALPHA: Int\n        val FUNC_SUBTRACT: Int\n        val FUNC_REVERSE_SUBTRACT: Int\n        val BLEND_DST_RGB: Int\n        val BLEND_SRC_RGB: Int\n        val BLEND_DST_ALPHA: Int\n        val BLEND_SRC_ALPHA: Int\n        val CONSTANT_COLOR: Int\n        val ONE_MINUS_CONSTANT_COLOR: Int\n        val CONSTANT_ALPHA: Int\n        val ONE_MINUS_CONSTANT_ALPHA: Int\n        val BLEND_COLOR: Int\n        val ARRAY_BUFFER: Int\n        val ELEMENT_ARRAY_BUFFER: Int\n        val ARRAY_BUFFER_BINDING: Int\n        val ELEMENT_ARRAY_BUFFER_BINDING: Int\n        val STREAM_DRAW: Int\n        val STATIC_DRAW: Int\n        val DYNAMIC_DRAW: Int\n        val BUFFER_SIZE: Int\n        val BUFFER_USAGE: Int\n        val CURRENT_VERTEX_ATTRIB: Int\n        val FRONT: Int\n        val BACK: Int\n        val FRONT_AND_BACK: Int\n        val CULL_FACE: Int\n        val BLEND: Int\n        val DITHER: Int\n        val STENCIL_TEST: Int\n        val DEPTH_TEST: Int\n        val SCISSOR_TEST: Int\n        val POLYGON_OFFSET_FILL: Int\n        val SAMPLE_ALPHA_TO_COVERAGE: Int\n        val SAMPLE_COVERAGE: Int\n        val NO_ERROR: Int\n        val INVALID_ENUM: Int\n        val INVALID_VALUE: Int\n        val INVALID_OPERATION: Int\n        val OUT_OF_MEMORY: Int\n        val CW: Int\n        val CCW: Int\n        val LINE_WIDTH: Int\n        val ALIASED_POINT_SIZE_RANGE: Int\n        val ALIASED_LINE_WIDTH_RANGE: Int\n        val CULL_FACE_MODE: Int\n        val FRONT_FACE: Int\n        val DEPTH_RANGE: Int\n        val DEPTH_WRITEMASK: Int\n        val DEPTH_CLEAR_VALUE: Int\n        val DEPTH_FUNC: Int\n        val STENCIL_CLEAR_VALUE: Int\n        val STENCIL_FUNC: Int\n        val STENCIL_FAIL: Int\n        val STENCIL_PASS_DEPTH_FAIL: Int\n        val STENCIL_PASS_DEPTH_PASS: Int\n        val STENCIL_REF: Int\n        val STENCIL_VALUE_MASK: Int\n        val STENCIL_WRITEMASK: Int\n        val STENCIL_BACK_FUNC: Int\n        val STENCIL_BACK_FAIL: Int\n        val STENCIL_BACK_PASS_DEPTH_FAIL: Int\n        val STENCIL_BACK_PASS_DEPTH_PASS: Int\n        val STENCIL_BACK_REF: Int\n        val STENCIL_BACK_VALUE_MASK: Int\n        val STENCIL_BACK_WRITEMASK: Int\n        val VIEWPORT: Int\n        val SCISSOR_BOX: Int\n        val COLOR_CLEAR_VALUE: Int\n        val COLOR_WRITEMASK: Int\n        val UNPACK_ALIGNMENT: Int\n        val PACK_ALIGNMENT: Int\n        val MAX_TEXTURE_SIZE: Int\n        val MAX_VIEWPORT_DIMS: Int\n        val SUBPIXEL_BITS: Int\n        val RED_BITS: Int\n        val GREEN_BITS: Int\n        val BLUE_BITS: Int\n        val ALPHA_BITS: Int\n        val DEPTH_BITS: Int\n        val STENCIL_BITS: Int\n        val POLYGON_OFFSET_UNITS: Int\n        val POLYGON_OFFSET_FACTOR: Int\n        val TEXTURE_BINDING_2D: Int\n        val SAMPLE_BUFFERS: Int\n        val SAMPLES: Int\n        val SAMPLE_COVERAGE_VALUE: Int\n        val SAMPLE_COVERAGE_INVERT: Int\n        val COMPRESSED_TEXTURE_FORMATS: Int\n        val DONT_CARE: Int\n        val FASTEST: Int\n        val NICEST: Int\n        val GENERATE_MIPMAP_HINT: Int\n        val BYTE: Int\n        val UNSIGNED_BYTE: Int\n        val SHORT: Int\n        val UNSIGNED_SHORT: Int\n        val INT: Int\n        val UNSIGNED_INT: Int\n        val FLOAT: Int\n        val DEPTH_COMPONENT: Int\n        val ALPHA: Int\n        val RGB: Int\n        val RGBA: Int\n        val LUMINANCE: Int\n        val LUMINANCE_ALPHA: Int\n        val UNSIGNED_SHORT_4_4_4_4: Int\n        val UNSIGNED_SHORT_5_5_5_1: Int\n        val UNSIGNED_SHORT_5_6_5: Int\n        val FRAGMENT_SHADER: Int\n        val VERTEX_SHADER: Int\n        val MAX_VERTEX_ATTRIBS: Int\n        val MAX_VERTEX_UNIFORM_VECTORS: Int\n        val MAX_VARYING_VECTORS: Int\n        val MAX_COMBINED_TEXTURE_IMAGE_UNITS: Int\n        val MAX_VERTEX_TEXTURE_IMAGE_UNITS: Int\n        val MAX_TEXTURE_IMAGE_UNITS: Int\n        val MAX_FRAGMENT_UNIFORM_VECTORS: Int\n        val SHADER_TYPE: Int\n        val DELETE_STATUS: Int\n        val LINK_STATUS: Int\n        val VALIDATE_STATUS: Int\n        val ATTACHED_SHADERS: Int\n        val ACTIVE_UNIFORMS: Int\n        val ACTIVE_ATTRIBUTES: Int\n        val SHADING_LANGUAGE_VERSION: Int\n        val CURRENT_PROGRAM: Int\n        val NEVER: Int\n        val LESS: Int\n        val EQUAL: Int\n        val LEQUAL: Int\n        val GREATER: Int\n        val NOTEQUAL: Int\n        val GEQUAL: Int\n        val ALWAYS: Int\n        val KEEP: Int\n        val REPLACE: Int\n        val INCR: Int\n        val DECR: Int\n        val INVERT: Int\n        val INCR_WRAP: Int\n        val DECR_WRAP: Int\n        val VENDOR: Int\n        val RENDERER: Int\n        val VERSION: Int\n        val NEAREST: Int\n        val LINEAR: Int\n        val NEAREST_MIPMAP_NEAREST: Int\n        val LINEAR_MIPMAP_NEAREST: Int\n        val NEAREST_MIPMAP_LINEAR: Int\n        val LINEAR_MIPMAP_LINEAR: Int\n        val TEXTURE_MAG_FILTER: Int\n        val TEXTURE_MIN_FILTER: Int\n        val TEXTURE_WRAP_S: Int\n        val TEXTURE_WRAP_T: Int\n        val TEXTURE_2D: Int\n        val TEXTURE: Int\n        val TEXTURE_CUBE_MAP: Int\n        val TEXTURE_BINDING_CUBE_MAP: Int\n        val TEXTURE_CUBE_MAP_POSITIVE_X: Int\n        val TEXTURE_CUBE_MAP_NEGATIVE_X: Int\n        val TEXTURE_CUBE_MAP_POSITIVE_Y: Int\n        val TEXTURE_CUBE_MAP_NEGATIVE_Y: Int\n        val TEXTURE_CUBE_MAP_POSITIVE_Z: Int\n        val TEXTURE_CUBE_MAP_NEGATIVE_Z: Int\n        val MAX_CUBE_MAP_TEXTURE_SIZE: Int\n        val TEXTURE0: Int\n        val TEXTURE1: Int\n        val TEXTURE2: Int\n        val TEXTURE3: Int\n        val TEXTURE4: Int\n        val TEXTURE5: Int\n        val TEXTURE6: Int\n        val TEXTURE7: Int\n        val TEXTURE8: Int\n        val TEXTURE9: Int\n        val TEXTURE10: Int\n        val TEXTURE11: Int\n        val TEXTURE12: Int\n        val TEXTURE13: Int\n        val TEXTURE14: Int\n        val TEXTURE15: Int\n        val TEXTURE16: Int\n        val TEXTURE17: Int\n        val TEXTURE18: Int\n        val TEXTURE19: Int\n        val TEXTURE20: Int\n        val TEXTURE21: Int\n        val TEXTURE22: Int\n        val TEXTURE23: Int\n        val TEXTURE24: Int\n        val TEXTURE25: Int\n        val TEXTURE26: Int\n        val TEXTURE27: Int\n        val TEXTURE28: Int\n        val TEXTURE29: Int\n        val TEXTURE30: Int\n        val TEXTURE31: Int\n        val ACTIVE_TEXTURE: Int\n        val REPEAT: Int\n        val CLAMP_TO_EDGE: Int\n        val MIRRORED_REPEAT: Int\n        val FLOAT_VEC2: Int\n        val FLOAT_VEC3: Int\n        val FLOAT_VEC4: Int\n        val INT_VEC2: Int\n        val INT_VEC3: Int\n        val INT_VEC4: Int\n        val BOOL: Int\n        val BOOL_VEC2: Int\n        val BOOL_VEC3: Int\n        val BOOL_VEC4: Int\n        val FLOAT_MAT2: Int\n        val FLOAT_MAT3: Int\n        val FLOAT_MAT4: Int\n        val SAMPLER_2D: Int\n        val SAMPLER_CUBE: Int\n        val VERTEX_ATTRIB_ARRAY_ENABLED: Int\n        val VERTEX_ATTRIB_ARRAY_SIZE: Int\n        val VERTEX_ATTRIB_ARRAY_STRIDE: Int\n        val VERTEX_ATTRIB_ARRAY_TYPE: Int\n        val VERTEX_ATTRIB_ARRAY_NORMALIZED: Int\n        val VERTEX_ATTRIB_ARRAY_POINTER: Int\n        val VERTEX_ATTRIB_ARRAY_BUFFER_BINDING: Int\n        val IMPLEMENTATION_COLOR_READ_TYPE: Int\n        val IMPLEMENTATION_COLOR_READ_FORMAT: Int\n        val COMPILE_STATUS: Int\n        val LOW_FLOAT: Int\n        val MEDIUM_FLOAT: Int\n        val HIGH_FLOAT: Int\n        val LOW_INT: Int\n        val MEDIUM_INT: Int\n        val HIGH_INT: Int\n        val FRAMEBUFFER: Int\n        val RENDERBUFFER: Int\n        val RGBA4: Int\n        val RGB5_A1: Int\n        val RGB565: Int\n        val DEPTH_COMPONENT16: Int\n        val STENCIL_INDEX: Int\n        val STENCIL_INDEX8: Int\n        val DEPTH_STENCIL: Int\n        val RENDERBUFFER_WIDTH: Int\n        val RENDERBUFFER_HEIGHT: Int\n        val RENDERBUFFER_INTERNAL_FORMAT: Int\n        val RENDERBUFFER_RED_SIZE: Int\n        val RENDERBUFFER_GREEN_SIZE: Int\n        val RENDERBUFFER_BLUE_SIZE: Int\n        val RENDERBUFFER_ALPHA_SIZE: Int\n        val RENDERBUFFER_DEPTH_SIZE: Int\n        val RENDERBUFFER_STENCIL_SIZE: Int\n        val FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE: Int\n        val FRAMEBUFFER_ATTACHMENT_OBJECT_NAME: Int\n        val FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL: Int\n        val FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE: Int\n        val COLOR_ATTACHMENT0: Int\n        val DEPTH_ATTACHMENT: Int\n        val STENCIL_ATTACHMENT: Int\n        val DEPTH_STENCIL_ATTACHMENT: Int\n        val NONE: Int\n        val FRAMEBUFFER_COMPLETE: Int\n        val FRAMEBUFFER_INCOMPLETE_ATTACHMENT: Int\n        val FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT: Int\n        val FRAMEBUFFER_INCOMPLETE_DIMENSIONS: Int\n        val FRAMEBUFFER_UNSUPPORTED: Int\n        val FRAMEBUFFER_BINDING: Int\n        val RENDERBUFFER_BINDING: Int\n        val MAX_RENDERBUFFER_SIZE: Int\n        val INVALID_FRAMEBUFFER_OPERATION: Int\n        val UNPACK_FLIP_Y_WEBGL: Int\n        val UNPACK_PREMULTIPLY_ALPHA_WEBGL: Int\n        val CONTEXT_LOST_WEBGL: Int\n        val UNPACK_COLORSPACE_CONVERSION_WEBGL: Int\n        val BROWSER_DEFAULT_WEBGL: Int\n    }\n}\n\n/**\n * Exposes the JavaScript [WebGLContextEvent](https://developer.mozilla.org/en/docs/Web/API/WebGLContextEvent) to Kotlin\n */\npublic external open class WebGLContextEvent(type: String, eventInit: WebGLContextEventInit = definedExternally) : Event {\n    open val statusMessage: String\n}\n\npublic external interface WebGLContextEventInit : EventInit {\n    var statusMessage: String? /* = \"\" */\n        get() = definedExternally\n        set(value) = definedExternally\n}\n\n@kotlin.internal.InlineOnly\npublic inline fun WebGLContextEventInit(statusMessage: String? = \"\", bubbles: Boolean? = false, cancelable: Boolean? = false, composed: Boolean? = false): WebGLContextEventInit {\n    val o = js(\"({})\")\n\n    o[\"statusMessage\"] = statusMessage\n    o[\"bubbles\"] = bubbles\n    o[\"cancelable\"] = cancelable\n    o[\"composed\"] = composed\n\n    return o\n}\n\n/**\n * Exposes the JavaScript [ArrayBuffer](https://developer.mozilla.org/en/docs/Web/API/ArrayBuffer) to Kotlin\n */\npublic external open class ArrayBuffer(length: Int) : BufferDataSource {\n    open val byteLength: Int\n    fun slice(begin: Int, end: Int = definedExternally): ArrayBuffer\n\n    companion object {\n        fun isView(value: Any?): Boolean\n    }\n}\n\n/**\n * Exposes the JavaScript [ArrayBufferView](https://developer.mozilla.org/en/docs/Web/API/ArrayBufferView) to Kotlin\n */\npublic external interface ArrayBufferView : BufferDataSource {\n    val buffer: ArrayBuffer\n    val byteOffset: Int\n    val byteLength: Int\n}\n\n/**\n * Exposes the JavaScript [Int8Array](https://developer.mozilla.org/en/docs/Web/API/Int8Array) to Kotlin\n */\npublic external open class Int8Array : ArrayBufferView {\n    constructor(length: Int)\n    constructor(array: Int8Array)\n    constructor(array: Array<Byte>)\n    constructor(buffer: ArrayBuffer, byteOffset: Int = definedExternally, length: Int = definedExternally)\n    open val length: Int\n    override val buffer: ArrayBuffer\n    override val byteOffset: Int\n    override val byteLength: Int\n    fun set(array: Int8Array, offset: Int = definedExternally): Unit\n    fun set(array: Array<Byte>, offset: Int = definedExternally): Unit\n    fun subarray(start: Int, end: Int): Int8Array\n\n    companion object {\n        val BYTES_PER_ELEMENT: Int\n    }\n}\n@kotlin.internal.InlineOnly inline operator fun Int8Array.get(index: Int): Byte = asDynamic()[index]\n@kotlin.internal.InlineOnly inline operator fun Int8Array.set(index: Int, value: Byte): Unit { asDynamic()[index] = value; }\n\n/**\n * Exposes the JavaScript [Uint8Array](https://developer.mozilla.org/en/docs/Web/API/Uint8Array) to Kotlin\n */\npublic external open class Uint8Array : ArrayBufferView {\n    constructor(length: Int)\n    constructor(array: Uint8Array)\n    constructor(array: Array<Byte>)\n    constructor(buffer: ArrayBuffer, byteOffset: Int = definedExternally, length: Int = definedExternally)\n    open val length: Int\n    override val buffer: ArrayBuffer\n    override val byteOffset: Int\n    override val byteLength: Int\n    fun set(array: Uint8Array, offset: Int = definedExternally): Unit\n    fun set(array: Array<Byte>, offset: Int = definedExternally): Unit\n    fun subarray(start: Int, end: Int): Uint8Array\n\n    companion object {\n        val BYTES_PER_ELEMENT: Int\n    }\n}\n@kotlin.internal.InlineOnly inline operator fun Uint8Array.get(index: Int): Byte = asDynamic()[index]\n@kotlin.internal.InlineOnly inline operator fun Uint8Array.set(index: Int, value: Byte): Unit { asDynamic()[index] = value; }\n\n/**\n * Exposes the JavaScript [Uint8ClampedArray](https://developer.mozilla.org/en/docs/Web/API/Uint8ClampedArray) to Kotlin\n */\npublic external open class Uint8ClampedArray : ArrayBufferView {\n    constructor(length: Int)\n    constructor(array: Uint8ClampedArray)\n    constructor(array: Array<Byte>)\n    constructor(buffer: ArrayBuffer, byteOffset: Int = definedExternally, length: Int = definedExternally)\n    open val length: Int\n    override val buffer: ArrayBuffer\n    override val byteOffset: Int\n    override val byteLength: Int\n    fun set(array: Uint8ClampedArray, offset: Int = definedExternally): Unit\n    fun set(array: Array<Byte>, offset: Int = definedExternally): Unit\n    fun subarray(start: Int, end: Int): Uint8ClampedArray\n\n    companion object {\n        val BYTES_PER_ELEMENT: Int\n    }\n}\n@kotlin.internal.InlineOnly inline operator fun Uint8ClampedArray.get(index: Int): Byte = asDynamic()[index]\n@kotlin.internal.InlineOnly inline operator fun Uint8ClampedArray.set(index: Int, value: Byte): Unit { asDynamic()[index] = value; }\n\n/**\n * Exposes the JavaScript [Int16Array](https://developer.mozilla.org/en/docs/Web/API/Int16Array) to Kotlin\n */\npublic external open class Int16Array : ArrayBufferView {\n    constructor(length: Int)\n    constructor(array: Int16Array)\n    constructor(array: Array<Short>)\n    constructor(buffer: ArrayBuffer, byteOffset: Int = definedExternally, length: Int = definedExternally)\n    open val length: Int\n    override val buffer: ArrayBuffer\n    override val byteOffset: Int\n    override val byteLength: Int\n    fun set(array: Int16Array, offset: Int = definedExternally): Unit\n    fun set(array: Array<Short>, offset: Int = definedExternally): Unit\n    fun subarray(start: Int, end: Int): Int16Array\n\n    companion object {\n        val BYTES_PER_ELEMENT: Int\n    }\n}\n@kotlin.internal.InlineOnly inline operator fun Int16Array.get(index: Int): Short = asDynamic()[index]\n@kotlin.internal.InlineOnly inline operator fun Int16Array.set(index: Int, value: Short): Unit { asDynamic()[index] = value; }\n\n/**\n * Exposes the JavaScript [Uint16Array](https://developer.mozilla.org/en/docs/Web/API/Uint16Array) to Kotlin\n */\npublic external open class Uint16Array : ArrayBufferView {\n    constructor(length: Int)\n    constructor(array: Uint16Array)\n    constructor(array: Array<Short>)\n    constructor(buffer: ArrayBuffer, byteOffset: Int = definedExternally, length: Int = definedExternally)\n    open val length: Int\n    override val buffer: ArrayBuffer\n    override val byteOffset: Int\n    override val byteLength: Int\n    fun set(array: Uint16Array, offset: Int = definedExternally): Unit\n    fun set(array: Array<Short>, offset: Int = definedExternally): Unit\n    fun subarray(start: Int, end: Int): Uint16Array\n\n    companion object {\n        val BYTES_PER_ELEMENT: Int\n    }\n}\n@kotlin.internal.InlineOnly inline operator fun Uint16Array.get(index: Int): Short = asDynamic()[index]\n@kotlin.internal.InlineOnly inline operator fun Uint16Array.set(index: Int, value: Short): Unit { asDynamic()[index] = value; }\n\n/**\n * Exposes the JavaScript [Int32Array](https://developer.mozilla.org/en/docs/Web/API/Int32Array) to Kotlin\n */\npublic external open class Int32Array : ArrayBufferView {\n    constructor(length: Int)\n    constructor(array: Int32Array)\n    constructor(array: Array<Int>)\n    constructor(buffer: ArrayBuffer, byteOffset: Int = definedExternally, length: Int = definedExternally)\n    open val length: Int\n    override val buffer: ArrayBuffer\n    override val byteOffset: Int\n    override val byteLength: Int\n    fun set(array: Int32Array, offset: Int = definedExternally): Unit\n    fun set(array: Array<Int>, offset: Int = definedExternally): Unit\n    fun subarray(start: Int, end: Int): Int32Array\n\n    companion object {\n        val BYTES_PER_ELEMENT: Int\n    }\n}\n@kotlin.internal.InlineOnly inline operator fun Int32Array.get(index: Int): Int = asDynamic()[index]\n@kotlin.internal.InlineOnly inline operator fun Int32Array.set(index: Int, value: Int): Unit { asDynamic()[index] = value; }\n\n/**\n * Exposes the JavaScript [Uint32Array](https://developer.mozilla.org/en/docs/Web/API/Uint32Array) to Kotlin\n */\npublic external open class Uint32Array : ArrayBufferView {\n    constructor(length: Int)\n    constructor(array: Uint32Array)\n    constructor(array: Array<Int>)\n    constructor(buffer: ArrayBuffer, byteOffset: Int = definedExternally, length: Int = definedExternally)\n    open val length: Int\n    override val buffer: ArrayBuffer\n    override val byteOffset: Int\n    override val byteLength: Int\n    fun set(array: Uint32Array, offset: Int = definedExternally): Unit\n    fun set(array: Array<Int>, offset: Int = definedExternally): Unit\n    fun subarray(start: Int, end: Int): Uint32Array\n\n    companion object {\n        val BYTES_PER_ELEMENT: Int\n    }\n}\n@kotlin.internal.InlineOnly inline operator fun Uint32Array.get(index: Int): Int = asDynamic()[index]\n@kotlin.internal.InlineOnly inline operator fun Uint32Array.set(index: Int, value: Int): Unit { asDynamic()[index] = value; }\n\n/**\n * Exposes the JavaScript [Float32Array](https://developer.mozilla.org/en/docs/Web/API/Float32Array) to Kotlin\n */\npublic external open class Float32Array : ArrayBufferView {\n    constructor(length: Int)\n    constructor(array: Float32Array)\n    constructor(array: Array<Float>)\n    constructor(buffer: ArrayBuffer, byteOffset: Int = definedExternally, length: Int = definedExternally)\n    open val length: Int\n    override val buffer: ArrayBuffer\n    override val byteOffset: Int\n    override val byteLength: Int\n    fun set(array: Float32Array, offset: Int = definedExternally): Unit\n    fun set(array: Array<Float>, offset: Int = definedExternally): Unit\n    fun subarray(start: Int, end: Int): Float32Array\n\n    companion object {\n        val BYTES_PER_ELEMENT: Int\n    }\n}\n@kotlin.internal.InlineOnly inline operator fun Float32Array.get(index: Int): Float = asDynamic()[index]\n@kotlin.internal.InlineOnly inline operator fun Float32Array.set(index: Int, value: Float): Unit { asDynamic()[index] = value; }\n\n/**\n * Exposes the JavaScript [Float64Array](https://developer.mozilla.org/en/docs/Web/API/Float64Array) to Kotlin\n */\npublic external open class Float64Array : ArrayBufferView {\n    constructor(length: Int)\n    constructor(array: Float64Array)\n    constructor(array: Array<Double>)\n    constructor(buffer: ArrayBuffer, byteOffset: Int = definedExternally, length: Int = definedExternally)\n    open val length: Int\n    override val buffer: ArrayBuffer\n    override val byteOffset: Int\n    override val byteLength: Int\n    fun set(array: Float64Array, offset: Int = definedExternally): Unit\n    fun set(array: Array<Double>, offset: Int = definedExternally): Unit\n    fun subarray(start: Int, end: Int): Float64Array\n\n    companion object {\n        val BYTES_PER_ELEMENT: Int\n    }\n}\n@kotlin.internal.InlineOnly inline operator fun Float64Array.get(index: Int): Double = asDynamic()[index]\n@kotlin.internal.InlineOnly inline operator fun Float64Array.set(index: Int, value: Double): Unit { asDynamic()[index] = value; }\n\n/**\n * Exposes the JavaScript [DataView](https://developer.mozilla.org/en/docs/Web/API/DataView) to Kotlin\n */\npublic external open class DataView(buffer: ArrayBuffer, byteOffset: Int = definedExternally, byteLength: Int = definedExternally) : ArrayBufferView {\n    override val buffer: ArrayBuffer\n    override val byteOffset: Int\n    override val byteLength: Int\n    fun getInt8(byteOffset: Int): Byte\n    fun getUint8(byteOffset: Int): Byte\n    fun getInt16(byteOffset: Int, littleEndian: Boolean = definedExternally): Short\n    fun getUint16(byteOffset: Int, littleEndian: Boolean = definedExternally): Short\n    fun getInt32(byteOffset: Int, littleEndian: Boolean = definedExternally): Int\n    fun getUint32(byteOffset: Int, littleEndian: Boolean = definedExternally): Int\n    fun getFloat32(byteOffset: Int, littleEndian: Boolean = definedExternally): Float\n    fun getFloat64(byteOffset: Int, littleEndian: Boolean = definedExternally): Double\n    fun setInt8(byteOffset: Int, value: Byte): Unit\n    fun setUint8(byteOffset: Int, value: Byte): Unit\n    fun setInt16(byteOffset: Int, value: Short, littleEndian: Boolean = definedExternally): Unit\n    fun setUint16(byteOffset: Int, value: Short, littleEndian: Boolean = definedExternally): Unit\n    fun setInt32(byteOffset: Int, value: Int, littleEndian: Boolean = definedExternally): Unit\n    fun setUint32(byteOffset: Int, value: Int, littleEndian: Boolean = definedExternally): Unit\n    fun setFloat32(byteOffset: Int, value: Float, littleEndian: Boolean = definedExternally): Unit\n    fun setFloat64(byteOffset: Int, value: Double, littleEndian: Boolean = definedExternally): Unit\n}\n\npublic external @marker interface BufferDataSource {\n}\n\npublic external @marker interface TexImageSource {\n}\n\n","@file:kotlin.jvm.JvmMultifileClass\n@file:kotlin.jvm.JvmName(\"PreconditionsKt\")\npackage kotlin\n\nimport kotlin.internal.contracts.*\n\n/**\n * Throws an [IllegalArgumentException] if the [value] is false.\n *\n * @sample samples.misc.Preconditions.failRequireWithLazyMessage\n */\n@kotlin.internal.InlineOnly\npublic inline fun require(value: Boolean): Unit {\n    contract {\n        returns() implies value\n    }\n    require(value) { \"Failed requirement.\" }\n}\n\n/**\n * Throws an [IllegalArgumentException] with the result of calling [lazyMessage] if the [value] is false.\n *\n * @sample samples.misc.Preconditions.failRequireWithLazyMessage\n */\n@kotlin.internal.InlineOnly\npublic inline fun require(value: Boolean, lazyMessage: () -> Any): Unit {\n    contract {\n        returns() implies value\n    }\n    if (!value) {\n        val message = lazyMessage()\n        throw IllegalArgumentException(message.toString())\n    }\n}\n\n/**\n * Throws an [IllegalArgumentException] if the [value] is null. Otherwise returns the not null value.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T:Any> requireNotNull(value: T?): T {\n    contract {\n        returns() implies (value != null)\n    }\n    return requireNotNull(value) { \"Required value was null.\" }\n}\n\n/**\n * Throws an [IllegalArgumentException] with the result of calling [lazyMessage] if the [value] is null. Otherwise\n * returns the not null value.\n *\n * @sample samples.misc.Preconditions.failRequireWithLazyMessage\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T:Any> requireNotNull(value: T?, lazyMessage: () -> Any): T {\n    contract {\n        returns() implies (value != null)\n    }\n\n    if (value == null) {\n        val message = lazyMessage()\n        throw IllegalArgumentException(message.toString())\n    } else {\n        return value\n    }\n}\n\n/**\n * Throws an [IllegalStateException] if the [value] is false.\n *\n * @sample samples.misc.Preconditions.failCheckWithLazyMessage\n */\n@kotlin.internal.InlineOnly\npublic inline fun check(value: Boolean): Unit {\n    contract {\n        returns() implies value\n    }\n    check(value) { \"Check failed.\" }\n}\n\n/**\n * Throws an [IllegalStateException] with the result of calling [lazyMessage] if the [value] is false.\n *\n * @sample samples.misc.Preconditions.failCheckWithLazyMessage\n */\n@kotlin.internal.InlineOnly\npublic inline fun check(value: Boolean, lazyMessage: () -> Any): Unit {\n    contract {\n        returns() implies value\n    }\n    if (!value) {\n        val message = lazyMessage()\n        throw IllegalStateException(message.toString())\n    }\n}\n\n/**\n * Throws an [IllegalStateException] if the [value] is null. Otherwise\n * returns the not null value.\n *\n * @sample samples.misc.Preconditions.failCheckWithLazyMessage\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T:Any> checkNotNull(value: T?): T = checkNotNull(value) { \"Required value was null.\" }\n\n/**\n * Throws an [IllegalStateException] with the result of calling [lazyMessage]  if the [value] is null. Otherwise\n * returns the not null value.\n *\n * @sample samples.misc.Preconditions.failCheckWithLazyMessage\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T:Any> checkNotNull(value: T?, lazyMessage: () -> Any): T {\n    contract {\n        returns() implies (value != null)\n    }\n\n    if (value == null) {\n        val message = lazyMessage()\n        throw IllegalStateException(message.toString())\n    } else {\n        return value\n    }\n}\n\n\n/**\n * Throws an [IllegalStateException] with the given [message].\n *\n * @sample samples.misc.Preconditions.failWithError\n */\n@kotlin.internal.InlineOnly\npublic inline fun error(message: Any): Nothing = throw IllegalStateException(message.toString())\n",null,"@file:kotlin.jvm.JvmMultifileClass\n@file:kotlin.jvm.JvmName(\"ComparisonsKt\")\n\npackage kotlin.comparisons\n\n//\n// NOTE THIS FILE IS AUTO-GENERATED by the GenerateStandardLib.kt\n// See: https://github.com/JetBrains/kotlin/tree/master/libraries/stdlib\n//\n\nimport kotlin.js.*\nimport kotlin.comparisons.*\n\n/**\n * Returns the greater of two values.\n * If values are equal, returns the first one.\n */\n@SinceKotlin(\"1.1\")\npublic fun <T: Comparable<T>> maxOf(a: T, b: T): T {\n    return if (a >= b) a else b\n}\n\n/**\n * Returns the greater of two values.\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic inline fun maxOf(a: Byte, b: Byte): Byte {\n    return Math.max(a.toInt(), b.toInt()).unsafeCast<Byte>()\n}\n\n/**\n * Returns the greater of two values.\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic inline fun maxOf(a: Short, b: Short): Short {\n    return Math.max(a.toInt(), b.toInt()).unsafeCast<Short>()\n}\n\n/**\n * Returns the greater of two values.\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic inline fun maxOf(a: Int, b: Int): Int {\n    return Math.max(a, b)\n}\n\n/**\n * Returns the greater of two values.\n */\n@SinceKotlin(\"1.1\")\n@Suppress(\"NOTHING_TO_INLINE\")\npublic inline fun maxOf(a: Long, b: Long): Long {\n    return if (a >= b) a else b\n}\n\n/**\n * Returns the greater of two values.\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic inline fun maxOf(a: Float, b: Float): Float {\n    return Math.max(a, b)\n}\n\n/**\n * Returns the greater of two values.\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic inline fun maxOf(a: Double, b: Double): Double {\n    return Math.max(a, b)\n}\n\n/**\n * Returns the greater of three values.\n */\n@SinceKotlin(\"1.1\")\npublic fun <T: Comparable<T>> maxOf(a: T, b: T, c: T): T {\n    return maxOf(a, maxOf(b, c))\n}\n\n/**\n * Returns the greater of three values.\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic inline fun maxOf(a: Byte, b: Byte, c: Byte): Byte {\n    return Math.max(a.toInt(), b.toInt(), c.toInt()).unsafeCast<Byte>()\n}\n\n/**\n * Returns the greater of three values.\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic inline fun maxOf(a: Short, b: Short, c: Short): Short {\n    return Math.max(a.toInt(), b.toInt(), c.toInt()).unsafeCast<Short>()\n}\n\n/**\n * Returns the greater of three values.\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic inline fun maxOf(a: Int, b: Int, c: Int): Int {\n    return Math.max(a, b, c)\n}\n\n/**\n * Returns the greater of three values.\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic inline fun maxOf(a: Long, b: Long, c: Long): Long {\n    return maxOf(a, maxOf(b, c))\n}\n\n/**\n * Returns the greater of three values.\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic inline fun maxOf(a: Float, b: Float, c: Float): Float {\n    return Math.max(a, b, c)\n}\n\n/**\n * Returns the greater of three values.\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic inline fun maxOf(a: Double, b: Double, c: Double): Double {\n    return Math.max(a, b, c)\n}\n\n/**\n * Returns the greater of three values according to the order specified by the given [comparator].\n */\n@SinceKotlin(\"1.1\")\npublic fun <T> maxOf(a: T, b: T, c: T, comparator: Comparator<in T>): T {\n    return maxOf(a, maxOf(b, c, comparator), comparator)\n}\n\n/**\n * Returns the greater of two values according to the order specified by the given [comparator].\n * If values are equal, returns the first one.\n */\n@SinceKotlin(\"1.1\")\npublic fun <T> maxOf(a: T, b: T, comparator: Comparator<in T>): T {\n    return if (comparator.compare(a, b) >= 0) a else b\n}\n\n/**\n * Returns the smaller of two values.\n * If values are equal, returns the first one.\n */\n@SinceKotlin(\"1.1\")\npublic fun <T: Comparable<T>> minOf(a: T, b: T): T {\n    return if (a <= b) a else b\n}\n\n/**\n * Returns the smaller of two values.\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic inline fun minOf(a: Byte, b: Byte): Byte {\n    return Math.min(a.toInt(), b.toInt()).unsafeCast<Byte>()\n}\n\n/**\n * Returns the smaller of two values.\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic inline fun minOf(a: Short, b: Short): Short {\n    return Math.min(a.toInt(), b.toInt()).unsafeCast<Short>()\n}\n\n/**\n * Returns the smaller of two values.\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic inline fun minOf(a: Int, b: Int): Int {\n    return Math.min(a, b)\n}\n\n/**\n * Returns the smaller of two values.\n */\n@SinceKotlin(\"1.1\")\n@Suppress(\"NOTHING_TO_INLINE\")\npublic inline fun minOf(a: Long, b: Long): Long {\n    return if (a <= b) a else b\n}\n\n/**\n * Returns the smaller of two values.\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic inline fun minOf(a: Float, b: Float): Float {\n    return Math.min(a, b)\n}\n\n/**\n * Returns the smaller of two values.\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic inline fun minOf(a: Double, b: Double): Double {\n    return Math.min(a, b)\n}\n\n/**\n * Returns the smaller of three values.\n */\n@SinceKotlin(\"1.1\")\npublic fun <T: Comparable<T>> minOf(a: T, b: T, c: T): T {\n    return minOf(a, minOf(b, c))\n}\n\n/**\n * Returns the smaller of three values.\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic inline fun minOf(a: Byte, b: Byte, c: Byte): Byte {\n    return Math.min(a.toInt(), b.toInt(), c.toInt()).unsafeCast<Byte>()\n}\n\n/**\n * Returns the smaller of three values.\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic inline fun minOf(a: Short, b: Short, c: Short): Short {\n    return Math.min(a.toInt(), b.toInt(), c.toInt()).unsafeCast<Short>()\n}\n\n/**\n * Returns the smaller of three values.\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic inline fun minOf(a: Int, b: Int, c: Int): Int {\n    return Math.min(a, b, c)\n}\n\n/**\n * Returns the smaller of three values.\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic inline fun minOf(a: Long, b: Long, c: Long): Long {\n    return minOf(a, minOf(b, c))\n}\n\n/**\n * Returns the smaller of three values.\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic inline fun minOf(a: Float, b: Float, c: Float): Float {\n    return Math.min(a, b, c)\n}\n\n/**\n * Returns the smaller of three values.\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic inline fun minOf(a: Double, b: Double, c: Double): Double {\n    return Math.min(a, b, c)\n}\n\n/**\n * Returns the smaller of three values according to the order specified by the given [comparator].\n */\n@SinceKotlin(\"1.1\")\npublic fun <T> minOf(a: T, b: T, c: T, comparator: Comparator<in T>): T {\n    return minOf(a, minOf(b, c, comparator), comparator)\n}\n\n/**\n * Returns the smaller of two values according to the order specified by the given [comparator].\n * If values are equal, returns the first one.\n */\n@SinceKotlin(\"1.1\")\npublic fun <T> minOf(a: T, b: T, comparator: Comparator<in T>): T {\n    return if (comparator.compare(a, b) <= 0) a else b\n}\n\n",null,null,null,null,null,null,"/*\n * Generated file\n * DO NOT EDIT\n * \n * See libraries/tools/idl2k for details\n */\n\n@file:Suppress(\"NESTED_CLASS_IN_EXTERNAL_INTERFACE\")\npackage org.w3c.xhr\n\nimport kotlin.js.*\nimport org.khronos.webgl.*\nimport org.w3c.dom.*\nimport org.w3c.dom.css.*\nimport org.w3c.dom.events.*\nimport org.w3c.dom.parsing.*\nimport org.w3c.dom.svg.*\nimport org.w3c.dom.url.*\nimport org.w3c.fetch.*\nimport org.w3c.files.*\nimport org.w3c.notifications.*\nimport org.w3c.performance.*\nimport org.w3c.workers.*\n\n/**\n * Exposes the JavaScript [XMLHttpRequestEventTarget](https://developer.mozilla.org/en/docs/Web/API/XMLHttpRequestEventTarget) to Kotlin\n */\npublic external abstract class XMLHttpRequestEventTarget : EventTarget {\n    open var onloadstart: ((Event) -> dynamic)?\n    open var onprogress: ((Event) -> dynamic)?\n    open var onabort: ((Event) -> dynamic)?\n    open var onerror: ((Event) -> dynamic)?\n    open var onload: ((Event) -> dynamic)?\n    open var ontimeout: ((Event) -> dynamic)?\n    open var onloadend: ((Event) -> dynamic)?\n}\n\npublic external abstract class XMLHttpRequestUpload : XMLHttpRequestEventTarget {\n}\n\n/**\n * Exposes the JavaScript [XMLHttpRequest](https://developer.mozilla.org/en/docs/Web/API/XMLHttpRequest) to Kotlin\n */\npublic external open class XMLHttpRequest : XMLHttpRequestEventTarget {\n    var onreadystatechange: ((Event) -> dynamic)?\n    open val readyState: Short\n    var timeout: Int\n    var withCredentials: Boolean\n    open val upload: XMLHttpRequestUpload\n    open val responseURL: String\n    open val status: Short\n    open val statusText: String\n    var responseType: XMLHttpRequestResponseType\n    open val response: Any?\n    open val responseText: String\n    open val responseXML: Document?\n    fun open(method: String, url: String): Unit\n    fun open(method: String, url: String, async: Boolean, username: String? = definedExternally, password: String? = definedExternally): Unit\n    fun setRequestHeader(name: String, value: String): Unit\n    fun send(body: dynamic = definedExternally): Unit\n    fun abort(): Unit\n    fun getResponseHeader(name: String): String?\n    fun getAllResponseHeaders(): String\n    fun overrideMimeType(mime: String): Unit\n\n    companion object {\n        val UNSENT: Short\n        val OPENED: Short\n        val HEADERS_RECEIVED: Short\n        val LOADING: Short\n        val DONE: Short\n    }\n}\n\n/**\n * Exposes the JavaScript [FormData](https://developer.mozilla.org/en/docs/Web/API/FormData) to Kotlin\n */\npublic external open class FormData(form: HTMLFormElement = definedExternally) {\n    fun append(name: String, value: String): Unit\n    fun append(name: String, value: Blob, filename: String = definedExternally): Unit\n    fun delete(name: String): Unit\n    fun get(name: String): dynamic\n    fun getAll(name: String): Array<dynamic>\n    fun has(name: String): Boolean\n    fun set(name: String, value: String): Unit\n    fun set(name: String, value: Blob, filename: String = definedExternally): Unit\n}\n\n/**\n * Exposes the JavaScript [ProgressEvent](https://developer.mozilla.org/en/docs/Web/API/ProgressEvent) to Kotlin\n */\npublic external open class ProgressEvent(type: String, eventInitDict: ProgressEventInit = definedExternally) : Event {\n    open val lengthComputable: Boolean\n    open val loaded: Int\n    open val total: Int\n}\n\npublic external interface ProgressEventInit : EventInit {\n    var lengthComputable: Boolean? /* = false */\n        get() = definedExternally\n        set(value) = definedExternally\n    var loaded: Int? /* = 0 */\n        get() = definedExternally\n        set(value) = definedExternally\n    var total: Int? /* = 0 */\n        get() = definedExternally\n        set(value) = definedExternally\n}\n\n@kotlin.internal.InlineOnly\npublic inline fun ProgressEventInit(lengthComputable: Boolean? = false, loaded: Int? = 0, total: Int? = 0, bubbles: Boolean? = false, cancelable: Boolean? = false, composed: Boolean? = false): ProgressEventInit {\n    val o = js(\"({})\")\n\n    o[\"lengthComputable\"] = lengthComputable\n    o[\"loaded\"] = loaded\n    o[\"total\"] = total\n    o[\"bubbles\"] = bubbles\n    o[\"cancelable\"] = cancelable\n    o[\"composed\"] = composed\n\n    return o\n}\n\n/* please, don't implement this interface! */\npublic external interface XMLHttpRequestResponseType {\n    companion object\n}\npublic inline val XMLHttpRequestResponseType.Companion.EMPTY: XMLHttpRequestResponseType get() = \"\".asDynamic().unsafeCast<XMLHttpRequestResponseType>()\npublic inline val XMLHttpRequestResponseType.Companion.ARRAYBUFFER: XMLHttpRequestResponseType get() = \"arraybuffer\".asDynamic().unsafeCast<XMLHttpRequestResponseType>()\npublic inline val XMLHttpRequestResponseType.Companion.BLOB: XMLHttpRequestResponseType get() = \"blob\".asDynamic().unsafeCast<XMLHttpRequestResponseType>()\npublic inline val XMLHttpRequestResponseType.Companion.DOCUMENT: XMLHttpRequestResponseType get() = \"document\".asDynamic().unsafeCast<XMLHttpRequestResponseType>()\npublic inline val XMLHttpRequestResponseType.Companion.JSON: XMLHttpRequestResponseType get() = \"json\".asDynamic().unsafeCast<XMLHttpRequestResponseType>()\npublic inline val XMLHttpRequestResponseType.Companion.TEXT: XMLHttpRequestResponseType get() = \"text\".asDynamic().unsafeCast<XMLHttpRequestResponseType>()\n\n",null,null,null,"@file:kotlin.jvm.JvmMultifileClass\n@file:kotlin.jvm.JvmName(\"SetsKt\")\n\npackage kotlin.collections\n\n\ninternal object EmptySet : Set<Nothing>, Serializable {\n    private const val serialVersionUID: Long = 3406603774387020532\n\n    override fun equals(other: Any?): Boolean = other is Set<*> && other.isEmpty()\n    override fun hashCode(): Int = 0\n    override fun toString(): String = \"[]\"\n\n    override val size: Int get() = 0\n    override fun isEmpty(): Boolean = true\n    override fun contains(element: Nothing): Boolean = false\n    override fun containsAll(elements: Collection<Nothing>): Boolean = elements.isEmpty()\n\n    override fun iterator(): Iterator<Nothing> = EmptyIterator\n\n    private fun readResolve(): Any = EmptySet\n}\n\n\n/**\n * Returns an empty read-only set.  The returned set is serializable (JVM).\n * @sample samples.collections.Collections.Sets.emptyReadOnlySet\n */\npublic fun <T> emptySet(): Set<T> = EmptySet\n/**\n * Returns a new read-only set with the given elements.\n * Elements of the set are iterated in the order they were specified.\n * The returned set is serializable (JVM).\n */\npublic fun <T> setOf(vararg elements: T): Set<T> = if (elements.size > 0) elements.toSet() else emptySet()\n\n/**\n * Returns an empty read-only set.  The returned set is serializable (JVM).\n * @sample samples.collections.Collections.Sets.emptyReadOnlySet\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> setOf(): Set<T> = emptySet()\n\n/**\n * Returns an empty new [MutableSet].\n *\n * The returned set preserves the element iteration order.\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic inline fun <T> mutableSetOf(): MutableSet<T> = LinkedHashSet()\n\n/**\n * Returns a new [MutableSet] with the given elements.\n * Elements of the set are iterated in the order they were specified.\n */\npublic fun <T> mutableSetOf(vararg elements: T): MutableSet<T> = elements.toCollection(LinkedHashSet(mapCapacity(elements.size)))\n\n/** Returns an empty new [HashSet]. */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic inline fun <T> hashSetOf(): HashSet<T> = HashSet()\n\n/** Returns a new [HashSet] with the given elements. */\npublic fun <T> hashSetOf(vararg elements: T): HashSet<T> = elements.toCollection(HashSet(mapCapacity(elements.size)))\n\n/** Returns an empty new [LinkedHashSet]. */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic inline fun <T> linkedSetOf(): LinkedHashSet<T> = LinkedHashSet()\n\n/**\n * Returns a new [LinkedHashSet] with the given elements.\n * Elements of the set are iterated in the order they were specified.\n */\npublic fun <T> linkedSetOf(vararg elements: T): LinkedHashSet<T> = elements.toCollection(LinkedHashSet(mapCapacity(elements.size)))\n\n/** Returns this Set if it's not `null` and the empty set otherwise. */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Set<T>?.orEmpty(): Set<T> = this ?: emptySet()\n\n/* Not available on platform: JS */\n\n\n\n\n\n\n\n/* Not available on platform: JS */\n\n\n\n\n\n/* Not available on platform: JS */\n\n\n\n\n\n\ninternal fun <T> Set<T>.optimizeReadOnlySet() = when (size) {\n    0 -> emptySet()\n    1 -> setOf(iterator().next())\n    else -> this\n}\n",null,null,null,"/*\n * Copyright 2010-2014 JetBrains s.r.o.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n@file:kotlin.jvm.JvmName(\"ComparisonsKt\")\n@file:kotlin.jvm.JvmMultifileClass\n\npackage kotlin.comparisons\n\n/**\n * Compares two values using the specified functions [selectors] to calculate the result of the comparison.\n * The functions are called sequentially, receive the given values [a] and [b] and return [Comparable]\n * objects. As soon as the [Comparable] instances returned by a function for [a] and [b] values do not\n * compare as equal, the result of that comparison is returned.\n *\n * @sample samples.comparisons.Comparisons.compareValuesByWithSelectors\n */\npublic fun <T> compareValuesBy(a: T, b: T, vararg selectors: (T) -> Comparable<*>?): Int {\n    require(selectors.size > 0)\n    return compareValuesByImpl(a, b, selectors)\n}\n\nprivate fun <T> compareValuesByImpl(a: T, b: T, selectors: Array<out (T)->Comparable<*>?>): Int {\n    for (fn in selectors) {\n        val v1 = fn(a)\n        val v2 = fn(b)\n        val diff = compareValues(v1, v2)\n        if (diff != 0) return diff\n    }\n    return 0\n}\n\n/**\n * Compares two values using the specified [selector] function to calculate the result of the comparison.\n * The function is applied to the given values [a] and [b] and return [Comparable] objects.\n * The result of comparison of these [Comparable] instances is returned.\n *\n * @sample samples.comparisons.Comparisons.compareValuesByWithSingleSelector\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> compareValuesBy(a: T, b: T, selector: (T) -> Comparable<*>?): Int {\n    return compareValues(selector(a), selector(b))\n}\n\n/**\n * Compares two values using the specified [selector] function to calculate the result of the comparison.\n * The function is applied to the given values [a] and [b] and return objects of type K which are then being\n * compared with the given [comparator].\n *\n * @sample samples.comparisons.Comparisons.compareValuesByWithComparator\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T, K> compareValuesBy(a: T, b: T, comparator: Comparator<in K>, selector: (T) -> K): Int {\n    return comparator.compare(selector(a), selector(b))\n}\n\n//// Not so useful without type inference for receiver of expression\n//// compareValuesWith(v1, v2, compareBy { it.prop1 } thenByDescending { it.prop2 })\n///**\n// * Compares two values using the specified [comparator].\n// */\n//@Suppress(\"NOTHING_TO_INLINE\")\n//public inline fun <T> compareValuesWith(a: T, b: T, comparator: Comparator<T>): Int = comparator.compare(a, b)\n//\n\n\n/**\n * Compares two nullable [Comparable] values. Null is considered less than any value.\n *\n * @sample samples.comparisons.Comparisons.compareValues\n */\npublic fun <T : Comparable<*>> compareValues(a: T?, b: T?): Int {\n    if (a === b) return 0\n    if (a == null) return -1\n    if (b == null) return 1\n\n    @Suppress(\"UNCHECKED_CAST\")\n    return (a as Comparable<Any>).compareTo(b)\n}\n\n/**\n * Creates a comparator using the sequence of functions to calculate a result of comparison.\n * The functions are called sequentially, receive the given values `a` and `b` and return [Comparable]\n * objects. As soon as the [Comparable] instances returned by a function for `a` and `b` values do not\n * compare as equal, the result of that comparison is returned from the [Comparator].\n *\n * @sample samples.comparisons.Comparisons.compareByWithSelectors\n */\npublic fun <T> compareBy(vararg selectors: (T) -> Comparable<*>?): Comparator<T> {\n    require(selectors.size > 0)\n    return Comparator { a, b -> compareValuesByImpl(a, b, selectors) }\n}\n\n\n\n/**\n * Creates a comparator using the function to transform value to a [Comparable] instance for comparison.\n *\n * @sample samples.comparisons.Comparisons.compareByWithSingleSelector\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> compareBy(crossinline selector: (T) -> Comparable<*>?): Comparator<T> =\n        Comparator { a, b -> compareValuesBy(a, b, selector) }\n\n/**\n * Creates a comparator using the [selector] function to transform values being compared and then applying\n * the specified [comparator] to compare transformed values.\n *\n * @sample samples.comparisons.Comparisons.compareByWithComparator\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T, K> compareBy(comparator: Comparator<in K>, crossinline selector: (T) -> K): Comparator<T> =\n        Comparator { a, b -> compareValuesBy(a, b, comparator, selector) }\n\n/**\n * Creates a descending comparator using the function to transform value to a [Comparable] instance for comparison.\n *\n * @sample samples.comparisons.Comparisons.compareByDescendingWithSingleSelector\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> compareByDescending(crossinline selector: (T) -> Comparable<*>?): Comparator<T> =\n        Comparator { a, b -> compareValuesBy(b, a, selector) }\n\n/**\n * Creates a descending comparator using the [selector] function to transform values being compared and then applying\n * the specified [comparator] to compare transformed values.\n *\n * Note that an order of [comparator] is reversed by this wrapper.\n *\n * @sample samples.comparisons.Comparisons.compareByDescendingWithComparator\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T, K> compareByDescending(comparator: Comparator<in K>, crossinline selector: (T) -> K): Comparator<T> =\n        Comparator { a, b -> compareValuesBy(b, a, comparator, selector) }\n\n/**\n * Creates a comparator comparing values after the primary comparator defined them equal. It uses\n * the function to transform value to a [Comparable] instance for comparison.\n *\n * @sample samples.comparisons.Comparisons.thenBy\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Comparator<T>.thenBy(crossinline selector: (T) -> Comparable<*>?): Comparator<T> =\n        Comparator { a, b ->\n            val previousCompare = this@thenBy.compare(a, b)\n            if (previousCompare != 0) previousCompare else compareValuesBy(a, b, selector)\n        }\n\n/**\n * Creates a comparator comparing values after the primary comparator defined them equal. It uses\n * the [selector] function to transform values and then compares them with the given [comparator].\n *\n * @sample samples.comparisons.Comparisons.thenByWithComparator\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T, K> Comparator<T>.thenBy(comparator: Comparator<in K>, crossinline selector: (T) -> K): Comparator<T> =\n        Comparator { a, b ->\n            val previousCompare = this@thenBy.compare(a, b)\n            if (previousCompare != 0) previousCompare else compareValuesBy(a, b, comparator, selector)\n        }\n\n/**\n * Creates a descending comparator using the primary comparator and\n * the function to transform value to a [Comparable] instance for comparison.\n *\n * @sample samples.comparisons.Comparisons.thenByDescending\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Comparator<T>.thenByDescending(crossinline selector: (T) -> Comparable<*>?): Comparator<T> =\n        Comparator { a, b ->\n            val previousCompare = this@thenByDescending.compare(a, b)\n            if (previousCompare != 0) previousCompare else compareValuesBy(b, a, selector)\n        }\n\n/**\n * Creates a descending comparator comparing values after the primary comparator defined them equal. It uses\n * the [selector] function to transform values and then compares them with the given [comparator].\n *\n * @sample samples.comparisons.Comparisons.thenByDescendingWithComparator\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T, K> Comparator<T>.thenByDescending(comparator: Comparator<in K>, crossinline selector: (T) -> K): Comparator<T> =\n        Comparator { a, b ->\n            val previousCompare = this@thenByDescending.compare(a, b)\n            if (previousCompare != 0) previousCompare else compareValuesBy(b, a, comparator, selector)\n        }\n\n\n/**\n * Creates a comparator using the primary comparator and function to calculate a result of comparison.\n *\n * @sample samples.comparisons.Comparisons.thenComparator\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Comparator<T>.thenComparator(crossinline comparison: (a: T, b: T) -> Int): Comparator<T> =\n        Comparator { a, b ->\n            val previousCompare = this@thenComparator.compare(a, b)\n            if (previousCompare != 0) previousCompare else comparison(a, b)\n        }\n\n/**\n * Combines this comparator and the given [comparator] such that the latter is applied only\n * when the former considered values equal.\n *\n * @sample samples.comparisons.Comparisons.then\n */\npublic infix fun <T> Comparator<T>.then(comparator: Comparator<in T>): Comparator<T> =\n        Comparator { a, b ->\n            val previousCompare = this@then.compare(a, b)\n            if (previousCompare != 0) previousCompare else comparator.compare(a, b)\n        }\n\n/**\n * Combines this comparator and the given [comparator] such that the latter is applied only\n * when the former considered values equal.\n *\n * @sample samples.comparisons.Comparisons.thenDescending\n */\npublic infix fun <T> Comparator<T>.thenDescending(comparator: Comparator<in T>): Comparator<T> =\n        Comparator<T> { a, b ->\n            val previousCompare = this@thenDescending.compare(a, b)\n            if (previousCompare != 0) previousCompare else comparator.compare(b, a)\n        }\n\n// Not so useful without type inference for receiver of expression\n/**\n * Extends the given [comparator] of non-nullable values to a comparator of nullable values\n * considering `null` value less than any other value.\n *\n * @sample samples.comparisons.Comparisons.nullsFirstLastWithComparator\n */\npublic fun <T: Any> nullsFirst(comparator: Comparator<in T>): Comparator<T?> =\n        Comparator { a, b ->\n            when {\n                a === b ->   0\n                a == null -> -1\n                b == null -> 1\n                else -> comparator.compare(a, b)\n            }\n        }\n\n/**\n * Provides a comparator of nullable [Comparable] values\n * considering `null` value less than any other value.\n *\n * @sample samples.comparisons.Comparisons.nullsFirstLastComparator\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T: Comparable<T>> nullsFirst(): Comparator<T?> = nullsFirst(naturalOrder())\n\n/**\n * Extends the given [comparator] of non-nullable values to a comparator of nullable values\n * considering `null` value greater than any other value.\n *\n * @sample samples.comparisons.Comparisons.nullsFirstLastWithComparator\n */\npublic fun <T: Any> nullsLast(comparator: Comparator<in T>): Comparator<T?> =\n        Comparator { a, b ->\n            when {\n                a === b ->   0\n                a == null -> 1\n                b == null -> -1\n                else -> comparator.compare(a, b)\n            }\n        }\n\n/**\n * Provides a comparator of nullable [Comparable] values\n * considering `null` value greater than any other value.\n *\n * @sample samples.comparisons.Comparisons.nullsFirstLastComparator\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T: Comparable<T>> nullsLast(): Comparator<T?> = nullsLast(naturalOrder())\n\n/**\n * Returns a comparator that compares [Comparable] objects in natural order.\n *\n * @sample samples.comparisons.Comparisons.naturalOrderComparator\n */\npublic fun <T: Comparable<T>> naturalOrder(): Comparator<T> = @Suppress(\"UNCHECKED_CAST\") (NaturalOrderComparator as Comparator<T>)\n\n/**\n * Returns a comparator that compares [Comparable] objects in reversed natural order.\n *\n * @sample samples.comparisons.Comparisons.nullsFirstLastWithComparator\n */\npublic fun <T: Comparable<T>> reverseOrder(): Comparator<T> = @Suppress(\"UNCHECKED_CAST\") (ReverseOrderComparator as Comparator<T>)\n\n/**\n *  Returns a comparator that imposes the reverse ordering of this comparator.\n *\n *  @sample samples.comparisons.Comparisons.reversed\n */\npublic fun <T> Comparator<T>.reversed(): Comparator<T> = when (this) {\n    is ReversedComparator -> this.comparator\n    NaturalOrderComparator -> @Suppress(\"UNCHECKED_CAST\") (ReverseOrderComparator as Comparator<T>)\n    ReverseOrderComparator -> @Suppress(\"UNCHECKED_CAST\") (NaturalOrderComparator as Comparator<T>)\n    else -> ReversedComparator(this)\n}\n\n\nprivate class ReversedComparator<T>(public val comparator: Comparator<T>): Comparator<T> {\n    override fun compare(a: T, b: T): Int = comparator.compare(b, a)\n    @Suppress(\"VIRTUAL_MEMBER_HIDDEN\")\n    fun reversed(): Comparator<T> = comparator\n}\n\nprivate object NaturalOrderComparator : Comparator<Comparable<Any>> {\n    override fun compare(a: Comparable<Any>, b: Comparable<Any>): Int = a.compareTo(b)\n    @Suppress(\"VIRTUAL_MEMBER_HIDDEN\")\n    fun reversed(): Comparator<Comparable<Any>> = ReverseOrderComparator\n}\n\nprivate object ReverseOrderComparator: Comparator<Comparable<Any>> {\n    override fun compare(a: Comparable<Any>, b: Comparable<Any>): Int = b.compareTo(a)\n    @Suppress(\"VIRTUAL_MEMBER_HIDDEN\")\n    fun reversed(): Comparator<Comparable<Any>> = NaturalOrderComparator\n}\n","/*\n * Copyright 2010-2016 JetBrains s.r.o.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage kotlin\n\n\npublic interface Comparator<T> {\n    @JsName(\"compare\") fun compare(a: T, b: T): Int\n}\n\npublic inline fun <T> Comparator(crossinline comparison: (a: T, b: T) -> Int): Comparator<T> = object : Comparator<T> {\n    override fun compare(a: T, b: T): Int = comparison(a, b)\n}\n","@file:kotlin.jvm.JvmMultifileClass\n@file:kotlin.jvm.JvmName(\"SequencesKt\")\n\npackage kotlin.sequences\n\n//\n// NOTE THIS FILE IS AUTO-GENERATED by the GenerateStandardLib.kt\n// See: https://github.com/JetBrains/kotlin/tree/master/libraries/stdlib\n//\n\nimport kotlin.js.*\nimport kotlin.comparisons.*\nimport kotlin.coroutines.experimental.*\n\n/**\n * Returns `true` if [element] is found in the sequence.\n *\n * The operation is _terminal_.\n */\npublic operator fun <@kotlin.internal.OnlyInputTypes T> Sequence<T>.contains(element: T): Boolean {\n    return indexOf(element) >= 0\n}\n\n/**\n * Returns an element at the given [index] or throws an [IndexOutOfBoundsException] if the [index] is out of bounds of this sequence.\n *\n * The operation is _terminal_.\n */\npublic fun <T> Sequence<T>.elementAt(index: Int): T {\n    return elementAtOrElse(index) { throw IndexOutOfBoundsException(\"Sequence doesn't contain element at index $index.\") }\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this sequence.\n *\n * The operation is _terminal_.\n */\npublic fun <T> Sequence<T>.elementAtOrElse(index: Int, defaultValue: (Int) -> T): T {\n    if (index < 0)\n        return defaultValue(index)\n    val iterator = iterator()\n    var count = 0\n    while (iterator.hasNext()) {\n        val element = iterator.next()\n        if (index == count++)\n            return element\n    }\n    return defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this sequence.\n *\n * The operation is _terminal_.\n */\npublic fun <T> Sequence<T>.elementAtOrNull(index: Int): T? {\n    if (index < 0)\n        return null\n    val iterator = iterator()\n    var count = 0\n    while (iterator.hasNext()) {\n        val element = iterator.next()\n        if (index == count++)\n            return element\n    }\n    return null\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if no such element was found.\n *\n * The operation is _terminal_.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Sequence<T>.find(predicate: (T) -> Boolean): T? {\n    return firstOrNull(predicate)\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n *\n * The operation is _terminal_.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Sequence<T>.findLast(predicate: (T) -> Boolean): T? {\n    return lastOrNull(predicate)\n}\n\n/**\n * Returns first element.\n * @throws [NoSuchElementException] if the sequence is empty.\n *\n * The operation is _terminal_.\n */\npublic fun <T> Sequence<T>.first(): T {\n    val iterator = iterator()\n    if (!iterator.hasNext())\n        throw NoSuchElementException(\"Sequence is empty.\")\n    return iterator.next()\n}\n\n/**\n * Returns the first element matching the given [predicate].\n * @throws [NoSuchElementException] if no such element is found.\n *\n * The operation is _terminal_.\n */\npublic inline fun <T> Sequence<T>.first(predicate: (T) -> Boolean): T {\n    for (element in this) if (predicate(element)) return element\n    throw NoSuchElementException(\"Sequence contains no element matching the predicate.\")\n}\n\n/**\n * Returns the first element, or `null` if the sequence is empty.\n *\n * The operation is _terminal_.\n */\npublic fun <T> Sequence<T>.firstOrNull(): T? {\n    val iterator = iterator()\n    if (!iterator.hasNext())\n        return null\n    return iterator.next()\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if element was not found.\n *\n * The operation is _terminal_.\n */\npublic inline fun <T> Sequence<T>.firstOrNull(predicate: (T) -> Boolean): T? {\n    for (element in this) if (predicate(element)) return element\n    return null\n}\n\n/**\n * Returns first index of [element], or -1 if the sequence does not contain element.\n *\n * The operation is _terminal_.\n */\npublic fun <@kotlin.internal.OnlyInputTypes T> Sequence<T>.indexOf(element: T): Int {\n    var index = 0\n    for (item in this) {\n        if (element == item)\n            return index\n        index++\n    }\n    return -1\n}\n\n/**\n * Returns index of the first element matching the given [predicate], or -1 if the sequence does not contain such element.\n *\n * The operation is _terminal_.\n */\npublic inline fun <T> Sequence<T>.indexOfFirst(predicate: (T) -> Boolean): Int {\n    var index = 0\n    for (item in this) {\n        if (predicate(item))\n            return index\n        index++\n    }\n    return -1\n}\n\n/**\n * Returns index of the last element matching the given [predicate], or -1 if the sequence does not contain such element.\n *\n * The operation is _terminal_.\n */\npublic inline fun <T> Sequence<T>.indexOfLast(predicate: (T) -> Boolean): Int {\n    var lastIndex = -1\n    var index = 0\n    for (item in this) {\n        if (predicate(item))\n            lastIndex = index\n        index++\n    }\n    return lastIndex\n}\n\n/**\n * Returns the last element.\n * @throws [NoSuchElementException] if the sequence is empty.\n *\n * The operation is _terminal_.\n */\npublic fun <T> Sequence<T>.last(): T {\n    val iterator = iterator()\n    if (!iterator.hasNext())\n        throw NoSuchElementException(\"Sequence is empty.\")\n    var last = iterator.next()\n    while (iterator.hasNext())\n        last = iterator.next()\n    return last\n}\n\n/**\n * Returns the last element matching the given [predicate].\n * @throws [NoSuchElementException] if no such element is found.\n *\n * The operation is _terminal_.\n */\npublic inline fun <T> Sequence<T>.last(predicate: (T) -> Boolean): T {\n    var last: T? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            last = element\n            found = true\n        }\n    }\n    if (!found) throw NoSuchElementException(\"Sequence contains no element matching the predicate.\")\n    @Suppress(\"UNCHECKED_CAST\")\n    return last as T\n}\n\n/**\n * Returns last index of [element], or -1 if the sequence does not contain element.\n *\n * The operation is _terminal_.\n */\npublic fun <@kotlin.internal.OnlyInputTypes T> Sequence<T>.lastIndexOf(element: T): Int {\n    var lastIndex = -1\n    var index = 0\n    for (item in this) {\n        if (element == item)\n            lastIndex = index\n        index++\n    }\n    return lastIndex\n}\n\n/**\n * Returns the last element, or `null` if the sequence is empty.\n *\n * The operation is _terminal_.\n */\npublic fun <T> Sequence<T>.lastOrNull(): T? {\n    val iterator = iterator()\n    if (!iterator.hasNext())\n        return null\n    var last = iterator.next()\n    while (iterator.hasNext())\n        last = iterator.next()\n    return last\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n *\n * The operation is _terminal_.\n */\npublic inline fun <T> Sequence<T>.lastOrNull(predicate: (T) -> Boolean): T? {\n    var last: T? = null\n    for (element in this) {\n        if (predicate(element)) {\n            last = element\n        }\n    }\n    return last\n}\n\n/**\n * Returns the single element, or throws an exception if the sequence is empty or has more than one element.\n *\n * The operation is _terminal_.\n */\npublic fun <T> Sequence<T>.single(): T {\n    val iterator = iterator()\n    if (!iterator.hasNext())\n        throw NoSuchElementException(\"Sequence is empty.\")\n    val single = iterator.next()\n    if (iterator.hasNext())\n        throw IllegalArgumentException(\"Sequence has more than one element.\")\n    return single\n}\n\n/**\n * Returns the single element matching the given [predicate], or throws exception if there is no or more than one matching element.\n *\n * The operation is _terminal_.\n */\npublic inline fun <T> Sequence<T>.single(predicate: (T) -> Boolean): T {\n    var single: T? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) throw IllegalArgumentException(\"Sequence contains more than one matching element.\")\n            single = element\n            found = true\n        }\n    }\n    if (!found) throw NoSuchElementException(\"Sequence contains no element matching the predicate.\")\n    @Suppress(\"UNCHECKED_CAST\")\n    return single as T\n}\n\n/**\n * Returns single element, or `null` if the sequence is empty or has more than one element.\n *\n * The operation is _terminal_.\n */\npublic fun <T> Sequence<T>.singleOrNull(): T? {\n    val iterator = iterator()\n    if (!iterator.hasNext())\n        return null\n    val single = iterator.next()\n    if (iterator.hasNext())\n        return null\n    return single\n}\n\n/**\n * Returns the single element matching the given [predicate], or `null` if element was not found or more than one element was found.\n *\n * The operation is _terminal_.\n */\npublic inline fun <T> Sequence<T>.singleOrNull(predicate: (T) -> Boolean): T? {\n    var single: T? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) return null\n            single = element\n            found = true\n        }\n    }\n    if (!found) return null\n    return single\n}\n\n/**\n * Returns a sequence containing all elements except first [n] elements.\n *\n * The operation is _intermediate_ and _stateless_.\n */\npublic fun <T> Sequence<T>.drop(n: Int): Sequence<T> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    return when {\n        n == 0 -> this\n        this is DropTakeSequence -> this.drop(n)\n        else -> DropSequence(this, n)\n    }\n}\n\n/**\n * Returns a sequence containing all elements except first elements that satisfy the given [predicate].\n *\n * The operation is _intermediate_ and _stateless_.\n */\npublic fun <T> Sequence<T>.dropWhile(predicate: (T) -> Boolean): Sequence<T> {\n    return DropWhileSequence(this, predicate)\n}\n\n/**\n * Returns a sequence containing only elements matching the given [predicate].\n *\n * The operation is _intermediate_ and _stateless_.\n */\npublic fun <T> Sequence<T>.filter(predicate: (T) -> Boolean): Sequence<T> {\n    return FilteringSequence(this, true, predicate)\n}\n\n/**\n * Returns a sequence containing only elements matching the given [predicate].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n *\n * The operation is _intermediate_ and _stateless_.\n */\npublic fun <T> Sequence<T>.filterIndexed(predicate: (index: Int, T) -> Boolean): Sequence<T> {\n    // TODO: Rewrite with generalized MapFilterIndexingSequence\n    return TransformingSequence(FilteringSequence(IndexingSequence(this), true, { predicate(it.index, it.value) }), { it.value })\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n *\n * The operation is _terminal_.\n */\npublic inline fun <T, C : MutableCollection<in T>> Sequence<T>.filterIndexedTo(destination: C, predicate: (index: Int, T) -> Boolean): C {\n    forEachIndexed { index, element ->\n        if (predicate(index, element)) destination.add(element)\n    }\n    return destination\n}\n\n/**\n * Returns a sequence containing all elements that are instances of specified type parameter R.\n *\n * The operation is _intermediate_ and _stateless_.\n */\npublic inline fun <reified R> Sequence<*>.filterIsInstance(): Sequence<@kotlin.internal.NoInfer R> {\n    @Suppress(\"UNCHECKED_CAST\")\n    return filter { it is R } as Sequence<R>\n}\n\n/**\n * Appends all elements that are instances of specified type parameter R to the given [destination].\n *\n * The operation is _terminal_.\n */\npublic inline fun <reified R, C : MutableCollection<in R>> Sequence<*>.filterIsInstanceTo(destination: C): C {\n    for (element in this) if (element is R) destination.add(element)\n    return destination\n}\n\n/**\n * Returns a sequence containing all elements not matching the given [predicate].\n *\n * The operation is _intermediate_ and _stateless_.\n */\npublic fun <T> Sequence<T>.filterNot(predicate: (T) -> Boolean): Sequence<T> {\n    return FilteringSequence(this, false, predicate)\n}\n\n/**\n * Returns a sequence containing all elements that are not `null`.\n *\n * The operation is _intermediate_ and _stateless_.\n */\npublic fun <T : Any> Sequence<T?>.filterNotNull(): Sequence<T> {\n    @Suppress(\"UNCHECKED_CAST\")\n    return filterNot { it == null } as Sequence<T>\n}\n\n/**\n * Appends all elements that are not `null` to the given [destination].\n *\n * The operation is _terminal_.\n */\npublic fun <C : MutableCollection<in T>, T : Any> Sequence<T?>.filterNotNullTo(destination: C): C {\n    for (element in this) if (element != null) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements not matching the given [predicate] to the given [destination].\n *\n * The operation is _terminal_.\n */\npublic inline fun <T, C : MutableCollection<in T>> Sequence<T>.filterNotTo(destination: C, predicate: (T) -> Boolean): C {\n    for (element in this) if (!predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n *\n * The operation is _terminal_.\n */\npublic inline fun <T, C : MutableCollection<in T>> Sequence<T>.filterTo(destination: C, predicate: (T) -> Boolean): C {\n    for (element in this) if (predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Returns a sequence containing first [n] elements.\n *\n * The operation is _intermediate_ and _stateless_.\n */\npublic fun <T> Sequence<T>.take(n: Int): Sequence<T> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    return when {\n        n == 0 -> emptySequence()\n        this is DropTakeSequence -> this.take(n)\n        else -> TakeSequence(this, n)\n    }\n}\n\n/**\n * Returns a sequence containing first elements satisfying the given [predicate].\n *\n * The operation is _intermediate_ and _stateless_.\n */\npublic fun <T> Sequence<T>.takeWhile(predicate: (T) -> Boolean): Sequence<T> {\n    return TakeWhileSequence(this, predicate)\n}\n\n/**\n * Returns a sequence that yields elements of this sequence sorted according to their natural sort order.\n *\n * The operation is _intermediate_ and _stateful_.\n */\npublic fun <T : Comparable<T>> Sequence<T>.sorted(): Sequence<T> {\n    return object : Sequence<T> {\n        override fun iterator(): Iterator<T> {\n            val sortedList = this@sorted.toMutableList()\n            sortedList.sort()\n            return sortedList.iterator()\n        }\n    }\n}\n\n/**\n * Returns a sequence that yields elements of this sequence sorted according to natural sort order of the value returned by specified [selector] function.\n *\n * The operation is _intermediate_ and _stateful_.\n */\npublic inline fun <T, R : Comparable<R>> Sequence<T>.sortedBy(crossinline selector: (T) -> R?): Sequence<T> {\n    return sortedWith(compareBy(selector))\n}\n\n/**\n * Returns a sequence that yields elements of this sequence sorted descending according to natural sort order of the value returned by specified [selector] function.\n *\n * The operation is _intermediate_ and _stateful_.\n */\npublic inline fun <T, R : Comparable<R>> Sequence<T>.sortedByDescending(crossinline selector: (T) -> R?): Sequence<T> {\n    return sortedWith(compareByDescending(selector))\n}\n\n/**\n * Returns a sequence that yields elements of this sequence sorted descending according to their natural sort order.\n *\n * The operation is _intermediate_ and _stateful_.\n */\npublic fun <T : Comparable<T>> Sequence<T>.sortedDescending(): Sequence<T> {\n    return sortedWith(reverseOrder())\n}\n\n/**\n * Returns a sequence that yields elements of this sequence sorted according to the specified [comparator].\n *\n * The operation is _intermediate_ and _stateful_.\n */\npublic fun <T> Sequence<T>.sortedWith(comparator: Comparator<in T>): Sequence<T> {\n    return object : Sequence<T> {\n        override fun iterator(): Iterator<T> {\n            val sortedList = this@sortedWith.toMutableList()\n            sortedList.sortWith(comparator)\n            return sortedList.iterator()\n        }\n    }\n}\n\n/**\n * Returns a [Map] containing key-value pairs provided by [transform] function\n * applied to elements of the given sequence.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original sequence.\n *\n * The operation is _terminal_.\n */\npublic inline fun <T, K, V> Sequence<T>.associate(transform: (T) -> Pair<K, V>): Map<K, V> {\n    return associateTo(LinkedHashMap<K, V>(), transform)\n}\n\n/**\n * Returns a [Map] containing the elements from the given sequence indexed by the key\n * returned from [keySelector] function applied to each element.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original sequence.\n *\n * The operation is _terminal_.\n */\npublic inline fun <T, K> Sequence<T>.associateBy(keySelector: (T) -> K): Map<K, T> {\n    return associateByTo(LinkedHashMap<K, T>(), keySelector)\n}\n\n/**\n * Returns a [Map] containing the values provided by [valueTransform] and indexed by [keySelector] functions applied to elements of the given sequence.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original sequence.\n *\n * The operation is _terminal_.\n */\npublic inline fun <T, K, V> Sequence<T>.associateBy(keySelector: (T) -> K, valueTransform: (T) -> V): Map<K, V> {\n    return associateByTo(LinkedHashMap<K, V>(), keySelector, valueTransform)\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function applied to each element of the given sequence\n * and value is the element itself.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n *\n * The operation is _terminal_.\n */\npublic inline fun <T, K, M : MutableMap<in K, in T>> Sequence<T>.associateByTo(destination: M, keySelector: (T) -> K): M {\n    for (element in this) {\n        destination.put(keySelector(element), element)\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function and\n * and value is provided by the [valueTransform] function applied to elements of the given sequence.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n *\n * The operation is _terminal_.\n */\npublic inline fun <T, K, V, M : MutableMap<in K, in V>> Sequence<T>.associateByTo(destination: M, keySelector: (T) -> K, valueTransform: (T) -> V): M {\n    for (element in this) {\n        destination.put(keySelector(element), valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs\n * provided by [transform] function applied to each element of the given sequence.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n *\n * The operation is _terminal_.\n */\npublic inline fun <T, K, V, M : MutableMap<in K, in V>> Sequence<T>.associateTo(destination: M, transform: (T) -> Pair<K, V>): M {\n    for (element in this) {\n        destination += transform(element)\n    }\n    return destination\n}\n\n/**\n * Appends all elements to the given [destination] collection.\n *\n * The operation is _terminal_.\n */\npublic fun <T, C : MutableCollection<in T>> Sequence<T>.toCollection(destination: C): C {\n    for (item in this) {\n        destination.add(item)\n    }\n    return destination\n}\n\n/**\n * Returns a [HashSet] of all elements.\n *\n * The operation is _terminal_.\n */\npublic fun <T> Sequence<T>.toHashSet(): HashSet<T> {\n    return toCollection(HashSet<T>())\n}\n\n/**\n * Returns a [List] containing all elements.\n *\n * The operation is _terminal_.\n */\npublic fun <T> Sequence<T>.toList(): List<T> {\n    return this.toMutableList().optimizeReadOnlyList()\n}\n\n/**\n * Returns a [MutableList] filled with all elements of this sequence.\n *\n * The operation is _terminal_.\n */\npublic fun <T> Sequence<T>.toMutableList(): MutableList<T> {\n    return toCollection(ArrayList<T>())\n}\n\n/**\n * Returns a [Set] of all elements.\n * \n * The returned set preserves the element iteration order of the original sequence.\n *\n * The operation is _terminal_.\n */\npublic fun <T> Sequence<T>.toSet(): Set<T> {\n    return toCollection(LinkedHashSet<T>()).optimizeReadOnlySet()\n}\n\n/**\n * Returns a single sequence of all elements from results of [transform] function being invoked on each element of original sequence.\n *\n * The operation is _intermediate_ and _stateless_.\n */\npublic fun <T, R> Sequence<T>.flatMap(transform: (T) -> Sequence<R>): Sequence<R> {\n    return FlatteningSequence(this, transform, { it.iterator() })\n}\n\n/**\n * Appends all elements yielded from results of [transform] function being invoked on each element of original sequence, to the given [destination].\n *\n * The operation is _terminal_.\n */\npublic inline fun <T, R, C : MutableCollection<in R>> Sequence<T>.flatMapTo(destination: C, transform: (T) -> Sequence<R>): C {\n    for (element in this) {\n        val list = transform(element)\n        destination.addAll(list)\n    }\n    return destination\n}\n\n/**\n * Groups elements of the original sequence by the key returned by the given [keySelector] function\n * applied to each element and returns a map where each group key is associated with a list of corresponding elements.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original sequence.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n *\n * The operation is _terminal_.\n */\npublic inline fun <T, K> Sequence<T>.groupBy(keySelector: (T) -> K): Map<K, List<T>> {\n    return groupByTo(LinkedHashMap<K, MutableList<T>>(), keySelector)\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original sequence\n * by the key returned by the given [keySelector] function applied to the element\n * and returns a map where each group key is associated with a list of corresponding values.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original sequence.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n *\n * The operation is _terminal_.\n */\npublic inline fun <T, K, V> Sequence<T>.groupBy(keySelector: (T) -> K, valueTransform: (T) -> V): Map<K, List<V>> {\n    return groupByTo(LinkedHashMap<K, MutableList<V>>(), keySelector, valueTransform)\n}\n\n/**\n * Groups elements of the original sequence by the key returned by the given [keySelector] function\n * applied to each element and puts to the [destination] map each group key associated with a list of corresponding elements.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n *\n * The operation is _terminal_.\n */\npublic inline fun <T, K, M : MutableMap<in K, MutableList<T>>> Sequence<T>.groupByTo(destination: M, keySelector: (T) -> K): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<T>() }\n        list.add(element)\n    }\n    return destination\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original sequence\n * by the key returned by the given [keySelector] function applied to the element\n * and puts to the [destination] map each group key associated with a list of corresponding values.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n *\n * The operation is _terminal_.\n */\npublic inline fun <T, K, V, M : MutableMap<in K, MutableList<V>>> Sequence<T>.groupByTo(destination: M, keySelector: (T) -> K, valueTransform: (T) -> V): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<V>() }\n        list.add(valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Creates a [Grouping] source from a sequence to be used later with one of group-and-fold operations\n * using the specified [keySelector] function to extract a key from each element.\n * \n * @sample samples.collections.Collections.Transformations.groupingByEachCount\n *\n * The operation is _intermediate_ and _stateless_.\n */\n@SinceKotlin(\"1.1\")\npublic inline fun <T, K> Sequence<T>.groupingBy(crossinline keySelector: (T) -> K): Grouping<T, K> {\n    return object : Grouping<T, K> {\n        override fun sourceIterator(): Iterator<T> = this@groupingBy.iterator()\n        override fun keyOf(element: T): K = keySelector(element)\n    }\n}\n\n/**\n * Returns a sequence containing the results of applying the given [transform] function\n * to each element in the original sequence.\n *\n * The operation is _intermediate_ and _stateless_.\n */\npublic fun <T, R> Sequence<T>.map(transform: (T) -> R): Sequence<R> {\n    return TransformingSequence(this, transform)\n}\n\n/**\n * Returns a sequence containing the results of applying the given [transform] function\n * to each element and its index in the original sequence.\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n *\n * The operation is _intermediate_ and _stateless_.\n */\npublic fun <T, R> Sequence<T>.mapIndexed(transform: (index: Int, T) -> R): Sequence<R> {\n    return TransformingIndexedSequence(this, transform)\n}\n\n/**\n * Returns a sequence containing only the non-null results of applying the given [transform] function\n * to each element and its index in the original sequence.\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n *\n * The operation is _intermediate_ and _stateless_.\n */\npublic fun <T, R : Any> Sequence<T>.mapIndexedNotNull(transform: (index: Int, T) -> R?): Sequence<R> {\n    return TransformingIndexedSequence(this, transform).filterNotNull()\n}\n\n/**\n * Applies the given [transform] function to each element and its index in the original sequence\n * and appends only the non-null results to the given [destination].\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n *\n * The operation is _terminal_.\n */\npublic inline fun <T, R : Any, C : MutableCollection<in R>> Sequence<T>.mapIndexedNotNullTo(destination: C, transform: (index: Int, T) -> R?): C {\n    forEachIndexed { index, element -> transform(index, element)?.let { destination.add(it) } }\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element and its index in the original sequence\n * and appends the results to the given [destination].\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n *\n * The operation is _terminal_.\n */\npublic inline fun <T, R, C : MutableCollection<in R>> Sequence<T>.mapIndexedTo(destination: C, transform: (index: Int, T) -> R): C {\n    var index = 0\n    for (item in this)\n        destination.add(transform(index++, item))\n    return destination\n}\n\n/**\n * Returns a sequence containing only the non-null results of applying the given [transform] function\n * to each element in the original sequence.\n *\n * The operation is _intermediate_ and _stateless_.\n */\npublic fun <T, R : Any> Sequence<T>.mapNotNull(transform: (T) -> R?): Sequence<R> {\n    return TransformingSequence(this, transform).filterNotNull()\n}\n\n/**\n * Applies the given [transform] function to each element in the original sequence\n * and appends only the non-null results to the given [destination].\n *\n * The operation is _terminal_.\n */\npublic inline fun <T, R : Any, C : MutableCollection<in R>> Sequence<T>.mapNotNullTo(destination: C, transform: (T) -> R?): C {\n    forEach { element -> transform(element)?.let { destination.add(it) } }\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element of the original sequence\n * and appends the results to the given [destination].\n *\n * The operation is _terminal_.\n */\npublic inline fun <T, R, C : MutableCollection<in R>> Sequence<T>.mapTo(destination: C, transform: (T) -> R): C {\n    for (item in this)\n        destination.add(transform(item))\n    return destination\n}\n\n/**\n * Returns a sequence of [IndexedValue] for each element of the original sequence.\n *\n * The operation is _intermediate_ and _stateless_.\n */\npublic fun <T> Sequence<T>.withIndex(): Sequence<IndexedValue<T>> {\n    return IndexingSequence(this)\n}\n\n/**\n * Returns a sequence containing only distinct elements from the given sequence.\n * \n * The elements in the resulting sequence are in the same order as they were in the source sequence.\n *\n * The operation is _intermediate_ and _stateful_.\n */\npublic fun <T> Sequence<T>.distinct(): Sequence<T> {\n    return this.distinctBy { it }\n}\n\n/**\n * Returns a sequence containing only elements from the given sequence\n * having distinct keys returned by the given [selector] function.\n * \n * The elements in the resulting sequence are in the same order as they were in the source sequence.\n *\n * The operation is _intermediate_ and _stateful_.\n */\npublic fun <T, K> Sequence<T>.distinctBy(selector: (T) -> K): Sequence<T> {\n    return DistinctSequence(this, selector)\n}\n\n/**\n * Returns a mutable set containing all distinct elements from the given sequence.\n * \n * The returned set preserves the element iteration order of the original sequence.\n *\n * The operation is _terminal_.\n */\npublic fun <T> Sequence<T>.toMutableSet(): MutableSet<T> {\n    val set = LinkedHashSet<T>()\n    for (item in this) set.add(item)\n    return set\n}\n\n/**\n * Returns `true` if all elements match the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.all\n *\n * The operation is _terminal_.\n */\npublic inline fun <T> Sequence<T>.all(predicate: (T) -> Boolean): Boolean {\n    for (element in this) if (!predicate(element)) return false\n    return true\n}\n\n/**\n * Returns `true` if sequence has at least one element.\n * \n * @sample samples.collections.Collections.Aggregates.any\n *\n * The operation is _terminal_.\n */\npublic fun <T> Sequence<T>.any(): Boolean {\n    return iterator().hasNext()\n}\n\n/**\n * Returns `true` if at least one element matches the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.anyWithPredicate\n *\n * The operation is _terminal_.\n */\npublic inline fun <T> Sequence<T>.any(predicate: (T) -> Boolean): Boolean {\n    for (element in this) if (predicate(element)) return true\n    return false\n}\n\n/**\n * Returns the number of elements in this sequence.\n *\n * The operation is _terminal_.\n */\npublic fun <T> Sequence<T>.count(): Int {\n    var count = 0\n    for (element in this) count++\n    return count\n}\n\n/**\n * Returns the number of elements matching the given [predicate].\n *\n * The operation is _terminal_.\n */\npublic inline fun <T> Sequence<T>.count(predicate: (T) -> Boolean): Int {\n    var count = 0\n    for (element in this) if (predicate(element)) count++\n    return count\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right to current accumulator value and each element.\n *\n * The operation is _terminal_.\n */\npublic inline fun <T, R> Sequence<T>.fold(initial: R, operation: (acc: R, T) -> R): R {\n    var accumulator = initial\n    for (element in this) accumulator = operation(accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original sequence.\n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n *\n * The operation is _terminal_.\n */\npublic inline fun <T, R> Sequence<T>.foldIndexed(initial: R, operation: (index: Int, acc: R, T) -> R): R {\n    var index = 0\n    var accumulator = initial\n    for (element in this) accumulator = operation(index++, accumulator, element)\n    return accumulator\n}\n\n/**\n * Performs the given [action] on each element.\n *\n * The operation is _terminal_.\n */\npublic inline fun <T> Sequence<T>.forEach(action: (T) -> Unit): Unit {\n    for (element in this) action(element)\n}\n\n/**\n * Performs the given [action] on each element, providing sequential index with the element.\n * @param [action] function that takes the index of an element and the element itself\n * and performs the desired action on the element.\n *\n * The operation is _terminal_.\n */\npublic inline fun <T> Sequence<T>.forEachIndexed(action: (index: Int, T) -> Unit): Unit {\n    var index = 0\n    for (item in this) action(index++, item)\n}\n\n/**\n * Returns the largest element or `null` if there are no elements.\n * \n * If any of elements is `NaN` returns `NaN`.\n *\n * The operation is _terminal_.\n */\n@SinceKotlin(\"1.1\")\npublic fun Sequence<Double>.max(): Double? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var max = iterator.next()\n    if (max.isNaN()) return max\n    while (iterator.hasNext()) {\n        val e = iterator.next()\n        if (e.isNaN()) return e\n        if (max < e) max = e\n    }\n    return max\n}\n\n/**\n * Returns the largest element or `null` if there are no elements.\n * \n * If any of elements is `NaN` returns `NaN`.\n *\n * The operation is _terminal_.\n */\n@SinceKotlin(\"1.1\")\npublic fun Sequence<Float>.max(): Float? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var max = iterator.next()\n    if (max.isNaN()) return max\n    while (iterator.hasNext()) {\n        val e = iterator.next()\n        if (e.isNaN()) return e\n        if (max < e) max = e\n    }\n    return max\n}\n\n/**\n * Returns the largest element or `null` if there are no elements.\n *\n * The operation is _terminal_.\n */\npublic fun <T : Comparable<T>> Sequence<T>.max(): T? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var max = iterator.next()\n    while (iterator.hasNext()) {\n        val e = iterator.next()\n        if (max < e) max = e\n    }\n    return max\n}\n\n/**\n * Returns the first element yielding the largest value of the given function or `null` if there are no elements.\n *\n * The operation is _terminal_.\n */\npublic inline fun <T, R : Comparable<R>> Sequence<T>.maxBy(selector: (T) -> R): T? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var maxElem = iterator.next()\n    var maxValue = selector(maxElem)\n    while (iterator.hasNext()) {\n        val e = iterator.next()\n        val v = selector(e)\n        if (maxValue < v) {\n            maxElem = e\n            maxValue = v\n        }\n    }\n    return maxElem\n}\n\n/**\n * Returns the first element having the largest value according to the provided [comparator] or `null` if there are no elements.\n *\n * The operation is _terminal_.\n */\npublic fun <T> Sequence<T>.maxWith(comparator: Comparator<in T>): T? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var max = iterator.next()\n    while (iterator.hasNext()) {\n        val e = iterator.next()\n        if (comparator.compare(max, e) < 0) max = e\n    }\n    return max\n}\n\n/**\n * Returns the smallest element or `null` if there are no elements.\n * \n * If any of elements is `NaN` returns `NaN`.\n *\n * The operation is _terminal_.\n */\n@SinceKotlin(\"1.1\")\npublic fun Sequence<Double>.min(): Double? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var min = iterator.next()\n    if (min.isNaN()) return min\n    while (iterator.hasNext()) {\n        val e = iterator.next()\n        if (e.isNaN()) return e\n        if (min > e) min = e\n    }\n    return min\n}\n\n/**\n * Returns the smallest element or `null` if there are no elements.\n * \n * If any of elements is `NaN` returns `NaN`.\n *\n * The operation is _terminal_.\n */\n@SinceKotlin(\"1.1\")\npublic fun Sequence<Float>.min(): Float? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var min = iterator.next()\n    if (min.isNaN()) return min\n    while (iterator.hasNext()) {\n        val e = iterator.next()\n        if (e.isNaN()) return e\n        if (min > e) min = e\n    }\n    return min\n}\n\n/**\n * Returns the smallest element or `null` if there are no elements.\n *\n * The operation is _terminal_.\n */\npublic fun <T : Comparable<T>> Sequence<T>.min(): T? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var min = iterator.next()\n    while (iterator.hasNext()) {\n        val e = iterator.next()\n        if (min > e) min = e\n    }\n    return min\n}\n\n/**\n * Returns the first element yielding the smallest value of the given function or `null` if there are no elements.\n *\n * The operation is _terminal_.\n */\npublic inline fun <T, R : Comparable<R>> Sequence<T>.minBy(selector: (T) -> R): T? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var minElem = iterator.next()\n    var minValue = selector(minElem)\n    while (iterator.hasNext()) {\n        val e = iterator.next()\n        val v = selector(e)\n        if (minValue > v) {\n            minElem = e\n            minValue = v\n        }\n    }\n    return minElem\n}\n\n/**\n * Returns the first element having the smallest value according to the provided [comparator] or `null` if there are no elements.\n *\n * The operation is _terminal_.\n */\npublic fun <T> Sequence<T>.minWith(comparator: Comparator<in T>): T? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var min = iterator.next()\n    while (iterator.hasNext()) {\n        val e = iterator.next()\n        if (comparator.compare(min, e) > 0) min = e\n    }\n    return min\n}\n\n/**\n * Returns `true` if the sequence has no elements.\n * \n * @sample samples.collections.Collections.Aggregates.none\n *\n * The operation is _terminal_.\n */\npublic fun <T> Sequence<T>.none(): Boolean {\n    return !iterator().hasNext()\n}\n\n/**\n * Returns `true` if no elements match the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.noneWithPredicate\n *\n * The operation is _terminal_.\n */\npublic inline fun <T> Sequence<T>.none(predicate: (T) -> Boolean): Boolean {\n    for (element in this) if (predicate(element)) return false\n    return true\n}\n\n/**\n * Returns a sequence which performs the given [action] on each element of the original sequence as they pass through it.\n *\n * The operation is _intermediate_ and _stateless_.\n */\n@SinceKotlin(\"1.1\")\npublic fun <T> Sequence<T>.onEach(action: (T) -> Unit): Sequence<T> {\n    return map {\n        action(it)\n        it\n    }\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right to current accumulator value and each element.\n *\n * The operation is _terminal_.\n */\npublic inline fun <S, T: S> Sequence<T>.reduce(operation: (acc: S, T) -> S): S {\n    val iterator = this.iterator()\n    if (!iterator.hasNext()) throw UnsupportedOperationException(\"Empty sequence can't be reduced.\")\n    var accumulator: S = iterator.next()\n    while (iterator.hasNext()) {\n        accumulator = operation(accumulator, iterator.next())\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original sequence.\n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself and calculates the next accumulator value.\n *\n * The operation is _terminal_.\n */\npublic inline fun <S, T: S> Sequence<T>.reduceIndexed(operation: (index: Int, acc: S, T) -> S): S {\n    val iterator = this.iterator()\n    if (!iterator.hasNext()) throw UnsupportedOperationException(\"Empty sequence can't be reduced.\")\n    var index = 1\n    var accumulator: S = iterator.next()\n    while (iterator.hasNext()) {\n        accumulator = operation(index++, accumulator, iterator.next())\n    }\n    return accumulator\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the sequence.\n *\n * The operation is _terminal_.\n */\npublic inline fun <T> Sequence<T>.sumBy(selector: (T) -> Int): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the sequence.\n *\n * The operation is _terminal_.\n */\npublic inline fun <T> Sequence<T>.sumByDouble(selector: (T) -> Double): Double {\n    var sum: Double = 0.0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns an original collection containing all the non-`null` elements, throwing an [IllegalArgumentException] if there are any `null` elements.\n *\n * The operation is _intermediate_ and _stateless_.\n */\npublic fun <T : Any> Sequence<T?>.requireNoNulls(): Sequence<T> {\n    return map { it ?: throw IllegalArgumentException(\"null element found in $this.\") }\n}\n\n/**\n * Splits this sequence into a sequence of lists each not exceeding the given [size].\n * \n * The last list in the resulting sequence may have less elements than the given [size].\n * \n * @param size the number of elements to take in each list, must be positive and can be greater than the number of elements in this sequence.\n * \n * @sample samples.collections.Collections.Transformations.chunked\n *\n * The operation is _intermediate_ and _stateful_.\n */\n@SinceKotlin(\"1.2\")\npublic fun <T> Sequence<T>.chunked(size: Int): Sequence<List<T>> {\n    return windowed(size, size, partialWindows = true)\n}\n\n/**\n * Splits this sequence into several lists each not exceeding the given [size]\n * and applies the given [transform] function to an each.\n * \n * @return sequence of results of the [transform] applied to an each list.\n * \n * Note that the list passed to the [transform] function is ephemeral and is valid only inside that function.\n * You should not store it or allow it to escape in some way, unless you made a snapshot of it.\n * The last list may have less elements than the given [size].\n * \n * @param size the number of elements to take in each list, must be positive and can be greater than the number of elements in this sequence.\n * \n * @sample samples.text.Strings.chunkedTransform\n *\n * The operation is _intermediate_ and _stateful_.\n */\n@SinceKotlin(\"1.2\")\npublic fun <T, R> Sequence<T>.chunked(size: Int, transform: (List<T>) -> R): Sequence<R> {\n    return windowed(size, size, partialWindows = true, transform = transform)\n}\n\n/**\n * Returns a sequence containing all elements of the original sequence without the first occurrence of the given [element].\n *\n * The operation is _intermediate_ and _stateless_.\n */\npublic operator fun <T> Sequence<T>.minus(element: T): Sequence<T> {\n    return object: Sequence<T> {\n        override fun iterator(): Iterator<T> {\n            var removed = false\n            return this@minus.filter { if (!removed && it == element) { removed = true; false } else true }.iterator()\n        }\n    }\n}\n\n/**\n * Returns a sequence containing all elements of original sequence except the elements contained in the given [elements] array.\n * \n * Note that the source sequence and the array being subtracted are iterated only when an `iterator` is requested from\n * the resulting sequence. Changing any of them between successive calls to `iterator` may affect the result.\n *\n * The operation is _intermediate_ and _stateful_.\n */\npublic operator fun <T> Sequence<T>.minus(elements: Array<out T>): Sequence<T> {\n    if (elements.isEmpty()) return this\n    return object: Sequence<T> {\n        override fun iterator(): Iterator<T> {\n            val other = elements.toHashSet()\n            return this@minus.filterNot { it in other }.iterator()\n        }\n    }\n}\n\n/**\n * Returns a sequence containing all elements of original sequence except the elements contained in the given [elements] collection.\n * \n * Note that the source sequence and the collection being subtracted are iterated only when an `iterator` is requested from\n * the resulting sequence. Changing any of them between successive calls to `iterator` may affect the result.\n *\n * The operation is _intermediate_ and _stateful_.\n */\npublic operator fun <T> Sequence<T>.minus(elements: Iterable<T>): Sequence<T> {\n    return object: Sequence<T> {\n        override fun iterator(): Iterator<T> {\n            val other = elements.convertToSetForSetOperation()\n            if (other.isEmpty())\n                return this@minus.iterator()\n            else\n                return this@minus.filterNot { it in other }.iterator()\n        }\n    }\n}\n\n/**\n * Returns a sequence containing all elements of original sequence except the elements contained in the given [elements] sequence.\n * \n * Note that the source sequence and the sequence being subtracted are iterated only when an `iterator` is requested from\n * the resulting sequence. Changing any of them between successive calls to `iterator` may affect the result.\n * \n * The operation is _intermediate_ for this sequence and _terminal_ and _stateful_ for the [elements] sequence.\n */\npublic operator fun <T> Sequence<T>.minus(elements: Sequence<T>): Sequence<T> {\n    return object: Sequence<T> {\n        override fun iterator(): Iterator<T> {\n            val other = elements.toHashSet()\n            if (other.isEmpty())\n                return this@minus.iterator()\n            else\n                return this@minus.filterNot { it in other }.iterator()\n        }\n    }\n}\n\n/**\n * Returns a sequence containing all elements of the original sequence without the first occurrence of the given [element].\n *\n * The operation is _intermediate_ and _stateless_.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Sequence<T>.minusElement(element: T): Sequence<T> {\n    return minus(element)\n}\n\n/**\n * Splits the original sequence into pair of lists,\n * where *first* list contains elements for which [predicate] yielded `true`,\n * while *second* list contains elements for which [predicate] yielded `false`.\n *\n * The operation is _terminal_.\n */\npublic inline fun <T> Sequence<T>.partition(predicate: (T) -> Boolean): Pair<List<T>, List<T>> {\n    val first = ArrayList<T>()\n    val second = ArrayList<T>()\n    for (element in this) {\n        if (predicate(element)) {\n            first.add(element)\n        } else {\n            second.add(element)\n        }\n    }\n    return Pair(first, second)\n}\n\n/**\n * Returns a sequence containing all elements of the original sequence and then the given [element].\n *\n * The operation is _intermediate_ and _stateless_.\n */\npublic operator fun <T> Sequence<T>.plus(element: T): Sequence<T> {\n    return sequenceOf(this, sequenceOf(element)).flatten()\n}\n\n/**\n * Returns a sequence containing all elements of original sequence and then all elements of the given [elements] array.\n * \n * Note that the source sequence and the array being added are iterated only when an `iterator` is requested from\n * the resulting sequence. Changing any of them between successive calls to `iterator` may affect the result.\n *\n * The operation is _intermediate_ and _stateless_.\n */\npublic operator fun <T> Sequence<T>.plus(elements: Array<out T>): Sequence<T> {\n    return this.plus(elements.asList())\n}\n\n/**\n * Returns a sequence containing all elements of original sequence and then all elements of the given [elements] collection.\n * \n * Note that the source sequence and the collection being added are iterated only when an `iterator` is requested from\n * the resulting sequence. Changing any of them between successive calls to `iterator` may affect the result.\n *\n * The operation is _intermediate_ and _stateless_.\n */\npublic operator fun <T> Sequence<T>.plus(elements: Iterable<T>): Sequence<T> {\n    return sequenceOf(this, elements.asSequence()).flatten()\n}\n\n/**\n * Returns a sequence containing all elements of original sequence and then all elements of the given [elements] sequence.\n * \n * Note that the source sequence and the sequence being added are iterated only when an `iterator` is requested from\n * the resulting sequence. Changing any of them between successive calls to `iterator` may affect the result.\n *\n * The operation is _intermediate_ and _stateless_.\n */\npublic operator fun <T> Sequence<T>.plus(elements: Sequence<T>): Sequence<T> {\n    return sequenceOf(this, elements).flatten()\n}\n\n/**\n * Returns a sequence containing all elements of the original sequence and then the given [element].\n *\n * The operation is _intermediate_ and _stateless_.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Sequence<T>.plusElement(element: T): Sequence<T> {\n    return plus(element)\n}\n\n/**\n * Returns a sequence of snapshots of the window of the given [size]\n * sliding along this sequence with the given [step], where each\n * snapshot is a list.\n * \n * Several last lists may have less elements than the given [size].\n * \n * Both [size] and [step] must be positive and can be greater than the number of elements in this sequence.\n * @param size the number of elements to take in each window\n * @param step the number of elements to move the window forward by on an each step, by default 1\n * @param partialWindows controls whether or not to keep partial windows in the end if any,\n * by default `false` which means partial windows won't be preserved\n * \n * @sample samples.collections.Sequences.Transformations.takeWindows\n */\n@SinceKotlin(\"1.2\")\npublic fun <T> Sequence<T>.windowed(size: Int, step: Int = 1, partialWindows: Boolean = false): Sequence<List<T>> {\n    return windowedSequence(size, step, partialWindows, reuseBuffer = false)\n}\n\n/**\n * Returns a sequence of results of applying the given [transform] function to\n * an each list representing a view over the window of the given [size]\n * sliding along this sequence with the given [step].\n * \n * Note that the list passed to the [transform] function is ephemeral and is valid only inside that function.\n * You should not store it or allow it to escape in some way, unless you made a snapshot of it.\n * Several last lists may have less elements than the given [size].\n * \n * Both [size] and [step] must be positive and can be greater than the number of elements in this sequence.\n * @param size the number of elements to take in each window\n * @param step the number of elements to move the window forward by on an each step, by default 1\n * @param partialWindows controls whether or not to keep partial windows in the end if any,\n * by default `false` which means partial windows won't be preserved\n * \n * @sample samples.collections.Sequences.Transformations.averageWindows\n */\n@SinceKotlin(\"1.2\")\npublic fun <T, R> Sequence<T>.windowed(size: Int, step: Int = 1, partialWindows: Boolean = false, transform: (List<T>) -> R): Sequence<R> {\n    return windowedSequence(size, step, partialWindows, reuseBuffer = true).map(transform)\n}\n\n/**\n * Returns a sequence of pairs built from elements of both sequences with same indexes.\n * Resulting sequence has length of shortest input sequence.\n *\n * The operation is _intermediate_ and _stateless_.\n */\npublic infix fun <T, R> Sequence<T>.zip(other: Sequence<R>): Sequence<Pair<T, R>> {\n    return MergingSequence(this, other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a sequence of values built from elements of both collections with same indexes using provided [transform]. Resulting sequence has length of shortest input sequences.\n *\n * The operation is _intermediate_ and _stateless_.\n */\npublic fun <T, R, V> Sequence<T>.zip(other: Sequence<R>, transform: (a: T, b: R) -> V): Sequence<V> {\n    return MergingSequence(this, other, transform)\n}\n\n/**\n * Returns a sequence of pairs of each two adjacent elements in this sequence.\n * \n * The returned sequence is empty if this sequence contains less than two elements.\n * \n * @sample samples.collections.Collections.Transformations.zipWithNext\n *\n * The operation is _intermediate_ and _stateless_.\n */\n@SinceKotlin(\"1.2\")\npublic fun <T> Sequence<T>.zipWithNext(): Sequence<Pair<T, T>> {\n    return zipWithNext { a, b -> a to b }\n}\n\n/**\n * Returns a sequence containing the results of applying the given [transform] function\n * to an each pair of two adjacent elements in this sequence.\n * \n * The returned sequence is empty if this sequence contains less than two elements.\n * \n * @sample samples.collections.Collections.Transformations.zipWithNextToFindDeltas\n *\n * The operation is _intermediate_ and _stateless_.\n */\n@SinceKotlin(\"1.2\")\npublic fun <T, R> Sequence<T>.zipWithNext(transform: (a: T, b: T) -> R): Sequence<R> {\n    return buildSequence result@ {\n        val iterator = iterator()\n        if (!iterator.hasNext()) return@result\n        var current = iterator.next()\n        while (iterator.hasNext()) {\n            val next = iterator.next()\n            yield(transform(current, next))\n            current = next\n        }\n    }\n}\n\n/**\n * Appends the string from all the elements separated using [separator] and using the given [prefix] and [postfix] if supplied.\n * \n * If the collection could be huge, you can specify a non-negative value of [limit], in which case only the first [limit]\n * elements will be appended, followed by the [truncated] string (which defaults to \"...\").\n * \n * @sample samples.collections.Collections.Transformations.joinTo\n *\n * The operation is _terminal_.\n */\npublic fun <T, A : Appendable> Sequence<T>.joinTo(buffer: A, separator: CharSequence = \", \", prefix: CharSequence = \"\", postfix: CharSequence = \"\", limit: Int = -1, truncated: CharSequence = \"...\", transform: ((T) -> CharSequence)? = null): A {\n    buffer.append(prefix)\n    var count = 0\n    for (element in this) {\n        if (++count > 1) buffer.append(separator)\n        if (limit < 0 || count <= limit) {\n            buffer.appendElement(element, transform)\n        } else break\n    }\n    if (limit >= 0 && count > limit) buffer.append(truncated)\n    buffer.append(postfix)\n    return buffer\n}\n\n/**\n * Creates a string from all the elements separated using [separator] and using the given [prefix] and [postfix] if supplied.\n * \n * If the collection could be huge, you can specify a non-negative value of [limit], in which case only the first [limit]\n * elements will be appended, followed by the [truncated] string (which defaults to \"...\").\n * \n * @sample samples.collections.Collections.Transformations.joinToString\n *\n * The operation is _terminal_.\n */\npublic fun <T> Sequence<T>.joinToString(separator: CharSequence = \", \", prefix: CharSequence = \"\", postfix: CharSequence = \"\", limit: Int = -1, truncated: CharSequence = \"...\", transform: ((T) -> CharSequence)? = null): String {\n    return joinTo(StringBuilder(), separator, prefix, postfix, limit, truncated, transform).toString()\n}\n\n/**\n * Creates an [Iterable] instance that wraps the original sequence returning its elements when being iterated.\n */\npublic fun <T> Sequence<T>.asIterable(): Iterable<T> {\n    return Iterable { this.iterator() }\n}\n\n/**\n * Returns this sequence as a [Sequence].\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Sequence<T>.asSequence(): Sequence<T> {\n    return this\n}\n\n/**\n * Returns an average value of elements in the sequence.\n *\n * The operation is _terminal_.\n */\n@kotlin.jvm.JvmName(\"averageOfByte\")\npublic fun Sequence<Byte>.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        count += 1\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns an average value of elements in the sequence.\n *\n * The operation is _terminal_.\n */\n@kotlin.jvm.JvmName(\"averageOfShort\")\npublic fun Sequence<Short>.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        count += 1\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns an average value of elements in the sequence.\n *\n * The operation is _terminal_.\n */\n@kotlin.jvm.JvmName(\"averageOfInt\")\npublic fun Sequence<Int>.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        count += 1\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns an average value of elements in the sequence.\n *\n * The operation is _terminal_.\n */\n@kotlin.jvm.JvmName(\"averageOfLong\")\npublic fun Sequence<Long>.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        count += 1\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns an average value of elements in the sequence.\n *\n * The operation is _terminal_.\n */\n@kotlin.jvm.JvmName(\"averageOfFloat\")\npublic fun Sequence<Float>.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        count += 1\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns an average value of elements in the sequence.\n *\n * The operation is _terminal_.\n */\n@kotlin.jvm.JvmName(\"averageOfDouble\")\npublic fun Sequence<Double>.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        count += 1\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns the sum of all elements in the sequence.\n *\n * The operation is _terminal_.\n */\n@kotlin.jvm.JvmName(\"sumOfByte\")\npublic fun Sequence<Byte>.sum(): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all elements in the sequence.\n *\n * The operation is _terminal_.\n */\n@kotlin.jvm.JvmName(\"sumOfShort\")\npublic fun Sequence<Short>.sum(): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all elements in the sequence.\n *\n * The operation is _terminal_.\n */\n@kotlin.jvm.JvmName(\"sumOfInt\")\npublic fun Sequence<Int>.sum(): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all elements in the sequence.\n *\n * The operation is _terminal_.\n */\n@kotlin.jvm.JvmName(\"sumOfLong\")\npublic fun Sequence<Long>.sum(): Long {\n    var sum: Long = 0L\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all elements in the sequence.\n *\n * The operation is _terminal_.\n */\n@kotlin.jvm.JvmName(\"sumOfFloat\")\npublic fun Sequence<Float>.sum(): Float {\n    var sum: Float = 0.0f\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all elements in the sequence.\n *\n * The operation is _terminal_.\n */\n@kotlin.jvm.JvmName(\"sumOfDouble\")\npublic fun Sequence<Double>.sum(): Double {\n    var sum: Double = 0.0\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n",null,null,null,null,null,null,null,null,null,null,null,null,"/*\n * Copyright 2010-2014 JetBrains s.r.o.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n@file:kotlin.jvm.JvmMultifileClass\n@file:kotlin.jvm.JvmName(\"CharsKt\")\n\npackage kotlin.text\n\n/**\n * Concatenates this Char and a String.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun Char.plus(other: String) : String = this.toString() + other\n\n/**\n * Returns `true` if this character is equal to the [other] character, optionally ignoring character case.\n *\n * @param ignoreCase `true` to ignore character case when comparing characters. By default `false`.\n *\n * Two characters are considered the same ignoring case if at least one of the following is `true`:\n *   - The two characters are the same (as compared by the == operator)\n *   - Applying the method [toUpperCase] to each character produces the same result\n *   - Applying the method [toLowerCase] to each character produces the same result\n */\npublic fun Char.equals(other: Char, ignoreCase: Boolean = false): Boolean {\n    if (this == other) return true\n    if (!ignoreCase) return false\n\n    if (this.toUpperCase() == other.toUpperCase()) return true\n    if (this.toLowerCase() == other.toLowerCase()) return true\n    return false\n}\n\n/**\n * Returns `true` if this character is a Unicode surrogate code unit.\n */\npublic fun Char.isSurrogate(): Boolean = this in Char.MIN_SURROGATE..Char.MAX_SURROGATE\n",null,null,null,null,null,null,"@file:kotlin.jvm.JvmMultifileClass\n@file:kotlin.jvm.JvmName(\"CollectionsKt\")\n\npackage kotlin.collections\n\n/* Not available on platform: JS */\n\n\n\n\n\n\n\n\n\n\n/**\n * Returns the given iterator itself. This allows to use an instance of iterator in a `for` loop.\n * @sample samples.collections.Iterators.iterator\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <T> Iterator<T>.iterator(): Iterator<T> = this\n\n/**\n * Returns an [Iterator] wrapping each value produced by this [Iterator] with the [IndexedValue],\n * containing value and it's index.\n * @sample samples.collections.Iterators.withIndexIterator\n */\npublic fun <T> Iterator<T>.withIndex(): Iterator<IndexedValue<T>> = IndexingIterator(this)\n\n/**\n * Performs the given [operation] on each element of this [Iterator].\n * @sample samples.collections.Iterators.forEachIterator\n */\npublic inline fun <T> Iterator<T>.forEach(operation: (T) -> Unit) : Unit {\n    for (element in this) operation(element)\n}\n\n/**\n * Iterator transforming original `iterator` into iterator of [IndexedValue], counting index from zero.\n */\ninternal class IndexingIterator<out T>(private val iterator: Iterator<T>) : Iterator<IndexedValue<T>> {\n    private var index = 0\n    final override fun hasNext(): Boolean = iterator.hasNext()\n    final override fun next(): IndexedValue<T> = IndexedValue(index++, iterator.next())\n}\n",null,null,null,null,null,null,null],"names":[],"mappings":"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AAT,EAAa,EAAb,C;EACT,C;kFACA,yB;IAAA,sD;IAAA,+B;MAAsC,cAAQ,cAAE,CAAE,EAAZ,EAAe,cAAE,CAAE,EAAnB,C;IAAA,C;GAAtC,C;oFACA,yB;IAAA,sD;IAAA,+B;MAAuC,cAAO,cAAE,CAAE,EAAX,EAAa,cAAE,CAAE,EAAjB,C;IAAA,C;GAAvC,C;kFACA,yB;IAAA,2C;IAAA,+B;MAAoC,mBAAG,cAAE,CAAE,EAAP,EAAS,cAAE,CAAE,EAAb,C;IAAA,C;GAApC,C;oFACA,yB;IAAA,2C;IAAA,+B;MAAqC,mBAAG,cAAE,CAAE,EAAP,EAAS,cAAE,CAAE,EAAb,C;IAAA,C;GAArC,C;gFACA,yB;IAAA,4B;IAAA,+B;MAAmE,kBAAvB,wB;MOtMxC,WPsMsE,KAAa,QOtMnF,WPsM2E,KAAK,GAAG,C;MOtMnF,WPsM8F,KAAc,QOtM5G,WPsMmG,KAAM,GAAG,C;MAApE,OOrMjC,W;IPqMiC,C;GAA5C,C;gFACA,yB;IADA,4B;IACA,+B;MADmE,kBACxB,wBADC,e;MOtMxC,WPsMsE,KAAa,QOtMnF,WPsM2E,KACxB,CAD6B,EAAG,C;MOtMnF,WPsM8F,KAAc,QOtM5G,WPsMmG,KAChD,CADsD,EAAG,C;MACrE,OOtMhC,W;IPsMgC,C;GAA3C,C;oFACA,yB;IAAA,oC;IAAA,4B;IAAA,iC;MAA0E,kBAAvB,wB;MOxM/C,WPwM6E,KAAY,oBOxMzF,WPwMkF,QAAO,E;MOxMzF,WPwMoG,KAAY,oBOxMhH,WPwMyG,QAAO,E;MAAjE,OOvMxC,W;IPuMwC,C;GAAnD,C;;IAA0E,kBACrC,wBADc,e;IOxM/C,WPwM6E,KAAY,oBOxMzF,WPwMkF,KACnC,GAD0C,E;IOxMzF,WPwMoG,KAAY,oBOxMhH,WPwMyG,KAC1D,GADiE,E;IAC/E,OOxM1B,W;EPwM0B,C;sFAErC,yB;IAAA,iC;MAAyE,kBAAvB,wB;MO3M9C,WP2M4E,KO3M5E,WP2MgF,Q;MO3MhF,WP2MuF,KO3MvF,WP2M2F,Q;MAA7C,OO1MvC,W;IP0MuC,C;GAAlD,C;;IAAyE,kBACrC,wBADc,e;IO3M9C,WP2M4E,KO3M5E,WP2MgF,KAClC,G;IO5M9C,WP2MuF,KO3MvF,WP2M2F,KAC7C,G;IAAd,OO3MzB,W;EP2MyB,C;;IAGlC,iBAAO,4BAAK,OAAL,IAAa,UAAb,GAA4B,U;IACnC,OAAO,MAAI,kBAAM,MAAI,GAAJ,GAAQ,CAAR,IAAN,CAAJ,I;EACT,C;;IACuC,wBAAQ,GAAR,EAAqB,GAArB,C;EAAA,C;;IAErC,YAAY,K;IACZ,gBAAgB,MAAI,GAAJ,I;IACH,uBAAU,KAAV,I;IAPb,iBAAO,4BAAK,OAAL,IAAa,UAAb,GAA4B,U;iBAO5B,G,GAAM,kBAAqB,CAN3B,GAAI,kBAMyB,KANnB,GAMiB,CANjB,GAAQ,CAAR,IAAN,CAAJ,IAMM,C;IAAgC,yBAAU,K;IAPvD,iBAAO,4BAAK,OAAL,IAAa,UAAb,GAA4B,U;IAOnC,OAAO,UAAsC,oBAAqB,CAN3D,GAAI,kBAMyD,KANnD,GAMiD,CANjD,GAAQ,CAAR,IAAN,CAAJ,IAMsC,IAA8B,KAA9B,IAAtC,K;EACT,C;;IACyB,cAAO,iBAAI,uCAAM,UAAV,EAAqB,uCAAM,UAA3B,CAAP,EAA8C,iBAAI,uCAAM,UAAV,EAAqB,uCAAM,UAA3B,CAA9C,C;EAAA,C;;IAES,QAAQ,W;IAAR,QAAqB,W;IAA3B,iBuBhL4B,MAAW,OAAM,CAAN,EAAS,CAAT,CvBgLvC,C;EAAA,C;;IACK,QAAM,W;IAAN,QAAQ,W;IAAd,iBuBjL6B,MAAW,OAAM,CAAN,EAAS,CAAT,CvBiLxC,C;EAAA,C;;;I4E3RG,gB;EAAD,C;;IAEU,OAAK,0BAAL,SAAK,EAAU,KAAM,KAAhB,C;EAAL,C;;;EAFvC,C;;;EAAA,C;;;;;;;;;;;;;;;;;EAAA,C;;;MAAA,qC;IAAA,C;;;;;;EAAA,C;;;;;;;;;;;;;;;;;;;;;;;EAAA,C;;;;;;;;;;;;;;;;;;;;EAAA,C;;;;;;;IACE,8C;IAA2B,iBAAK,QAAS,QAAd,C;IAA3B,Y;EAAA,C;;IAD4B,gB;EAA9B,C;;IAAA,gBAA8B,kCAA9B,C;EAAA,C;;IAAA,OAA8B,yCAA9B,M;EAAA,C;;IAAA,c;IAA8B,qD;IAA9B,a;EAAA,C;;IAAA,2IAA8B,oCAA9B,G;EAAA,C;;IAKwC,gBAAK,YAAA,SAAK,KAAL,EAAY,QAAZ,CAAL,C;EAAA,C;;IACR,gBAAK,iBAAK,CAAL,IAAL,C;EAAA,C;;IACC,mBAAK,wCAAK,CAAL,CAAL,C;EAAA,C;;IACI,gBAAK,iBAAO,KAAM,KAAb,IAAL,C;EAAA,C;;IACC,gBAAK,iBAAO,KAAM,KAAb,IAAL,C;EAAA,C;;IACA,gBAAkB,YAAZ,iBAAO,GAAK,CAAlB,C;EAAA,C;;;IAKpC,yB;MAAA,YAAyC,I;IACzC,uB;MAAA,UAAqC,I;IAHrC,gB;IACA,c;IACA,0B;IACA,sB;EAJ4B,C;;IAO1B,UACA,M;IADA,oDAAe,KAAf,e;IACA,sDAAa,KAAb,e;EACF,C;;;EATF,C;;;EAAA,C;;;;;;;;;;;;;;;;;;;;EAAA,C;;;MAAA,qC;IAAA,C;;;;;;;;;EAAA,C;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;EAAA,C;;;;;;;;;;;;;;;;;;;;;;;;wBAG2C,I;;;;sBACJ,I;;;;EAJvC,C;;;;;;;;IAcE,uB;MAAA,UAAiC,I;IACjC,sB;MAAA,SAA8B,I;IAC9B,uB;MAAA,U1E2EsD,gB;;I0E1EtD,qB;MAAA,QAAmC,I;IACnC,kC;MAAA,qBAA6C,I;IAL7C,4B;IACA,sB;IACA,oB;IACA,sB;IACA,kB;IACA,4C;EAN+B,C;;;EAAjC,C;;;EAAA,C;;;;;;;;;;;;;;;;;;;;;;EAAA,C;;;MAAA,qC;IAAA,C;;;;;;;;;;;EAAA,C;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;EAAA,C;;;;;;;;;;;;;;;;;;;;sBAEmC,I;;;;qBACH,I;;;;sB1E4EwB,gB;;;;;oB0E1EnB,I;;;;iCACU,I;;;;EAN/C,C;;;;;;;;IASE,Y;IACA,4B;EAFyB,C;;;EAA3B,C;;;EAAA,C;;;;;;;;;;;;;;;;;;EAAA,C;;;MAAA,qC;IAAA,C;;;;;;;EAAA,C;;;;;;;;;;;;;;;;;;;;;;;;;;;;;EAAA,C;;;;;;;;;;;;;;;;;;;;;;;;EAAA,C;;;;;;;;IAIkC,sB;EAAD,C;;;IAG7B,6B;MAAA,gBAAqC,I;IACrC,sB;MAAA,SAA+B,K;IAF/B,gB;IACA,kC;IACA,oB;EAH8B,C;;;EAAhC,C;;;EAAA,C;;;;;;;;;;;;;;;;;;;EAAA,C;;;MAAA,qC;IAAA,C;;;;;;;;EAAA,C;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;EAAA,C;;;;;;;;;;;;;;;;;;;;4BAEuC,I;;;;qBACN,K;;;;EAHjC,C;;;;;;;;EADF,C;;;EAAA,C;;;;;;;;;;;;;;;;;EAAA,C;;;MAAA,qC;IAAA,C;;;;;;EAAA,C;;;;;;;;;;;;;;;;;;;;;;;EAAA,C;;;;;;;;;;;;;;;;;;;;EAAA,C;;;;;;;;IAQgC,oB;MAAA,OAAe,C;IAAE,uB;MAAA,UAAgC,I;IAAjD,gB;IAAiB,sB;EAAlB,C;;;EAA/B,C;;;EAAA,C;;;;;;;;;;;;;;;;;;EAAA,C;;;MAAA,qC;IAAA,C;;;;;;;EAAA,C;;;;;;;;;;;;;;;;;;;;;;;;;;;;;EAAA,C;;;;;;;;;;;;;;;;;;;;sBAAiF,I;;;;EAAjF,C;;;;;;;;IC3CE,oB;MAAA,OAA6B,K;IAC7B,uB;MAAA,UAA2B,I;IAC3B,qB;MAAA,QAA2B,C;IAF3B,gB;IACA,sB;IACA,kB;EAH8B,C;;;EAAhC,C;;;EAAA,C;;;;;;;;;;;;;;;;;;EAAA,C;;;MAAA,qC;IAAA,C;;;;;;;;EAAA,C;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;EAAA,C;;;;;EAAA,C;;;;;;;;;mBAC+B,K;;;;sBACF,I;;;;oBACA,C;;;;EAH7B,C;;;;;;;;IAOE,uB;MAAA,UAA2B,I;IAC3B,yB;MAAA,YAAoC,I;IACpC,0B;MAAA,aAAsC,I;IACtC,oB;MAAA,OAA6B,K;IAH7B,sB;IACA,0B;IACA,4B;IACA,gB;EAJ8B,C;;;EAAhC,C;;;EAAA,C;;;;;;;;;;;;;;;;;;;EAAA,C;;;MAAA,qC;IAAA,C;;;;;;;;;EAAA,C;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;EAAA,C;;;;;EAAA,C;;;;;;;;;sBAC6B,I;;;;wBACS,I;;;;yBACE,I;;;;mBACT,K;;;;EAJ/B,C;;;;;;;IC8IA,mC;IAA6B,qB;EAA7B,C;;IAC4B,OAAA,kCAAW,M;EAAX,C;;;;;;;;IAD5B,0C;MAAA,yB;;IAAA,mC;EAAA,C;;IAKI,IAAI,iBAAJ,C;MAAkB,M;IAClB,0BAAQ,IAAR,C;IACK,WAAL,cAAK,EAAW,IAAX,C;EACT,C;;IAOoB,Q;IADhB,aAAa,oB;IACG,OAAL,SAAK,K;IAAL,iB;MAAa,OAAO,M;;IAA/B,WAAW,I;IAEX,OAAY,UAAL,IAAK,EAAQ,MAAR,EAAgB,MAAhB,C;EAChB,C;;IAMoB,Q;IAHhB,aAAa,oB;IACb,YAAY,M;IAEI,OAAL,SAAK,K;IAAL,iB;MAAa,OAAO,I;;IAA/B,WAAW,I;IAEX,OAAY,UAAL,IAAK,EAAQ,IAAR,EAAc,MAAd,C;EAChB,C;;IAGoB,Q;IAAA,OAAL,SAAK,K;IAAL,iB;MAAa,OAAO,S;;IAA/B,WAAW,I;IACX,OAAY,SAAL,IAAK,C;EAChB,C;;IAK+C,oC;EAAA,C;;IAI3B,Q;IADhB,UAAwB,oBAAd,uBAAc,CAAd,KAAyB,CAAzB,C;IACM,OAAL,SAAK,K;IAAL,iB;MAAa,OAAO,G;;IAA/B,WAAW,I;IAEX,OAAY,eAAL,IAAK,EAAa,GAAb,C;EAChB,C;;IAIoB,Q;IADhB,IAAI,0BAAgB,CAApB,C;MAAuB,OAAO,K;IACd,OAAL,SAAK,K;IAAL,iB;MAAa,OAAO,I;;IAA/B,WAAW,I;IACX,OAAY,QAAL,IAAK,C;EAChB,C;;mBAEgE,O;;EAA9B,C;;;;;;qF1ErMlC,yB;IAAA,mE;IAAA,qB;IAAA,wC;MAGuB,8B;QAAA,iBAAsB,C;MACzC,cAAc,kBAAkB,cAAlB,C;;QAEV,MAAM,OAAN,C;QACA,OAAO,OAAQ,Q;;;QACjB,gC;UACE,OAAQ,U;UACR,MAAM,C;;;UALV,O;;IAOJ,C;GAZA,C;;IAiCwB,sC;IAAiC,kB;IgCZrD,IAAI,EhCcQ,yBAAkB,CgCd1B,CAAJ,C;MACI,chCa+B,6CAA0C,qB;MgCZzE,MAAM,8BAAyB,OAAQ,WAAjC,C;;IhCeV,sBAGgB,C;IAGhB,6D;IAWA,cAA+B,kCAAW,M;IAC1C,cAA+B,W;EAvBZ,C;;;MAKnB,0B;IAAA,C;;MAAA,0B;IAAA,C;;;;MAMA,+B;IAAA,C;;MAOQ,2BAAQ,K;MACR,wBAAiB,K;IACrB,C;;;IAMA,wBAAW,GAAX,EAAgB,CAAhB,EAAmB,GAAI,OAAvB,C;EACJ,C;;IAGI,iBAAa,CAAb,C;IAEA,OAAO,WAAS,MAAhB,C;MAqTa,Q;MAAb,cAAa,oBAAb,YAAiC,mBAAH,IApTpB,CGgCP,UAA+B,IHoRlC,O;MAEK,U;MAAA,SAAL,IAAK,K;MAAQ,U;MAAA,IAAI,cAAJ,C;QACT,eAAM,wB;QAtTS,QAAM,QAAO,e;QAAb,QAA6B,SAAS,QAAT,I;QAAxC,WkCiHL,MAAK,KAAI,CAAJ,EAAO,CAAP,C;QlChHA,QAAO,oBAAW,SAAS,QAAT,IAAX,EAA4B,IAA5B,C;QACP,sBAAU,IAAV,I;QAoTJ,SAnTI,I;;;QAHW,UAwTT,MAxTsB,e;QAAb,UAA6B,SAAS,QAAT,I;QAAxC,akCiHL,MAAK,KAAI,GAAJ,EAAO,GAAP,C;QlCuME,MAvTK,oBAAW,SAAS,QAAT,IAAX,EAA4B,MAA5B,C;QACP,sBAAU,MAAV,I;QAsTJ,SArTI,M;;MAkTR,+B;;EA/SJ,C;;IA6SiB,Q;IAAb,cAAa,oBAAb,YAAiC,mBAAH,IA1SxB,CGsBH,UAA+B,IHoRlC,O;IAEK,U;IAAA,SAAL,IAAK,K;IAAQ,U;IAAA,IAAI,cAAJ,C;MACH,wBA7SI,qB;MA6SV,SA7SwB,C;;;MA+SlB,MA/SI,qB;MA+SV,SA/SwB,C;;IA4S5B,+B;EA3SJ,C;;IAySiB,Q;IAAb,cAAa,oBAAb,YAAiC,mBAAH,IAtSxB,CGkBH,UAA+B,IHoRlC,O;IAEK,U;IAAA,SAAL,IAAK,K;IAAQ,U;IAAA,IAAI,cAAJ,C;MACH,wBAzSI,oB;MAySV,SAzSuB,C;;;MA2SjB,MA3SI,oB;MA2SV,SA3SuB,C;;IAwS3B,+B;EAvSJ,C;;IAqSiB,Q;IAAb,cAAa,oBAAb,YAAiC,mBAAH,IAlSxB,CGcH,UAA+B,IHoRlC,O;IAEK,U;IAAA,SAAL,IAAK,K;IAAQ,U;IAAA,IAAI,cAAJ,C;MACH,wBArSI,sB;MAqSV,SArSyB,C;;;MAuSnB,MAvSI,sB;MAuSV,SAvSyB,C;;IAoS7B,+B;EAnSJ,C;;IAiSiB,Q;IAAb,cAAa,oBAAb,YAAiC,mBAAH,IA9RxB,CGUH,UAA+B,IHoRlC,O;IAEK,U;IAAA,SAAL,IAAK,K;IAAQ,U;IAAA,IAAI,cAAJ,C;MACH,wBAjSI,qB;MAiSV,SAjSwB,C;;;MAmSlB,MAnSI,qB;MAmSV,SAnSwB,C;;IAgS5B,+B;EA/RJ,C;;IA6RiB,Q;IAAb,cAAa,oBAAb,YAAiC,mBAAH,IA1RxB,CGMH,UAA+B,IHoRlC,O;IAEK,U;IAAA,SAAL,IAAK,K;IAAQ,U;IAAA,IAAI,cAAJ,C;MACH,wBA7RI,uB;MA6RV,SA7R0B,C;;;MA+RpB,MA/RI,uB;MA+RV,SA/R0B,C;;IA4R9B,+B;EA3RJ,C;;IAyRiB,Q;IAAb,cAAa,oBAAb,YAAiC,mBAAH,IAtRxB,CGEH,UAA+B,IHoRlC,O;IAEK,U;IAAA,SAAL,IAAK,K;IAAQ,U;IAAA,IAAI,cAAJ,C;MACH,wBAzRI,sB;MAyRV,SAzRyB,C;;;MA2RnB,MA3RI,sB;MA2RV,SA3RyB,C;;IAwR7B,+B;EAvRJ,C;;IAqRiB,Q;IAAb,cAAa,oBAAb,YAAiC,mBAAH,IA/QxB,CGLH,UAA+B,IHoRlC,O;IAEK,U;IAAA,SAAL,IAAK,K;IAAQ,U;IAAA,IAAI,cAAJ,C;MACT,SAAM,wB;MAjRH,QAAY,CAAE,KAAF,IAAc,K;MAA1B,wB;MAsMP,IAAK,CAAL,cAAQ,GAAR,C;QAtMI,EAuMA,mBAAY,OAAF,CAAE,CAAZ,C;QAF4C,uBAG5C,C;;YAEJ,QAAI,IAAJ,C;QA1MI,EA2MA,mBAA0C,OAA/B,MAAU,KAAM,EAAP,GAAe,EAAO,CAA1C,C;QA3MA,EA4MA,mBAA0C,OAA/B,MAAU,KAAO,CAAR,GAAe,EAAO,CAA1C,C;QA5MA,EA6MA,mBAA0C,OAA/B,MAAU,IAAc,EAAO,CAA1C,C;QAR4C,uBAS5C,C;;;QA9MA,EAiNA,mBAA0C,OAA/B,MAAU,KAAO,CAAR,GAAe,EAAO,CAA1C,C;QAjNA,EAkNA,mBAA0C,OAA/B,MAAU,IAAc,EAAO,CAA1C,C;QAb4C,uBAc5C,C;;MA8DA,6B;;;MAjRG,UAAY,CAAE,KAAF,IAAc,K;MAA1B,0B;MAsMP,IAAK,CAAL,kBAAQ,GAAR,C;QA6EU,MA5EN,mBAAY,OAAF,GAAE,CAAZ,C;QAF4C,yBAG5C,C;;YAEJ,UAAI,IAAJ,C;QAyEU,MAxEN,mBAA0C,OAA/B,MAAU,OAAM,EAAP,GAAe,EAAO,CAA1C,C;QAwEM,MAvEN,mBAA0C,OAA/B,MAAU,OAAO,CAAR,GAAe,EAAO,CAA1C,C;QAuEM,MAtEN,mBAA0C,OAA/B,MAAU,MAAc,EAAO,CAA1C,C;QAR4C,yBAS5C,C;;;QAqEM,MAlEN,mBAA0C,OAA/B,MAAU,OAAO,CAAR,GAAe,EAAO,CAA1C,C;QAkEM,MAjEN,mBAA0C,OAA/B,MAAU,MAAc,EAAO,CAA1C,C;QAb4C,yBAc5C,C;;MAgEA,+B;;IAHJ,+B;IA9QA,OAAO,I;EACX,C;;IAGI,IAAI,WAAJ,C;MACI,oBAAO,MAAP,C;;;MAEA,oBAAO,GAAP,EAAY,CAAZ,EAAe,GAAI,OAAnB,C;;IAEJ,OAAO,I;EACX,C;;IAGI,IAAI,WAAJ,C;MACI,OAAO,oBAAO,MAAP,EAAe,KAAf,EAAsB,GAAtB,C;;IAGX,mBAAY,GAAZ,EAAiB,KAAjB,EAAwB,GAAxB,C;IACA,OAAO,I;EACX,C;;IAwBqB,UAIC,MAJD,EAiBwB,M;IAnCzC,oBAAoB,CAAE,mB;IACtB,IAAI,qBAAJ,C;MACI,CAAE,U;MACF,M;;IAGJ,WAAW,W;IACX,IAAI,SAAS,kCAAW,MAAxB,C;MACI,cAAO,a;MACP,cAA0B,SAAd,aAAc,C;MAC1B,YAAqB,aAAd,aAAc,CAAe,Q;MACpC,M;;IAGJ,eAAe,IAAK,c;IACpB,eAAe,aAAc,c;IAE7B,kBAAkB,oB;IACD,IAAI,WAAW,WAAX,IAA0B,aAAa,IAAK,OAAL,GAAc,IAAK,eAAnB,IAAb,CAA9B,C;MACb,e;;;MACG,S;IAFP,qB;IAIkB,IAAI,WAAW,WAAX,IAA0B,YAAY,aAAc,SAApD,IAAgE,aAAc,qBAAlF,C;MACd,iB;;;MACG,W;IAFP,wB;IAIA,IAAI,eAAc,EAAd,IAAoB,gBAAe,EAAvC,C;MAEI,YAAY,a;MACZ,cAA0B,SAAd,aAAc,C;MAC1B,YAAY,aAAL,WAAK,CAAe,Q;;UACxB,IAAI,gBAAe,EAAf,IAAqB,cAAc,WAAvC,C;MAEH,IAAK,2BAAkB,aAAlB,EAAiC,IAAK,eAAL,GAAsB,IAAK,OAA3B,IAAjC,C;MACL,YAAY,aAAc,K;MACW,gBAAX,SAAd,aAAc,C;MAA1B,cAAY,CAAyB,SGxDlC,EAAW,SHwDoC,kBGxD/C,CAAJ,GAAsB,SAAtB,GAAgC,IHwDnB,qBAAgE,I;MAC5E,aAAc,iBAAQ,CAAE,KAAV,C;MACd,YAAY,aAAL,WAAK,CAAe,Q;;UACxB,IAAI,eAAc,EAAd,IAAoB,cAAc,UAAtC,C;MAEH,aAAc,4BAAmB,IAAnB,C;MAEd,IAAI,gBAAS,IAAb,C;QACI,cAAO,a;;;QAEP,UAAU,W;QACV,OAAO,IAAP,C;UACI,WAAW,cAAA,GAAI,KAAJ,C;UACX,IAAI,SAAS,IAAb,C;YAAmB,K;UACnB,MAAM,I;;QAGV,WAAW,a;;MAEf,IAAK,iBAAQ,WAAR,C;MAEL,cAA0B,SAAd,aAAc,C;MAC1B,YAAY,aAAL,WAAK,CAAe,Q;;;MAE3B,MAAM,2BAAsB,YAAS,WAAT,gBAA6B,UAAnD,C;;EAEd,C;;IAGI,SAAS,e;IACQ,QAAW,QAAQ,EAAG,eAAX,I;IAA5B,iBkChBG,MAAK,KlCgBe,GkChBf,EAAO,CAAP,C;IlCkBR,aAAU,KAAV,MAAsB,UAAtB,M;MACI,UAAU,CAAA,eAAI,CAAJ,CAAO,IAAP,IAAmB,K;MAC7B,IAAI,OAAO,GAAX,C;QACI,kBAAW,GAAX,EAAgB,CAAhB,EAAmB,GAAnB,EAAwB,EAAxB,C;QACA,M;;MAGJ,EAAG,mBAAc,OAAJ,GAAI,CAAd,C;MACH,6B;;IAGJ,IAAI,aAAa,GAAjB,C;MACI,OAAO,mBAAY,GAAZ,EAAiB,UAAjB,EAA6B,GAA7B,C;;EAEf,C;;IAO0B,IAEC,I;IALvB,UAAU,EAAG,e;IACI,QAAW,QAAQ,GAAR,I;IAA5B,iBkCrCG,MAAK,KlCqCe,GkCrCf,EAAO,CAAP,C;IlCuCR,aAAU,KAAV,MAAsB,UAAtB,M;MACI,UAAU,CAAA,eAAI,CAAJ,CAAO,IAAP,IAAmB,K;MAEzB,WAAO,GAAP,C;QAAe,Q;WACf,UAAM,IAAN,C;QAAe,Q;;QACP,Q;MAHZ,uB;MAMA,IAAI,MAAM,YAAV,C;QACI,OAAO,kBAAW,GAAX,EAAgB,CAAhB,EAAmB,GAAnB,EAAwB,wBAAxB,C;;MAGK,wB;MAuEpB,IAAK,CAAL,IAvEgC,GAuEhC,IAvEgC,GAuEhC,IAAQ,GAAR,C;QAvEiB,EAwEb,mBAAY,OAxEgB,GAwEhB,CAAZ,C;QAF4C,uBAG5C,C;;YAEJ,IA3EgC,GA2EhC,GAAI,IAAJ,C;QA3EiB,EA4Eb,mBAA0C,OAA/B,MA5EiB,GA4EP,IAAM,EAAP,GAAe,EAAO,CAA1C,C;QA5Ea,EA6Eb,mBAA0C,OAA/B,MA7EiB,GA6EP,IAAO,CAAR,GAAe,EAAO,CAA1C,C;QA7Ea,EA8Eb,mBAA0C,OAA/B,MA9EiB,GA8EP,GAAc,EAAO,CAA1C,C;QAR4C,uBAS5C,C;;;QA/Ea,EAkFb,mBAA0C,OAA/B,MAlFiB,GAkFP,IAAO,CAAR,GAAe,EAAO,CAA1C,C;QAlFa,EAmFb,mBAA0C,OAA/B,MAnFiB,GAmFP,GAAc,EAAO,CAA1C,C;QAb4C,uBAc5C,C;;MApFA,iC;MACA,YAAO,MAAP,I;MACA,wBAAQ,MAAR,I;;IAGJ,IAAI,aAAa,GAAjB,C;MACI,OAAO,kBAAW,GAAX,EAAgB,UAAhB,EAA4B,GAA5B,EAAiC,wBAAjC,C;;EAEf,C;;IAGI,OAAO,mBAAY,EAAZ,EAAgB,KAAhB,EAAuB,GAAvB,C;EACX,C;;IAGI,SAAS,e;IACQ,QAAW,QAAQ,EAAG,eAAX,I;IAA5B,iBkCnEG,MAAK,KlCmEe,GkCnEf,EAAO,CAAP,C;IlCqER,aAAU,KAAV,MAAsB,UAAtB,M;MACI,UAAU,CAAA,IAAI,CAAJ,CAAO,IAAP,IAAmB,K;MAC7B,IAAI,OAAO,GAAX,C;QACI,kBAAW,GAAX,EAAgB,CAAhB,EAAmB,GAAnB,EAAwB,EAAxB,C;QACA,M;;MAGJ,EAAG,mBAAc,OAAJ,GAAI,CAAd,C;MACH,6B;;IAGJ,IAAI,aAAa,GAAjB,C;MACI,OAAO,mBAAY,GAAZ,EAAiB,UAAjB,EAA6B,GAA7B,C;;EAEf,C;;IAK0B,IAEC,I;IAHN,QAAW,QAAQ,EAAG,eAAX,I;IAA5B,iBkCvFG,MAAK,KlCuFe,GkCvFf,EAAO,CAAP,C;IlCwFR,aAAU,KAAV,MAAsB,UAAtB,M;MACI,UAAU,CAAA,IAAI,CAAJ,CAAO,IAAP,IAAmB,K;MAEzB,WAAO,GAAP,C;QAAe,Q;WACf,UAAM,IAAN,C;QAAe,Q;;QACP,Q;MAHZ,uB;MAMA,IAAI,EAAG,eAAH,GAAoB,YAAxB,C;QACI,OAAO,kBAAW,GAAX,EAAgB,CAAhB,EAAmB,GAAnB,EAAwB,wBAAxB,C;;MAGX,sB;MAAW,wB;MAsBf,IAAK,CAAL,IAtB2B,GAsB3B,IAtB2B,GAsB3B,IAAQ,GAAR,C;QAtBY,EAuBR,mBAAY,OAvBW,GAuBX,CAAZ,C;QAF4C,uBAG5C,C;;YAEJ,IA1B2B,GA0B3B,GAAI,IAAJ,C;QA1BY,EA2BR,mBAA0C,OAA/B,MA3BY,GA2BF,IAAM,EAAP,GAAe,EAAO,CAA1C,C;QA3BQ,EA4BR,mBAA0C,OAA/B,MA5BY,GA4BF,IAAO,CAAR,GAAe,EAAO,CAA1C,C;QA5BQ,EA6BR,mBAA0C,OAA/B,MA7BY,GA6BF,GAAc,EAAO,CAA1C,C;QAR4C,uBAS5C,C;;;QA9BQ,EAiCR,mBAA0C,OAA/B,MAjCY,GAiCF,IAAO,CAAR,GAAe,EAAO,CAA1C,C;QAjCQ,EAkCR,mBAA0C,OAA/B,MAlCY,GAkCF,GAAc,EAAO,CAA1C,C;QAb4C,uBAc5C,C;;MAnCA,6C;;IAGJ,IAAI,aAAa,GAAjB,C;MACI,OAAO,kBAAW,GAAX,EAAgB,UAAhB,EAA4B,GAA5B,EAAiC,wBAAjC,C;;EAEf,C;;IAGI,oBAAO,CAAP,EAAU,CAAV,EAAa,CAAE,OAAf,C;EACJ,C;;IAGI,oBAAO,EAAP,EAAW,CAAX,EAAc,EAAG,OAAjB,C;EACJ,C;;IAQI,IAAK,CAAL,cAAQ,GAAR,C;MACI,4BAAY,OAAF,CAAE,CAAZ,C;MAF4C,OAG5C,C;;UAEJ,QAAI,IAAJ,C;MACI,4BAA0C,OAA/B,MAAU,KAAM,EAAP,GAAe,EAAO,CAA1C,C;MACA,4BAA0C,OAA/B,MAAU,KAAO,CAAR,GAAe,EAAO,CAA1C,C;MACA,4BAA0C,OAA/B,MAAU,IAAc,EAAO,CAA1C,C;MAR4C,OAS5C,C;;;MAGA,4BAA0C,OAA/B,MAAU,KAAO,CAAR,GAAe,EAAO,CAA1C,C;MACA,4BAA0C,OAA/B,MAAU,IAAc,EAAO,CAA1C,C;MAb4C,OAc5C,C;;EAd4C,C;;IA6BzC,Q;IAJP,WAAgB,QAAL,WAAK,C;IAChB,WAAe,SAAS,kCAAW,MAAxB,GAA+B,iCAA/B,GAAwD,W;IACnE,aAAa,mBAAe,IAAf,EAAqB,IAArB,C;;MAGT,aAAM,MAAN,C;;;MAEA,MAAO,U;;IAHX,W;EAKJ,C;;IAMI,WAAW,IAAK,O;IAEhB,cAAY,kCAAW,M;IACvB,cAAY,kCAAW,M;IACvB,YAAY,C;IAEZ,IAAI,SAAS,kCAAW,MAAxB,C;MAA+B,OAAO,mBAAe,IAAf,EAAqB,iCAArB,C;IACtC,OAAO,mBAAe,IAAf,EAAqB,WAArB,C;EACX,C;;IAMI,WAAW,IAAK,O;IAChB,YAAY,kCAAW,M;IAEvB,IAAI,SAAS,KAAb,C;MACI,cAAY,K;MACZ,cAAY,K;MACP,WAAL,IAAK,EAAW,WAAX,C;MACL,YAAO,C;;EAEf,C;;IAMI,c;EACJ,C;6HAEA,yB;IAAA,8B;MACiB,Q;MAAb,cAAa,oBAAb,YAAiC,mBAAH,QGpR3B,UAA+B,IHoRlC,O;MAEK,U;MAAA,SAAL,IAAK,K;MAAQ,U;MAAA,IAAI,cAAJ,C;QACT,eAAM,wBAAN,C;;;QAEA,eAAM,MAAN,C;;MAHJ,+B;IAKJ,C;GARA,C;;IAUmC,gB;IAAA,kDAAoB,mBAAH,GAAoB,CG7RjE,UAA+B,IH6RH,4BAA4C,wB;EAA5C,C;;IAG/B,YAAU,WAAK,S;IACf,IAAI,gBAAS,kCAAW,MAAxB,C;MACI,KAAI,yBAAgB,qBAAhB,C;;IAER,KAAI,uBAAc,sCAAe,aAA7B,C;IACJ,kBAAgB,c;IAChB,YAAK,KAAL,C;IACA,OAAO,K;EACX,C;;IAEuC,gBAAL,W;IAAA,OG1Sb,SH0S2B,KAAO,kCAAW,MG1S3D,GAAqB,SAArB,GAA+B,I;EH0SJ,C;;IAG9B,IAAI,gBAAS,kCAAW,MAAxB,C;MACI,cAAO,K;MACP,cAAO,K;;;MAEP,mBAAY,K;MACZ,cAAO,K;;EAEf,C;;;;;;;IqC7CA,sC;IAxWiB,kB;IACS,gB;EADV,C;;;MAOJ,OAAK,aAAL,WAAK,CAAe,Q;IAApB,C;;;;MAMA,OAAK,QAAL,WAAK,C;IAAL,C;;;IAMiB,0BAAoB,QAAL,WAAK,CAApB,EAA+B,SAA/B,C;EAAA,C;;IAOzB,WAAW,W;IACX,YAAY,kCAAW,M;IAEvB,IAAI,SAAS,KAAb,C;MACI,cAAY,K;MACP,WAAL,IAAK,EAAW,SAAX,C;;EAEb,C;;IAGI,WAAW,W;IACX,YAAY,kCAAW,M;IAEvB,IAAI,SAAS,KAAb,C;MAAoB,OAAO,I;IAC3B,cAAY,K;IACZ,OAAO,I;EACX,C;;IAGI,WAAW,W;IACX,WAAW,IAAK,K;IAChB,YAAY,kCAAW,M;IACvB,IAAI,SAAS,KAAb,C;MAAoB,OAAO,I;IAE3B,cAAY,sBAAQ,K;IAEpB,OAAO,I;EACX,C;;IA6Qa,Q;IAAA,gCA3QU,CA2QV,C;IAAA,iB;MAAkB,MAAM,iBAAa,uCA3Q3B,CA2Q2B,aAAb,C;;IAAjC,SAAS,I;IACT,SAAe,EA5QS,W;IA6QxB,kB;IA7Qa,OA8QN,E;EA9QM,C;;IA2QJ,Q;IAAA,gCA1QW,CA0QX,C;IAAA,iB;MAAkB,MAAM,iBAAa,uCA1Q1B,CA0Q0B,aAAb,C;;IAAjC,SAAS,I;IACT,SAAe,EA3QU,Y;IA4QzB,kB;IA5Qc,OA6QP,E;EA7QO,C;;IA0QL,Q;IAAA,gCAzQS,CAyQT,C;IAAA,iB;MAAkB,MAAM,iBAAa,uCAzQ5B,CAyQ4B,aAAb,C;;IAAjC,SAAS,I;IACT,SAAe,EA1QQ,U;IA2QvB,kB;IA3QY,OA4QL,E;EA5QK,C;;IAyQH,Q;IAAA,gCAxQU,CAwQV,C;IAAA,iB;MAAkB,MAAM,iBAAa,uCAxQ3B,CAwQ2B,aAAb,C;;IAAjC,SAAS,I;IACT,SAAe,EAzQS,W;IA0QxB,kB;IA1Qa,OA2QN,E;EA3QM,C;;IAwQJ,Q;IAAA,gCAvQW,CAuQX,C;IAAA,iB;MAAkB,MAAM,iBAAa,uCAvQ1B,CAuQ0B,aAAb,C;;IAAjC,SAAS,I;IACT,SAAe,EAxQU,Y;IAyQzB,kB;IAzQc,OA0QP,E;EA1QO,C;;IAuQL,Q;IAAA,gCAtQY,CAsQZ,C;IAAA,iB;MAAkB,MAAM,iBAAa,uCAtQzB,CAsQyB,aAAb,C;;IAAjC,SAAS,I;IACT,SAAe,EAvQW,a;IAwQ1B,kB;IAxQe,OAyQR,E;EAzQQ,C;;IAMsB,kCAAc,GAAd,EAAmB,CAAnB,EAAsB,GAAI,OAA1B,C;EAAA,C;;IAMP,sB;MAAA,SAAc,C;IAAG,sB;MAAA,SAAc,GAAI,O;ILpDrE,IAAI,EKqDQ,UAAU,CLrDlB,CAAJ,C;MACI,cKoDuB,yC;MLnDvB,MAAM,8BAAyB,OAAQ,WAAjC,C;;IAFV,IAAI,EKsDQ,UAAU,CLtDlB,CAAJ,C;MACI,gBKqDuB,yC;MLpDvB,MAAM,8BAAyB,SAAQ,WAAjC,C;;IAFV,IAAI,EKuDQ,UAAS,MAAT,SAAmB,GAAI,OLvD/B,CAAJ,C;MKuD2C,MAAM,iC;;IAE7C,OAAO,4BAAqB,GAArB,EAA0B,MAA1B,EAAkC,MAAlC,EAA0C,CAA1C,C;EACX,C;;IAK8B,sB;MAAA,SAAc,C;IAAG,sB;MAAA,SAAc,GAAI,O;IAC7D,SAAS,2BAAc,GAAd,EAAmB,MAAnB,EAA2B,MAA3B,C;IACT,IAAI,OAAM,MAAV,C;MAAkB,MAAM,iBAAa,gDAA6C,SAAS,EAAT,IAA7C,0BAAb,C;EAC5B,C;;IAMsB,sCAAwB,CAAxB,EAA2B,CAA3B,C;EAAA,C;;IAMlB,IAAI,qBAAQ,CAAR,MAAc,CAAlB,C;MAAqB,MAAM,iBAAa,uBAAoB,CAApB,gCAAb,C;EAC/B,C;;IAQI,kBAAc,CAAd,C;IACA,WAAW,C;IACX,aAAS,KAAT,C;IACA,cAAU,KAAV,C;IAEA,OAAO,CAAC,KAAR,C;MACI,aAAa,yBAAY,IAAZ,C;MACb,IAAI,cAAJ,C;QACI,IAAI,SAAQ,CAAZ,C;UAAe,K;QACf,MAAM,gCAA4B,uCAAoC,IAApC,WAA5B,C;;MAEI,qB;;QsCxGtB,gBAAgB,C;QAChB,YAAY,C;QACZ,oBAAoB,C;QAEpB,OtCoGe,MsCpGR,UAAP,C;UACI,QtCmGW,MsCnGQ,WAAX,GAAuB,G;UAE3B,SAAM,GAAN,MAAc,CAAd,C;YACI,IAAI,cAAa,CAAjB,C;cAAoB,MAAM,gCAA4B,cAAW,SAAX,0BAA5B,C;YACrB,SAAW,mBAAF,CAAE,E;YAAX,mB;;sBtCgGC,c;qBACF,E;kBACI,IAAI,IAAJ,C;oBACI,QAAM,I;oBACN,kBAAkB,K;oBAAlB,oB;;;kBAEJ,OAAK,I;kBANb,kBAOQ,I;kBAPR,oB;qBASI,E;kBACI,kB;kBACA,OAAO,I;wBAGP,IAAI,IAAJ,C;oBACI,QAAM,I;oBACN,kBAAkB,K;oBAAlB,oB;;;kBAGJ,IAAI,mBAAJ,C;oBACI,kB;oBACA,MAAM,iCAA6B,2DAA7B,C;;;kBAEV,6B;kBACI,mBAAO,aAAP,C;kBAxBZ,kBAyBQ,I;kBAzBR,oB;;;;YsChGA,IAAI,gBAAJ,C;ctC+FG,MsC9FC,kBAAS,CAAT,C;cACA,oBAAO,E;cAAP,sB;;;gBAGR,kBAAa,CAAb,C;YAGI,WAAW,G;YACX,QAAQ,C;YAER,aAAU,CAAV,OAAa,CAAb,M;cACI,IAAI,SAAU,IAAV,MAAkB,CAAtB,C;gBACI,QAAQ,QAAe,CAAL,I;gBAClB,OAAO,QAAS,C;gBAChB,6B;;;gBAEA,K;;;YAIR,gBAAgB,S;YAChB,6B;YAEA,IAAI,YtCuED,MsCvEa,cAAhB,C;ctCuEG,MsCtEC,kBAAS,CAAT,C;cACA,oBAAO,a;cAAP,sB;;;;YAKJ,QAAS,SAAU,CAAX,GAAkB,IAAM,G;YAChC,6B;YAEA,IAAI,cAAa,CAAjB,C;cACI,IAAI,eAAe,KAAf,CAAJ,C;gBACS,WAAe,mBAAN,KAAM,E;gBAAf,qB;;0BtC4DP,gB;yBACF,E;sBACI,IAAI,IAAJ,C;wBACI,QAAM,I;wBACN,oBAAkB,K;wBAAlB,oB;;;sBAEJ,OAAK,I;sBANb,oBAOQ,I;sBAPR,oB;yBASI,E;sBACI,kB;sBACA,OAAO,I;4BAGP,IAAI,IAAJ,C;wBACI,QAAM,I;wBACN,oBAAkB,K;wBAAlB,oB;;;sBAGJ,IAAI,mBAAJ,C;wBACI,kB;wBACA,MAAM,iCAA6B,2DAA7B,C;;;sBAEV,6B;sBACI,mBAAO,eAAP,C;sBAxBZ,oBAyBQ,I;sBAzBR,oB;;;;gBsC5DQ,IAAI,kBAAJ,C;kBtC2DL,MsC1DS,kBAAS,aAAT,C;kBACA,oBAAO,E;kBAAP,sB;;;oBAED,IAAI,CAAC,iBAAiB,KAAjB,CAAL,C;gBACH,MAAM,8BAAyB,0BAAuB,KAAvB,WAAzB,C;;;gBAED,WAA8B,mBAArB,cAAc,KAAd,CAAqB,E;gBAA9B,qB;;0BtCqDP,gB;yBACF,E;sBACI,IAAI,IAAJ,C;wBACI,QAAM,I;wBACN,oBAAkB,K;wBAAlB,oB;;;sBAEJ,OAAK,I;sBANb,oBAOQ,I;sBAPR,oB;yBASI,E;sBACI,kB;sBACA,OAAO,I;4BAGP,IAAI,IAAJ,C;wBACI,QAAM,I;wBACN,oBAAkB,K;wBAAlB,oB;;;sBAGJ,IAAI,mBAAJ,C;wBACI,kB;wBACA,MAAM,iCAA6B,2DAA7B,C;;;sBAEV,6B;sBACI,mBAAO,eAAP,C;sBAxBZ,oBAyBQ,I;sBAzBR,oB;;;;gBsCrDY,6B;gBAAA,U;kBACK,WAA6B,mBAApB,aAAa,KAAb,CAAoB,E;kBAA7B,qB;;4BtCoDX,gB;2BACF,E;wBACI,IAAI,IAAJ,C;0BACI,QAAM,I;0BACN,oBAAkB,K;0BAAlB,oB;;;wBAEJ,OAAK,I;wBANb,oBAOQ,I;wBAPR,oB;2BASI,E;wBACI,kB;wBACA,OAAO,I;8BAGP,IAAI,IAAJ,C;0BACI,QAAM,I;0BACN,oBAAkB,K;0BAAlB,oB;;;wBAGJ,IAAI,mBAAJ,C;0BACI,kB;0BACA,MAAM,iCAA6B,2DAA7B,C;;;wBAEV,6B;wBACI,mBAAO,eAAP,C;wBAxBZ,oBAyBQ,I;wBAzBR,oB;;;;kBsCpDgB,yB;;gBADR,S;kBtCoDL,MsClDS,kBAAS,aAAT,C;kBACA,oBAAO,E;kBAAP,sB;;;cAIR,QAAQ,C;;;;QAMxB,oBAAO,C;;;MtCuCC,wB;MA+BA,IAAI,SAAQ,CAAR,IAAa,KAAjB,C;QACI,kB;QACA,OAAO,C;;;IAIf,OAAO,YAAU,CAAV,IAAe,CAAC,Y;EAC3B,C;+HAEA,yB;IAAA,6C;IAAA,wB;MACI,cAAc,W;MAEd,IAAI,YAAY,oBAAW,MAA3B,C;QACI,MAAM,OAAN,C;QACA,IAAI,CAAC,OAAQ,UAAb,C;UACI,yBAAY,OAAZ,C;;;IAGZ,C;GATA,C;;IAcc,gC;IACN,aAAkB,W;EADZ,C;;IAIG,Q;IAAL,kBAAK,iBAAL,EAAK,yBAAL,UAAc,C;IACd,OAAO,I;EACX,C;;IAGI,MAAM,oC;EACV,C;;IAGI,MAAM,oC;EACV,C;;;;;;IAhBJ,IAAI,YAAJ,C;MAAa,OAAO,E;IAEpB,8D;IAiBA,OAAO,sBAAS,GAAT,EAAc,CAAd,EAAiB,GAAjB,C;EACX,C;;IAM8B,mB;MAAA,MAAW,C;IAAG,mB;MAAA,MAAW,U;IACnD,OAAO,iBAAU,GAAV,EAAe,GAAf,EAAoB,GAApB,C;EACX,C;;IAMI,sBAAS,GAAT,EAAc,eAAd,EAA+B,eAA/B,C;EACJ,C;;IAKa,mB;MAAA,MAAW,C;IAAG,mB;MAAA,MAAW,U;IAClC,IAAI,QAAO,CAAP,KAAa,QAAO,CAAP,IAAY,YAAzB,CAAJ,C;MAAuC,OAAO,E;IvBxMtB,gBAAxB,mBuB0MyC,aAAlB,cAAJ,GAAI,EAAc,EAAd,CAAkB,EAAa,GAAb,CvB1MzC,C;IuB2MI,iBlC1JR,SkC0JQ,W;IADJ,OlCxJG,SWlD0C,W;EuB6MjD,C;;IAMI,OAAO,sBAAS,eAAT,EAA0B,eAA1B,C;EACX,C;;IAsCW,Q;IAlCH,YAAO,CAAP,IAAY,QAAO,CAAnB,C;MAAwB,OAAO,C;SAC/B,iB;MAAW,IAAI,QAAO,CAAX,C;QAAc,OAAO,C;;QAAO,MAAM,iBAAa,cAAW,GAAX,gDAAb,C;SAC7C,UAAM,GAAN,C;MAAa,MAAM,8BAAyB,kDAA+C,GAA/C,gBAA2D,GAApF,C;IAGvB,iBAAa,CAAb,C;IAEA,OAAO,WAAS,GAAhB,C;MACI,aAAa,yBAAY,CAAZ,C;MACb,IAAI,cAAJ,C;QACI,IAAI,YAAU,GAAd,C;UAAmB,K;QACnB,MAAM,gCAA4B,gDAA6C,GAA7C,4BAAqE,QAAjG,C;;MAGM,sB;;QsCtPN,U;QAAA,StCsPD,MsCtPC,c;QAAlB,aAAU,CAAV,kB;UACI,QtCqPa,MsCrPM,WAAX,GAAuB,G;UAC3B,kBAAM,GAAN,MAAc,C;UAAd,Y;YAAoB,SAAW,mBAAF,CAAE,E;YAAX,mB;YtCqPhB,IAAI,gBAAJ,C;cAAA,kBAAmB,K;;;cAEX,mBAAO,aAAP,C;cACJ,2B;cAHJ,kBAII,I;;YsCzPW,yB;;UAAvB,W;YtCoPa,MsCnPT,kBAAS,CAAT,C;YACA,qBAAO,K;YAAP,uB;;;QAIR,qBAAO,I;;;MtC8OC,2B;MASA,IAAI,EAAJ,C;QACI,kB;;YACG,IAAI,aAAU,GAAd,C;QACH,K;;;QAIA,OAAO,WAAS,gBAAS,GAAT,EAAc,MAAM,QAAN,IAAd,EAA4B,MAAM,QAAN,IAA5B,CAAT,I;;;IAKX,eAAS,CAAT,C;MAAc,e;SACd,IAAK,QAAL,WAAK,CAAL,C;MAAkB,S;;MACV,Q;IAHZ,W;EAKJ,C;;IAGI,WAAW,C;IACX,iBAAa,CAAb,C;IAEA,OAAO,WAAS,GAAhB,C;MACI,aAAa,yBAAY,IAAZ,C;MACb,IAAI,cAAJ,C;QACI,IAAI,YAAU,GAAd,C;UAAmB,K;QACnB,MAAM,gCAA4B,uCAAoC,IAApC,WAA5B,C;;MAGI,qB;;QsCzQtB,gBAAgB,C;QAChB,YAAY,C;QACZ,oBAAoB,C;QAEpB,OtCqQe,MsCrQR,UAAP,C;UACI,QtCoQW,MsCpQQ,WAAX,GAAuB,G;UAE3B,SAAM,GAAN,MAAc,CAAd,C;YACI,IAAI,cAAa,CAAjB,C;cAAoB,MAAM,gCAA4B,cAAW,SAAX,0BAA5B,C;YACrB,SAAW,mBAAF,CAAE,E;YAAX,mB;YtCiQL,IAAI,gBAAJ,C;cAAA,kBAAmB,K;;;cAEX,mBAAO,aAAP,C;cACJ,2B;cAHJ,kBAII,I;;YsCrQJ,IAAI,gBAAJ,C;ctCgQG,MsC/PC,kBAAS,CAAT,C;cACA,oBAAO,E;cAAP,sB;;;gBAGR,kBAAa,CAAb,C;YAGI,WAAW,G;YACX,QAAQ,C;YAER,aAAU,CAAV,OAAa,CAAb,M;cACI,IAAI,SAAU,IAAV,MAAkB,CAAtB,C;gBACI,QAAQ,QAAe,CAAL,I;gBAClB,OAAO,QAAS,C;gBAChB,6B;;;gBAEA,K;;;YAIR,gBAAgB,S;YAChB,6B;YAEA,IAAI,YtCwOD,MsCxOa,cAAhB,C;ctCwOG,MsCvOC,kBAAS,CAAT,C;cACA,oBAAO,a;cAAP,sB;;;;YAKJ,QAAS,SAAU,CAAX,GAAkB,IAAM,G;YAChC,6B;YAEA,IAAI,cAAa,CAAjB,C;cACI,IAAI,eAAe,KAAf,CAAJ,C;gBACS,WAAe,mBAAN,KAAM,E;gBAAf,qB;gBtC6Nb,IAAI,gBAAJ,C;kBAAA,oBAAmB,K;;;kBAEX,mBAAO,eAAP,C;kBACJ,2B;kBAHJ,oBAII,I;;gBsCjOI,IAAI,kBAAJ,C;kBtC4NL,MsC3NS,kBAAS,aAAT,C;kBACA,oBAAO,E;kBAAP,sB;;;oBAED,IAAI,CAAC,iBAAiB,KAAjB,CAAL,C;gBACH,MAAM,8BAAyB,0BAAuB,KAAvB,WAAzB,C;;;gBAED,WAA8B,mBAArB,cAAc,KAAd,CAAqB,E;gBAA9B,qB;gBtCsNb,IAAI,gBAAJ,C;kBAAA,oBAAmB,K;;;kBAEX,mBAAO,eAAP,C;kBACJ,2B;kBAHJ,oBAII,I;;gBsC1NQ,6B;gBAAA,U;kBACK,WAA6B,mBAApB,aAAa,KAAb,CAAoB,E;kBAA7B,qB;kBtCqNjB,IAAI,gBAAJ,C;oBAAA,oBAAmB,K;;;oBAEX,mBAAO,eAAP,C;oBACJ,2B;oBAHJ,oBAII,I;;kBsCzNY,yB;;gBADR,S;kBtCqNL,MsCnNS,kBAAS,aAAT,C;kBACA,oBAAO,E;kBAAP,sB;;;cAIR,QAAQ,C;;;;QAMxB,oBAAO,C;;;MtCwMC,wB;MASA,IAAI,SAAQ,CAAZ,C;QACI,kB;QACA,OAAO,C;;;IAIf,OAAO,Q;EACX,C;;IAIkB,Q;IADd,IAAI,MAAK,CAAT,C;MAAY,OAAO,O;IACL,gCAAY,CAAZ,C;IAAA,iB;MAAkB,OAAO,O;;IAAvC,cAAc,I;IACH,QAAM,OAAQ,c;IAAzB,WHzHG,MAAK,KAAI,CAAJ,EGyHgC,CHzHhC,C;IG0HR,OAAQ,sBAAa,IAAb,C;IACR,kB;IAEA,OAAO,+BAAwB,IAAI,IAAJ,IAAxB,EAAkC,UAAU,IAAV,IAAlC,C;EACX,C;;IAIkB,UAIP,M;IALP,IAAI,WAAU,CAAd,C;MAAiB,OAAO,M;IACV,gCAAY,CAAZ,C;IAAA,iB;MAAkB,OAAO,M;;IAAvC,cAAc,I;IACH,QAAc,OAAQ,c;IAAjC,WHnIG,MAAK,KGmIS,MHnIT,EAAO,CAAP,C;IGqIR,OAAQ,cAAK,KAAL,EAAY,MAAZ,EAAoB,IAApB,C;IACD,IAAI,SAAQ,MAAR,IAAkB,OAAQ,cAAR,KAAyB,CAA/C,C;MACH,kB;MACA,qCAAqB,KAArB,EAA4B,SAAS,IAAT,IAA5B,EAA2C,SAAS,IAAT,IAA3C,EAA0D,SAAS,IAAT,IAA1D,C;;;MAEA,kBAAS,IAAT,I;;IAJJ,a;EAMJ,C;;IAGa,Q;IAAA,gCAAY,CAAZ,C;IAAA,iB;MAAkB,MAAM,iBAAa,uCAAoC,CAApC,aAAb,C;;IAAjC,SAAS,I;IACT,SAAS,MAAM,EAAN,C;IACT,kB;IACA,OAAO,E;EACX,C;;IAOoB,Q;IAJhB,WAAW,W;IAEX,eAAe,IAAK,c;IACpB,IAAI,YAAY,OAAhB,C;MAAyB,OAAO,I;IAChB,OAAL,IAAK,K;IAAL,iB;MAAa,OAAO,I;;IAA/B,WAAW,I;IAEX,IAAK,2BAAkB,IAAlB,EAAwB,UAAU,QAAV,IAAxB,C;IACL,IAAI,IAAK,cAAL,KAAsB,CAA1B,C;MACI,YAAY,IAAK,K;MACjB,IAAK,iBAAQ,SAAR,C;;IAGT,IAAI,IAAK,cAAL,IAAsB,OAA1B,C;MAAmC,OAAO,I;IAC1C,IAAI,UAAU,mDAAd,C;MAA4B,MAAM,2BAAsB,gBAAa,OAAb,yCAAsD,mDAA5E,C;IAElC,OAAO,yBAAY,OAAZ,C;EACX,C;;IAGI,WAAW,W;IACX,IAAI,IAAK,cAAL,KAAsB,CAA1B,C;MACI,yBAAY,IAAZ,C;;EAER,C;;IAGI,WAAW,IAAK,K;IAChB,cAAY,sBAAQ,kCAAW,M;IAC/B,IAAK,iBAAQ,SAAR,C;EACT,C;;IAEA,wC;IACI,aAAY,mBAAe,kCAAW,MAA1B,qD;IAIZ,oBAAmB,C;EALvB,C;;IACyD,qB;EAAR,C;;IACjB,OAAA,kCAAW,M;EAAX,C;;;;;;;;;;;;IAFhC,+C;MAAA,8B;;IAAA,wC;EAAA,C;;;;;;;IuC3W4B,wB;MAAA,WAAgB,E;IAAI,qB;MAAA,QAAa,U;IAC7D,IAAI,iBAAJ,C;MAAa,OAAO,I;IACpB,SAAS,mBAAc,QAAd,C;IACT,OAAW,iCAAe,EAAf,EAAmB,KAAnB,CAAJ,GAA+B,EAAG,WAAlC,GAAkD,I;EAC7D,C;;IAK6B,iB;MAAA,IAAS,mB;IAAqC,kBAAb,cAAU,CAAV,C;IAAoB,4BzEmExE,WyEnEwE,EAAc,CAAd,I;IAApB,OzEoEnD,W;EyEpEmD,C;qFDZ9D,yB;IAAA,0B;IAAA,oC;IAAA,sC;MACsB,Q;MAAA,8B;MAAlB,aAAU,CAAV,gB;QACI,QAAmB,oBAAX,GAAuB,G;QAC/B,IAAI,KAAM,GAAN,MAAc,CAAd,IAAmB,CAAC,SAAW,mBAAF,CAAE,EAAX,CAAxB,C;UACI,2BAAS,CAAT,C;UACA,OAAO,K;;;MAIf,OAAO,I;IACX,C;GAVA,C;mFAYA,yB;IAAA,oF;IAAA,0B;IAAA,oC;IAAA,uF;IAAA,sC;MAQI,gBAAgB,C;MAChB,YAAY,C;MACZ,oBAAoB,C;MAEpB,OAAO,mBAAP,C;QACI,QAAmB,oBAAX,GAAuB,G;QAE3B,SAAM,GAAN,MAAc,CAAd,C;UACI,IAAI,cAAa,CAAjB,C;YAAoB,MAAM,qCAA4B,cAAW,SAAX,0BAA5B,C;UAC1B,IAAI,CAAC,SAAW,mBAAF,CAAE,EAAX,CAAL,C;YACI,2BAAS,CAAT,C;YACA,OAAO,E;;;cAGf,kBAAa,CAAb,C;UAGI,WAAW,G;UACX,QAAQ,C;UAER,aAAU,CAAV,OAAa,CAAb,M;YACI,IAAI,SAAU,IAAV,MAAkB,CAAtB,C;cACI,QAAQ,QAAe,CAAL,I;cAClB,OAAO,QAAS,C;cAChB,6B;;;cAEA,K;;;UAIR,gBAAgB,S;UAChB,6B;UAEA,IAAI,YAAY,uBAAhB,C;YACI,2BAAS,CAAT,C;YACA,OAAO,a;;;;UAKX,QAAS,SAAU,CAAX,GAAkB,IAAM,G;UAChC,6B;UAEA,IAAI,cAAa,CAAjB,C;YACI,IAAI,eAAe,KAAf,CAAJ,C;cACI,IAAI,CAAC,SAAe,mBAAN,KAAM,EAAf,CAAL,C;gBACI,2BAAS,aAAT,C;gBACA,OAAO,E;;;kBAER,IAAI,CAAC,iBAAiB,KAAjB,CAAL,C;cACH,MAAM,8BAAyB,0BAAuB,KAAvB,WAAzB,C;;;cAEN,IAAI,CAAC,SAA8B,mBAArB,cAAc,KAAd,CAAqB,EAA9B,CAAD,IACI,CAAC,SAA6B,mBAApB,aAAa,KAAb,CAAoB,EAA7B,CADT,C;gBAEI,2BAAS,aAAT,C;gBACA,OAAO,E;;;YAIf,QAAQ,C;;;;MAMxB,OAAO,C;IACX,C;GA1EA,C;;;;;;;IAkFsC,cAAQ,EAAR,KAAc,C;EAAd,C;;IACS,oBAAa,O;EAAb,C;;IACX,QAAC,KAAO,IAAR,IAAiB,KAAjB,I;EAAA,C;;IACC,QAAC,OAAQ,EAAT,IAAe,KAAf,I;EAAA,C;;mBAE0B,O;;EAA9B,C;;;;;;;;;;;;;;EE7EjC,C;;;MAKgB,Q;IAAA,C;;;EAGZ,C;;EAGA,C;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;IpFkcdoB,G;WAEC,K;iBAEM,mN;mBAUE,i3B;mBCbF,iO;qBAUE,0wB;UCjBjB,G;WACC,G;SACF,G;WACE,G;eACI,I;yBaNsB,G;0BACI,G;qBACL,I;EHgCN,gBAAN,S;E9BiCtB,S8B/BI,UAAS,I;gB9BgCN,S;E8B5BoB,kBAAN,S;E9B2BrB,W8BzBI,SAAQ,I;e9B0BL,W;ayC8TI,8jC;aAoCA,8c;enDzZQ,G;SACN,I;cACK,K;WACH,K;cACG,K;gBAmdA,C;Q4D1dU,K;mBACL,K;oBACC,I;gBACJ,K;gBACA,K;kBACE,I;UACR,G;UACA,G;wBCRhB,WAPwB,CACxB,CAAC,GADuB,EACpB,CAAC,GADmB,EAExB,GAFwB,EAErB,CAAC,GAFoB,EAGxB,GAHwB,EAGrB,GAHqB,EAIxB,GAJwB,EAIrB,GAJqB,EAKxB,CAAC,GALuB,EAKpB,GALoB,EAMxB,CAAC,GANuB,EAMpB,CAAC,GANmB,CAOxB,C;sCwBR4C,w6J;iCAiCL,qlL;0BAkIT,6yE;6BA6CI,iH;8BAUpC,spG;4BA6BA,ojB;2BAYA,8iF;yBA8BA,2G;+BASA,wkF;ehCnPiB,oBAAO,K;QACd,oB;sBlDtDoB,C;iB+EsFG,O;oBACG,K;qBACC,K;qBACA,K;uBACE,K;;;;;"}